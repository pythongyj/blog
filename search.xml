<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/07/07/tiku/meiriyiti/"/>
      <url>2021/07/07/tiku/meiriyiti/</url>
      
        <content type="html"><![CDATA[<p>title:  每日一题题库 # 文章名称<br>date: 2021-07-07 19:06:25<br>updated: new Date()<br>tags: [tiku] # 文章标籤<br>categories: [tiku] # 分类<br>keywords: tiku<br>description: tiku<br>op_img: <a href="http://www.oss.qcwy.org.cn/mxt/3.jpeg">http://www.oss.qcwy.org.cn/mxt/3.jpeg</a> # 【可选】文章顶部图片<br>cover:  <a href="http://www.oss.qcwy.org.cn/mxt/4.jpeg">http://www.oss.qcwy.org.cn/mxt/4.jpeg</a> # 【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br>comments: true<br>copyright_info: 转载请留言,未经许可禁止转载,转载时请注明出处(必须保留作者署名及链接) #<br>sticky: 0# 是否置顶</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>由于每天学习以及练习的题有时候会在工作中使用到，并且一些复杂的题或参考别人做法的题，可能会需要反复查看，如果不整理，很容易丢失或者不好查找，因此，本文应运而生。</p></blockquote><h2 id="耗时"><a href="#耗时" class="headerlink" title="耗时"></a>耗时</h2><blockquote><p>消耗时间是未知的。因为每天都会去写，会去更新</p></blockquote><h2 id="css实现开关"><a href="#css实现开关" class="headerlink" title="css实现开关"></a>css实现开关</h2><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/WechatIMG11606.png" alt="题目"></p><h3 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100vh;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.cantainer</span> &#123;</span></span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        margin: 200px auto 0;</span><br><span class="line">        background-color: bisque;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: relative;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 30px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 50%;</span><br><span class="line">        left: 10%;</span><br><span class="line">        transform: translateY(-50%);</span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.3s</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: calc(90% - 30px);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cantainer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：此方式没有实现背景过度和自适应宽度</li></ul><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/%E4%BB%8A%E6%97%A5%E4%B8%80%E9%A2%98.gif" alt="效果"></p><h3 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100vh;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.cantainer</span> &#123;</span></span><br><span class="line">        width: 400px;</span><br><span class="line">        margin: 200px auto 0;</span><br><span class="line">       </span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">          display: flex;</span><br><span class="line">          padding: 5px;</span><br><span class="line">          height: 40px;</span><br><span class="line">          background-color: bisque;</span><br><span class="line">          transition: all 3s;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">          content: &#x27;&#x27;;</span><br><span class="line">          width: 40px;</span><br><span class="line">          height: 40px;</span><br><span class="line"><span class="css">          <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line">          content: &#x27;&#x27;;</span><br><span class="line">          background: transparent;</span><br><span class="line">          width: 0;</span><br><span class="line">          transition: all 3s;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">          background-color: blueviolet;</span><br><span class="line">          transition: all 3s;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line">         width: calc(100% - 40px);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cantainer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实现了所有的要求，并使用了flex布局</p></blockquote><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/%E4%BB%8A%E6%97%A5%E4%B8%80%E9%A2%982.gif" alt="效果"></p><h2 id="手写js的toLocaleString"><a href="#手写js的toLocaleString" class="headerlink" title="手写js的toLocaleString"></a>手写js的toLocaleString</h2><blockquote><p>实现   12345678.002345   -&gt;   12,345,678.002345</p></blockquote><blockquote><p>js原生方法实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">123434343243243242</span>;</span><br><span class="line"><span class="keyword">const</span> y = x.toLocaleString()</span><br><span class="line"><span class="comment">// y =&gt; &quot;123,434,343,243,243,250&quot;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="abacba-转成-aaa-bb-c"><a href="#abacba-转成-aaa-bb-c" class="headerlink" title="abacba 转成 aaa,bb,c"></a>abacba 转成 aaa,bb,c</h2><blockquote><p>思路:以对象存储，对象的Key代表字母，value代表出现的次数。将得到的对象转化为字符串</p><p><strong>答案不唯一</strong></p></blockquote><blockquote><p>Js 代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strFormate</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  str.split(<span class="string">&quot;&quot;</span>).forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> (o[e] ? o[e]++ : (o[e] = <span class="number">1</span>)));</span><br><span class="line">  <span class="built_in">Object</span>.keys(o).forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; o[e]; i++) s += e;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(strFormate(<span class="string">&quot;sdadasdasdsahjk&quot;</span>));<span class="comment">//ssssddddaaaahjk</span></span><br></pre></td></tr></table></figure><p>带有排序的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strFormate</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">&#x27;&#x27;</span>).sort().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(strFormate(<span class="string">&quot;sdadasdasdsahjk&quot;</span>));<span class="comment">//aaaaddddhjkssss</span></span><br></pre></td></tr></table></figure><p>带逗号的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strFormate</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> arr=[]</span><br><span class="line">  str.split(<span class="string">&quot;&quot;</span>).forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> (o[e] ? o[e]++ : (o[e] = <span class="number">1</span>)));</span><br><span class="line">  <span class="built_in">Object</span>.keys(o).sort().forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; o[e]; i++) s += e;</span><br><span class="line">    arr.push(s)</span><br><span class="line">    s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(strFormate(<span class="string">&quot;sdadasdasdsahjk&quot;</span>));<span class="comment">//aaaa,dddd,h,j,k,ssss</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="将一个字符串转化为三角形"><a href="#将一个字符串转化为三角形" class="headerlink" title="将一个字符串转化为三角形"></a>将一个字符串转化为三角形</h2><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-23_1.png" alt="题目"></p><blockquote><p>思路：</p><ul><li>根据图找出规律，每一行比上一行多两个字符</li><li>第一行空格等于(最后一行字符+第一行)/2</li></ul><p>js代码实现</p><p>实现一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> printPyramind = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> a = [];</span><br><span class="line">  <span class="keyword">let</span> c = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; ) &#123;</span><br><span class="line">    a.push(str.substr(i, c));</span><br><span class="line">    i += c;</span><br><span class="line">    c += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  a.forEach(<span class="function">(<span class="params">e, i</span>) =&gt;</span> (s += <span class="string">&quot; &quot;</span>.repeat((a.length - <span class="number">1</span> - i) * <span class="number">2</span>) + e + <span class="string">&quot;\n&quot;</span>));</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实现二：</p><p>群友实现的，看着还行，就放这了。思路是一样的，写法不一样！</p><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-23_2.png"></p></blockquote><h2 id="判断两个版本号的大小-2021-7-26"><a href="#判断两个版本号的大小-2021-7-26" class="headerlink" title="判断两个版本号的大小-2021-7-26"></a>判断两个<strong>版本号</strong>的大小-2021-7-26</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>算法题：Semantic Versioning 是一个前端通用的版本规范。格式为“{MAJOR}.{MINOR}.{PATCH}-{alpha|beta|rc}.{number}”，<br>要求实现 compare(a, b) 方法，比较 a, b 两个版本大小，</p><ol><li>当 a &gt; b 是返回 1；</li><li>当 a = b 是返回 0；</li><li>当 a &lt; b 是返回 -1；</li><li>其中，rc &gt; beta &gt; alpha，major &gt; minor &gt; patch；</li><li>例子，1.2.3 &lt; 1.2.4 &lt; 1.3.0-alpha.1 &lt; 1.3.0-alpha.2 &lt; 1.3.0-beta.1 &lt; 1.3.0-rc.1 &lt; 1.3.0</li></ol></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> compare = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  a = a</span><br><span class="line">    .replace(<span class="string">&quot;-alpha&quot;</span>, <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">    .replace(<span class="string">&quot;-beta&quot;</span>, <span class="string">&quot;-2&quot;</span>)</span><br><span class="line">    .replace(<span class="string">&quot;-rc&quot;</span>, <span class="string">&quot;-3&quot;</span>)</span><br><span class="line">    .split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">  b = b</span><br><span class="line">    .replace(<span class="string">&quot;-alpha&quot;</span>, <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">    .replace(<span class="string">&quot;-beta&quot;</span>, <span class="string">&quot;-2&quot;</span>)</span><br><span class="line">    .replace(<span class="string">&quot;-rc&quot;</span>, <span class="string">&quot;-3&quot;</span>)</span><br><span class="line">    .split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> contrast(a, b, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> contrast = <span class="function">(<span class="params">a, b, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> aNum1 = a[index].split(<span class="string">&quot;.&quot;</span>).join(<span class="string">&quot;&quot;</span>) * <span class="number">1</span>,</span><br><span class="line">    bNum1 = b[index].split(<span class="string">&quot;.&quot;</span>).join(<span class="string">&quot;&quot;</span>) * <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (aNum1 &gt; bNum1) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aNum1 &lt; bNum1) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index &lt; a.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> contrast(a, b, index + <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&quot; 1.3.0-rc.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;1.3.0-beta.1&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(compare(a, b), <span class="string">&quot;---&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="其他题解"><a href="#其他题解" class="headerlink" title="其他题解"></a>其他题解</h3><blockquote><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-26-1.jpeg"></p><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-26-2.jpeg"></p></blockquote><h2 id="统计出现次数最多数字和2021-7-27"><a href="#统计出现次数最多数字和2021-7-27" class="headerlink" title="统计出现次数最多数字和2021-7-27"></a>统计出现次数最多数字和2021-7-27</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><p>[‘12a’,’3b’,’4c’,’15d’,’15e’,’2a’] 统计这个数组中出现次数最多的字母前的数字和，这个数组就是a, 12+2 = 14</p></blockquote><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> k = e.replace(<span class="regexp">/\d/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> v = <span class="built_in">Number</span>(e.replace(<span class="regexp">/\D/g</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">const</span> a = map.get(k);</span><br><span class="line">    map.has(k)</span><br><span class="line">      ? map.set(k, &#123; <span class="attr">num</span>: a.num + <span class="number">1</span>, <span class="attr">count</span>: v + a.count &#125;)</span><br><span class="line">      : map.set(k, &#123; <span class="attr">num</span>: <span class="number">1</span>, <span class="attr">count</span>: v &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> n = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> c;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> map.entries()) <span class="keyword">if</span> (n &lt; v.num) (n = v.num), (c = v.count);</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn([<span class="string">&quot;12a&quot;</span>, <span class="string">&quot;3b&quot;</span>, <span class="string">&quot;4c&quot;</span>, <span class="string">&quot;15d&quot;</span>, <span class="string">&quot;15e&quot;</span>, <span class="string">&quot;2a&quot;</span>]));</span><br></pre></td></tr></table></figure></blockquote><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><blockquote><p>如果几个数据同时出现最多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> k = e.replace(<span class="regexp">/\d/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> v = <span class="built_in">Number</span>(e.replace(<span class="regexp">/\D/g</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">const</span> a = map.get(k);</span><br><span class="line">    map.has(k)</span><br><span class="line">      ? map.set(k, &#123; <span class="attr">num</span>: a.num + <span class="number">1</span>, <span class="attr">count</span>: v + a.count &#125;)</span><br><span class="line">      : map.set(k, &#123; <span class="attr">num</span>: <span class="number">1</span>, <span class="attr">count</span>: v &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> n = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> c = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; v.num) &#123;</span><br><span class="line">      n = v.num;</span><br><span class="line">      c=[],c.push(v)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n===v.num) &#123;</span><br><span class="line">      c.push(v)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn([<span class="string">&quot;12a&quot;</span>, <span class="string">&quot;3b&quot;</span>, <span class="string">&quot;4c&quot;</span>, <span class="string">&quot;15d&quot;</span>, <span class="string">&quot;15e&quot;</span>, <span class="string">&quot;16e&quot;</span>,<span class="string">&quot;2a&quot;</span>]),<span class="string">&#x27;----&#x27;</span>);</span><br></pre></td></tr></table></figure></blockquote><h2 id="左侧固定，右侧自适应2021-7-28"><a href="#左侧固定，右侧自适应2021-7-28" class="headerlink" title="左侧固定，右侧自适应2021-7-28"></a>左侧固定，右侧自适应2021-7-28</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><p>3种方式实现CSS方式实现左侧宽度固定，右侧自适应布局</p></blockquote><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-28-1.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>两篮布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./1.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">              xxxx</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">               xxx</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>inline-block+calc实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">306px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>flex实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h3><blockquote><p>本人知道的所有实现方式</p><ul><li><p>table、float、grid、负边距、padding+transform、inline-block、position、flex</p><p>其中有的方式可有多种方式实现</p></li></ul></blockquote><h2 id="js-判断一个对象是数组的方式2021-7-29"><a href="#js-判断一个对象是数组的方式2021-7-29" class="headerlink" title="js 判断一个对象是数组的方式2021-7-29"></a>js 判断一个对象是数组的方式2021-7-29</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><p>js 判断一个对象是数组的方式</p></blockquote><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-29-1.jpeg"></p><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-29-2.jpeg"></p><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-7-29-3.jpeg"></p><h2 id="失败重发ajax请求2021-8-3"><a href="#失败重发ajax请求2021-8-3" class="headerlink" title="失败重发ajax请求2021-8-3"></a>失败重发ajax请求2021-8-3</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><p>手写一个方法实现请求失败后一定时间后重试，重试时间是上次的两倍</p></blockquote><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-8-3_1.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;https://www.xxx.com&quot;</span>);</span><br><span class="line">  xhr.timeout = <span class="number">200</span>;</span><br><span class="line">  xhr.send(&#123; <span class="attr">speek</span>: <span class="string">&quot;I Love You ❤️&quot;</span> &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">          resolve(xhr.response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;请求失败&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;请求失败&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">resetRequset</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isSuccess = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">preRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (time &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;请求重试失败，请求结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请求重试失败，请求结束&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        request().catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">          preRequest();</span><br><span class="line">        &#125;);</span><br><span class="line">        time = time ? time * <span class="number">2</span> : <span class="number">1000</span>;</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="其他题解-1"><a href="#其他题解-1" class="headerlink" title="其他题解"></a>其他题解</h3><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-8-3_2.png"></p><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-8-3_3.jpeg"></p><p><img src="http://www.oss.qcwy.org.cn/meiriyiti/2021-8-3_4.jpeg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用gulp从0到1构建项目</title>
      <link href="2021/07/05/build/gulp/"/>
      <url>2021/07/05/build/gulp/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>由于公司需求，需要使用 gulp 构建项目，总结一下自己使用 gulp 构建的项目</p></blockquote><h3 id="耗时"><a href="#耗时" class="headerlink" title="耗时"></a>耗时</h3><blockquote><p>由于从来都没有接触过，所以耗时这块事件有点长，从开始搭建，到搭建完成用了 6 个小时左右。期间主要是查看官方文档和插件文档以及找插件。</p></blockquote><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><blockquote><p>并没有多少难点，估计是我做的不是太深入，项目比较简单的原因。唯一比较难受的地方就是起本地服务以、代理、抽离组件的时候耗费了一点时间，绝大多数时间都是在看文档。</p></blockquote><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><blockquote><p>gulp4.x</p><p>注意 3.x 和 4.x 的语法稍有区别</p></blockquote><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><a href="https://www.npmjs.com/package/gulp-cssmin">gulp-cssmin</a></li><li><a href="https://www.npmjs.com/package/gulp-htmlmin">gulp-htmlmin</a></li><li><a href="https://www.npmjs.com/package/gulp-uglify">gulp-uglify</a></li><li><a href="https://www.npmjs.com/package/gulp-imagemin">gulp-imagemin</a></li><li><a href="https://www.npmjs.com/package/gulp-clean-css">gulp-clean-css</a></li><li><a href="https://www.npmjs.com/package/gulp-less">gulp-less</a></li><li>less-plugin-autoprefix</li><li><a href="https://www.npmjs.com/package/gulp-clean">gulp-clean</a></li><li><a href="https://www.npmjs.com/package/gulp-rename">gulp-rename</a></li><li><a href="https://www.npmjs.com/package/gulp-webserver">gulp-webserver</a></li><li><a href="https://www.npmjs.com/package/gulp-file-include">gulp-file-include</a></li><li>……</li></ul><h3 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h3><ul><li>nodejs</li><li>npm</li><li>npx</li></ul><h2 id="学习-gulp"><a href="#学习-gulp" class="headerlink" title="学习 gulp"></a>学习 gulp</h2><h3 id="gulp-是什么、有什么用"><a href="#gulp-是什么、有什么用" class="headerlink" title="gulp 是什么、有什么用"></a>gulp 是什么、有什么用</h3><ul><li><strong>gulp</strong>是一个基于流的自动化构建工具</li><li>gulp 将开发流程中让人痛苦或耗时的任务自动化，从而减少你所浪费的时间、创造更大价值</li></ul><h3 id="gulp-API"><a href="#gulp-API" class="headerlink" title="gulp API"></a>gulp API</h3><h4 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task"></a>gulp.task</h4><ul><li>语法：gulp.task(任务名称，任务处理函数)</li><li>作用：创建一个基于流的任务</li><li>eg：gulp.task(xxx,func(){})</li></ul><h4 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src()"></a>gulp.src()</h4><ul><li>语法：gulp.src(路径)</li><li>作用：找到源文件</li><li>书写方式：<ul><li>gulp.src(‘./a/b.html’)</li><li>gulp.src(‘./*<em>/</em>.html’)</li><li>……</li></ul></li></ul><h3 id="gulp-dest"><a href="#gulp-dest" class="headerlink" title="gulp.dest()"></a>gulp.dest()</h3><ul><li>语法：gulp.dest(路径)</li><li>作用：把得到的流输出到目标文件目录</li><li>eg：gulp.dest(‘./xxx’)</li></ul><h3 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch()"></a>gulp.watch()</h3><ul><li>语法：gulp.watch(路径，任务名称)</li><li>作用：监控制定目录下的文件，一旦发生变化，从新执行后面的任务</li><li>eg：gulp.watch(‘./src/pages/* _ / _.html’,htmlHander)<ul><li>当 pages 文件下的任何.html 文件发生变化，就会执行 htmlHander 任务</li></ul></li></ul><h3 id="gulp-series"><a href="#gulp-series" class="headerlink" title="gulp.series()"></a>gulp.series()</h3><ul><li>语法：gulp.series(任务 1，任务 2，任务 3，。。。)</li><li>作用：逐个执行多个任务，前一个任务结束，第二个任务开始</li></ul><h3 id="gulp-parallel"><a href="#gulp-parallel" class="headerlink" title="gulp.parallel()"></a>gulp.parallel()</h3><ul><li>语法：gulp.parallel(任务 1，任务 2，任务 3，。。。)</li><li>作用：并行执行多个任务，其中一个失败，不影响其他任务</li></ul><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe()"></a>pipe()</h3><ul><li>语法：gulp.xxx().pipe(插件函数())</li><li>作用：管道函数,所有的 gulp API 都是基于流的</li><li>管道：接受当前流，进入下一个流的过程称为管道函数</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>API 了解完了，下面开始进行项目构建</p></blockquote><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><blockquote><p>下面所有的案例都默认引入了</p><p>const gulp = require(“gulp”);</p><p>除非特别声明外，创建<strong>gulpfile.js</strong>文件并且所有的代码都写在 <strong>gulpfile.js</strong>文件内</p><p>同一类型文件操作叠加，例如，1-1 是压缩 css，1-2 清除 css 会包含压缩 css，但是不会在重新引入插件</p><p>插件的使用方法和官方地址上面已经列出，一面不做讲解</p></blockquote><h3 id="压缩-css"><a href="#压缩-css" class="headerlink" title="压缩 css"></a>压缩 css</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-cssmin -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-cssmin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.dev = cssHandler;</span><br></pre></td></tr></table></figure><h3 id="清除-css"><a href="#清除-css" class="headerlink" title="清除 css"></a>清除 css</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-clean-css -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean-css&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.dev = cssHandler;</span><br></pre></td></tr></table></figure><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><blockquote><p>可用在任何文件中，所以下方需要的话，会直接使用上</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-rename -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&quot;gulp-rename&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对-less-进行转换"><a href="#对-less-进行转换" class="headerlink" title="对 less 进行转换"></a>对 less 进行转换</h3><blockquote><p>sass 于此类似 插件为 gulp-sass</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-less -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">&quot;gulp-less&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      less(&#123;</span><br><span class="line">        paths: [path.join(__dirname, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;includes&quot;</span>)],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对-css-处理，添加浏览器前缀"><a href="#对-css-处理，添加浏览器前缀" class="headerlink" title="对 css 处理，添加浏览器前缀"></a>对 css 处理，添加浏览器前缀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less-plugin-autoprefix -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LessAutoprefix = <span class="built_in">require</span>(<span class="string">&quot;less-plugin-autoprefix&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefix = <span class="keyword">new</span> LessAutoprefix(&#123; <span class="attr">browsers</span>: [<span class="string">&quot;last 2 versions&quot;</span>] &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      less(&#123;</span><br><span class="line">        paths: [path.join(__dirname, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;includes&quot;</span>)],</span><br><span class="line">        plugins: [autoprefix],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="html-压缩"><a href="#html-压缩" class="headerlink" title="html 压缩"></a>html 压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-htmlmin -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlHomeHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/*.html&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 去重空格</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩 html 的 style</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.html&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="js-压缩"><a href="#js-压缩" class="headerlink" title="js 压缩"></a>js 压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-uglify -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.js&quot;</span>)</span><br><span class="line">    .pipe(uglify()) <span class="comment">// js 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.js&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-imagemin -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/assets/img/*.*&quot;</span>)</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/assets/img&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="清除文件"><a href="#清除文件" class="headerlink" title="清除文件"></a>清除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-clean -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clearDist = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clearDistFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">&quot;dist/*&quot;</span>]).pipe(clearDist());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="开启本地服务"><a href="#开启本地服务" class="headerlink" title="开启本地服务"></a>开启本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-webserver -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;gulp-webserver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">&quot;./dist&quot;</span>).pipe(</span><br><span class="line">    server(&#123;</span><br><span class="line">      host: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      prot: <span class="string">&quot;8080&quot;</span>,</span><br><span class="line">      livereload: <span class="literal">true</span>,</span><br><span class="line">      open: <span class="string">&quot;./pages/index/index.min.html&quot;</span>,</span><br><span class="line">      proxies: [</span><br><span class="line">        &#123;</span><br><span class="line">          source: <span class="string">&quot;/api/v1&quot;</span>,</span><br><span class="line">          target: <span class="string">&quot;http://192.168.101.13:8080/api/v1/&quot;</span>, <span class="comment">//目标服务器</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="监听文件变化"><a href="#监听文件变化" class="headerlink" title="监听文件变化"></a>监听文件变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watchFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.watch(<span class="string">&quot;src/**/*.less&quot;</span>, cssHandler);</span><br><span class="line">  gulp.watch(<span class="string">&quot;src/**/*.js&quot;</span>, jsHandler);</span><br><span class="line">  gulp.watch(<span class="string">&quot;src/**/*.html&quot;</span>, htmlProductsHandler, htmlHomeHandler);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组件抽离"><a href="#组件抽离" class="headerlink" title="组件抽离"></a>组件抽离</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gulp-file-include -S -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileinclude = <span class="built_in">require</span>(<span class="string">&quot;gulp-file-include&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlProductsHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.html&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      fileinclude(&#123;</span><br><span class="line">        prefix: <span class="string">&quot;@@&quot;</span>,</span><br><span class="line">        basepath: <span class="string">&quot;@file&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 去重空格</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩 html 的 style</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.html&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index.min.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../components/footer/index.min.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    @@include(&#x27;../../components/header/index.html&#x27;)</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Lorem, ipsum dolor sit amet consectetur adipisicing elit. Porro,</span><br><span class="line">      voluptate sequi? Corrupti quos nobis id culpa quibusdam similique qui</span><br><span class="line">      sunt! At quis quaerat ab. Reiciendis error natus debitis animi esse</span><br><span class="line">      aspernatur eveniet.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem, ipsum.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Eius, fugit.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Temporibus, autem.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    @@include(&#x27;../../components/footer/index.html&#x27;)</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../lib/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../components/footer/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有详细使用请查看文档</p></blockquote><h3 id="组合任务"><a href="#组合任务" class="headerlink" title="组合任务"></a>组合任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.dev = gulp.series(</span><br><span class="line">  clearDistFile,</span><br><span class="line">  gulp.parallel(</span><br><span class="line">    cssHandler,</span><br><span class="line">    cssPubHandler,</span><br><span class="line">    otherHandler,</span><br><span class="line">    htmlHomeHandler,</span><br><span class="line">    jsHandler,</span><br><span class="line">    htmlProductsHandler,</span><br><span class="line">    jsCompontHandler,</span><br><span class="line">    cssCompontHandler,</span><br><span class="line">    imgHandler,</span><br><span class="line">    jQueryHandler</span><br><span class="line">  ),</span><br><span class="line">  serverHandler,</span><br><span class="line">  watchFile</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="package-json-文件中配置启动"><a href="#package-json-文件中配置启动" class="headerlink" title="package.json 文件中配置启动"></a>package.json 文件中配置启动</h3><blockquote><p>配置的是由 npx gulp 加上 gulpfile.js 导出的任务名称</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;start&quot;:&quot;npx gulp dev&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><ul><li>方式一</li></ul><blockquote><p>yarn start | npm run start</p></blockquote><ul><li>方式二</li></ul><blockquote><p>npx gulp dev | gulp dev</p></blockquote><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/pythongyj/gulp-temp-demo">项目地址</a></h3><h3 id="所有配置"><a href="#所有配置" class="headerlink" title="所有配置"></a>所有配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line">Skip to content</span><br><span class="line">Search or jump to…</span><br><span class="line"></span><br><span class="line">Pull requests</span><br><span class="line">Issues</span><br><span class="line">Marketplace</span><br><span class="line">Explore</span><br><span class="line"></span><br><span class="line">@pythongyj</span><br><span class="line">pythongyj</span><br><span class="line">/</span><br><span class="line">gulp-temp-demo</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span>0</span><br><span class="line">Code</span><br><span class="line">Issues</span><br><span class="line">Pull requests</span><br><span class="line">Actions</span><br><span class="line">Projects</span><br><span class="line">Wiki</span><br><span class="line">Security</span><br><span class="line">Insights</span><br><span class="line">Settings</span><br><span class="line">gulp-temp-demo/gulpfile.js /</span><br><span class="line">@pythongyj</span><br><span class="line">pythongyj init</span><br><span class="line">Latest commit <span class="number">6926e3</span>b <span class="number">6</span> minutes ago</span><br><span class="line"> History</span><br><span class="line"> <span class="number">1</span> contributor</span><br><span class="line"><span class="number">204</span> lines (<span class="number">187</span> sloc)  <span class="number">4.94</span> KB</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="comment">// 压缩 css 函数工具</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-cssmin&quot;</span>);</span><br><span class="line"><span class="comment">// 压缩 html 函数工具</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>);</span><br><span class="line"><span class="comment">// 压缩 js 函数工具</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);</span><br><span class="line"><span class="comment">// 压缩图片函数工具</span></span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>);</span><br><span class="line"><span class="comment">// 清除css</span></span><br><span class="line"><span class="keyword">const</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean-css&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">&quot;gulp-less&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LessAutoprefix = <span class="built_in">require</span>(<span class="string">&quot;less-plugin-autoprefix&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefix = <span class="keyword">new</span> LessAutoprefix(&#123; <span class="attr">browsers</span>: [<span class="string">&quot;last 2 versions&quot;</span>] &#125;);</span><br><span class="line"><span class="keyword">const</span> clearDist = <span class="built_in">require</span>(<span class="string">&quot;gulp-clean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&quot;gulp-rename&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;gulp-webserver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileinclude = <span class="built_in">require</span>(<span class="string">&quot;gulp-file-include&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化less 添加前缀并压缩</span></span><br><span class="line"><span class="keyword">const</span> cssHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      less(&#123;</span><br><span class="line">        paths: [path.join(__dirname, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;includes&quot;</span>)],</span><br><span class="line">        plugins: [autoprefix],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化公有less 添加前缀并压缩</span></span><br><span class="line"><span class="keyword">const</span> cssPubHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/accets/*.less&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      less(&#123;</span><br><span class="line">        paths: [path.join(__dirname, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;includes&quot;</span>)],</span><br><span class="line">        plugins: [autoprefix],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/accets/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩首页</span></span><br><span class="line"><span class="keyword">const</span> htmlHomeHandler = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/*.html&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      fileinclude(&#123;</span><br><span class="line">        prefix: <span class="string">&quot;@@&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 去重空格</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩 html 的 style</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.html&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/&quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩页面</span></span><br><span class="line"><span class="keyword">const</span> htmlProductsHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.html&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      fileinclude(&#123;</span><br><span class="line">        prefix: <span class="string">&quot;@@&quot;</span>,</span><br><span class="line">        basepath: <span class="string">&quot;@file&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 去重空格</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩 html 的 style</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.html&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages/&quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包页面压缩js文件</span></span><br><span class="line"><span class="keyword">const</span> jsHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/pages/**/*.js&quot;</span>)</span><br><span class="line">    .pipe(uglify()) <span class="comment">// js 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.js&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/pages&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包组件压缩js文件</span></span><br><span class="line"><span class="keyword">const</span> jsCompontHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/components/**/*.js&quot;</span>)</span><br><span class="line">    .pipe(uglify()) <span class="comment">// js 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.js&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/components&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化组件less 添加前缀并压缩</span></span><br><span class="line"><span class="keyword">const</span> cssCompontHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/components/**/*.less&quot;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      less(&#123;</span><br><span class="line">        paths: [path.join(__dirname, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;includes&quot;</span>)],</span><br><span class="line">        plugins: [autoprefix],</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(cssmin()) <span class="comment">// css 代码压缩</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&quot;.min.css&quot;</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/components/&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转移jq文件</span></span><br><span class="line"><span class="keyword">const</span> jQueryHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./node_modules/jquery/dist/jquery.min.js&quot;</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/lib&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转移第三方文件</span></span><br><span class="line"><span class="keyword">const</span> otherHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/lib/**&quot;</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/lib&quot;</span>)); <span class="comment">// 打包到的目录</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包图片</span></span><br><span class="line"><span class="keyword">const</span> imgHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/assets/img/*.*&quot;</span>)</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/assets/img&quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除dist文件夹下的所有文件</span></span><br><span class="line"><span class="keyword">const</span> clearDistFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">&quot;dist/*&quot;</span>]).pipe(clearDist());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听文件变化</span></span><br><span class="line"><span class="keyword">const</span> watchFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.watch(<span class="string">&quot;src/**/*.less&quot;</span>, cssHandler);</span><br><span class="line">  gulp.watch(<span class="string">&quot;src/**/*.js&quot;</span>, jsHandler);</span><br><span class="line">  gulp.watch(<span class="string">&quot;src/**/*.html&quot;</span>, htmlProductsHandler, htmlHomeHandler);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启本地服务，代理接口</span></span><br><span class="line"><span class="keyword">const</span> serverHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">&quot;./dist&quot;</span>).pipe(</span><br><span class="line">    server(&#123;</span><br><span class="line">      host: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      prot: <span class="string">&quot;8080&quot;</span>,</span><br><span class="line">      livereload: <span class="literal">true</span>,</span><br><span class="line">      open: <span class="string">&quot;./pages/index/index.min.html&quot;</span>,</span><br><span class="line">      proxies: [</span><br><span class="line">        &#123;</span><br><span class="line">          source: <span class="string">&quot;/api/v1&quot;</span>,</span><br><span class="line">          target: <span class="string">&quot;http://192.168.101.13:8080/api/v1/&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.dev = gulp.series(</span><br><span class="line">  clearDistFile,</span><br><span class="line">  gulp.parallel(</span><br><span class="line">    cssHandler,</span><br><span class="line">    cssPubHandler,</span><br><span class="line">    otherHandler,</span><br><span class="line">    htmlHomeHandler,</span><br><span class="line">    jsHandler,</span><br><span class="line">    htmlProductsHandler,</span><br><span class="line">    jsCompontHandler,</span><br><span class="line">    cssCompontHandler,</span><br><span class="line">    imgHandler,</span><br><span class="line">    jQueryHandler</span><br><span class="line">  ),</span><br><span class="line">  serverHandler,</span><br><span class="line">  watchFile</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>好记性不如烂笔头，总结的有欠缺的地方如有人看到请帮忙指出，谢谢！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> gulp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写一个自己的UI组件库</title>
      <link href="2021/04/13/vue/cq-vui/"/>
      <url>2021/04/13/vue/cq-vui/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>虽然说不要重复造轮子，但是知道轮子是怎么造出来的还是非常有必要的。本人也比较喜欢折腾，闲暇之余就写了个<strong>cq-vui</strong>的组件库。当然，我是个弱鸡，大佬们感觉有哪里需要改进优化的，还请留言告知。万分感谢！</p><p>这篇文章记录我在开发UI组件库的过程，也希望能够帮助看着这篇文章的你。</p></blockquote><h2 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><p>创建项目这点想必大家都会，如果不会的话，那就官网学习下喽！使用下面命令创建项目，然后根据需求进行选择,下图是本人进行选择的一些参数，仅供参考！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create cq-vui</span><br></pre></td></tr></table></figure><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413110826209.png" alt="image-20210413110826209"></p><h2 id="2、初始化项目"><a href="#2、初始化项目" class="headerlink" title="2、初始化项目"></a>2、初始化项目</h2><p>项目创建完成后是一个默认的项目，里面有一些文件我们是不许要的，在开始工作之前先将无用的文件进行删除，重置项目。</p><p>处理后的项目目录</p><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413111246879.png" alt="image-20210413111246879"></p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>打开页面可以发现是一个空的页面</p><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413111553827.png" alt="image-20210413111553827"></p><h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>components下创建一个button.vue文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button class&#x3D;&quot;cq-button&quot;&gt;我是按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;CqButton&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.cq-button&#123;</span><br><span class="line">    border: none;</span><br><span class="line">    outline: none;</span><br><span class="line">    background-color: coral;</span><br><span class="line">    color: aliceblue;</span><br><span class="line">    height: 30px;</span><br><span class="line">    width: auto;</span><br><span class="line">    padding: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>components下创建一个index.js文件,用于注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> button <span class="keyword">from</span> <span class="string">&quot;@/components/button.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line">  button</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(components).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.component(components[key].name, components[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install;</span><br></pre></td></tr></table></figure><p>在main.js下引入导出的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">+ <span class="keyword">import</span> CqUi <span class="keyword">from</span> <span class="string">&#x27;./components/index&#x27;</span></span><br><span class="line">+ Vue.use(CqUi)</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在view文件夹下创建一个index.vue页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;cq-button &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;indexPage&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>在router下的index.js中设置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">&quot;../views/index.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Index&quot;</span>,</span><br><span class="line">    component: Index</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>此时打开页面就可以看到我们的按钮了</p><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413113212118.png" alt="image-20210413113212118"></p><h2 id="调整项目"><a href="#调整项目" class="headerlink" title="调整项目"></a>调整项目</h2><p>要做成一个库进行发布，我们仅仅这样是不行的！还需要对项目进行调整（参考的是ElementUI组件库进行配置的）</p><p>将src文件夹改为<strong>examples</strong></p><p>创建一个 <strong>packages</strong>文件夹，将资源文件复制一份到此文件夹中</p><p>配置package.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cq-vui&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;lib/cq-ui.umd.min.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;一个UI组件库&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;长情&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;UI&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: <span class="string">&quot;vue-cli-service build --target lib --dest lib packages/index.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^3.6.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cq-vui&quot;</span>: <span class="string">&quot;^0.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^3.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-router&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span>: <span class="string">&quot;~4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-prettier&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span>: <span class="string">&quot;^10.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^6.7.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-prettier&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^6.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span>: <span class="string">&quot;^9.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass&quot;</span>: <span class="string">&quot;^1.26.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span>: <span class="string">&quot;^8.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;root&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;plugin:vue/essential&quot;</span>,</span><br><span class="line">      <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@vue/prettier&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;babel-eslint&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not dead&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,vue&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这句话**”lib”: “vue-cli-service build –target lib –dest lib packages/index.js”**</p><p>是为了构建<strong>npm</strong>包的，可以看到<strong>vue-cli</strong>官方文档中有这段介绍</p><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413113958461.png" alt="image-20210413113958461"></p><p>调整**.gitignore**文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line">.npmignore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">pnpm-debug.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br></pre></td></tr></table></figure><p>创建vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      <span class="comment">// 修改项目入口文件</span></span><br><span class="line">      entry: <span class="string">&quot;examples/main.js&quot;</span>,</span><br><span class="line">      template: <span class="string">&quot;public/index.html&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 扩展webpack配置,使webpages加入编译</span></span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&quot;js&quot;</span>)</span><br><span class="line">      .include.add(path.resolve(__dirname, <span class="string">&quot;packages&quot;</span>))</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">&quot;babel&quot;</span>)</span><br><span class="line">      .loader(<span class="string">&quot;babel-loader&quot;</span>)</span><br><span class="line">      .tap(<span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建**.npmignore<strong>文件，上传到</strong>npm<strong>时要忽略上传的文件，由于后面上传</strong>npm**要用到，就在这说了！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">src/</span><br><span class="line">rollup.config.js</span><br><span class="line">app.vue</span><br><span class="line">.gitignore</span><br><span class="line"></span><br><span class="line"># 忽略目录</span><br><span class="line">examples/</span><br><span class="line">packages/</span><br><span class="line">public/</span><br><span class="line"> </span><br><span class="line"># 忽略指定文件</span><br><span class="line">vue.config.js</span><br><span class="line">babel.config.js</span><br><span class="line">*.map</span><br></pre></td></tr></table></figure><h2 id="上传到github仓库"><a href="#上传到github仓库" class="headerlink" title="上传到github仓库"></a>上传到github仓库</h2><p>登录github</p><p>点击创建仓库</p><p>给仓库起个名字（cq-vui）</p><p>在项目中执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn add .</span><br><span class="line">yarn commit -m <span class="string">&#x27;init&#x27;</span></span><br><span class="line">yarn remote xxx(你的仓库地址)</span><br><span class="line">yarn push origin master</span><br></pre></td></tr></table></figure><p>执行完这些命令之后就已经将本UI库上传到github上了</p><h2 id="上传到npm仓库"><a href="#上传到npm仓库" class="headerlink" title="上传到npm仓库"></a>上传到<strong>npm</strong>仓库</h2><p>首先，你要有一个<strong>npm</strong>账号，没有的话自行注册。</p><p>在命令行执行,保证上传是正确的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add nrm -g</span><br><span class="line">nrm ls</span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p>在命令行执行<strong>yarn lib</strong>进行打包生成要上传到<strong>npm</strong>上的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn lib <span class="comment">// 打包生产文件</span></span><br></pre></td></tr></table></figure><p>在命令行执行 ** npm login** 进行登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login <span class="comment">// 用户名、密码、邮箱</span></span><br></pre></td></tr></table></figure><p>在命令行执行<strong>npm publish</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm publish  <span class="comment">// 上传到npm</span></span><br><span class="line"><span class="comment">// 注意：如果npm上已经有和你库的名字相同的库，则会上传失败，报错-&gt;没有权限</span></span><br><span class="line"><span class="comment">// 此时你需要重新起一个npm上没有的名字进行提交上传</span></span><br></pre></td></tr></table></figure><h2 id="验证UI组件库是否成功"><a href="#验证UI组件库是否成功" class="headerlink" title="验证UI组件库是否成功"></a>验证UI组件库是否成功</h2><p>在项目中执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cq-vui <span class="comment">// 下载UI组件库</span></span><br></pre></td></tr></table></figure><p>在main.js中全局使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line">+ <span class="keyword">import</span> CqVui <span class="keyword">from</span> <span class="string">&#x27;cq-vui/lib/cq-vui.umd&#x27;</span></span><br><span class="line">+ <span class="keyword">import</span> <span class="string">&#x27;cq-vui/lib/cq-vui.css&#x27;</span></span><br><span class="line"></span><br><span class="line">+ Vue.use(CqVui)</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在页面上使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;cq-button&gt;我是按钮&lt;&#x2F;cq-button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>页面上显示的效果</p><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413115738837.png" alt="image-20210413115738837"></p><p>到此UI组件库基础搭建已经全部完成</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="http://www.oss.qcwy.org.cn/b/cq-vui/image-20210413115846398.png" alt="image-20210413115846398"></p><h2 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h2><p>将会慢慢完善，敬请期待</p><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> UI组件库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac图床配置</title>
      <link href="2021/04/10/other/picture-bed/"/>
      <url>2021/04/10/other/picture-bed/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>写博客等其他一些文章的时候，都会用到一些图片进行说明。</p><p>然而每次用图片的时候都是手动传，然后再使用链接！好麻烦的有木有！</p><p>最近买了个oss，手动上传有点麻烦，就想着搞个图床算了！结果就有了下面这篇文章。</p></blockquote><h2 id="1、阿里云OSS"><a href="#1、阿里云OSS" class="headerlink" title="1、阿里云OSS"></a>1、阿里云OSS</h2><h3 id="1-1、购买阿里云OSS"><a href="#1-1、购买阿里云OSS" class="headerlink" title="1.1、购买阿里云OSS"></a>1.1、购买阿里云OSS</h3><blockquote><p>首先你需要购买一个阿里云OSS，当然其他平台的也是可以的！这里不做详细说明，毕竟只是买个东西！</p></blockquote><h3 id="1-2、配置OSS"><a href="#1-2、配置OSS" class="headerlink" title="1.2、配置OSS"></a>1.2、配置OSS</h3><blockquote><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412095450789.png" alt="image-20210412095450789"></p><p>如图所示：</p><p>在控制台里点击OSS后显示的界面如图所示！</p><p>点击<strong>创建Bucket</strong>创建一个Bucket。创建过程不再讲解！没啥东西，具体有文档的嘛！</p><p>注意：这里要点<strong>常用入口–&gt;Access Key</strong>（上图）。进入如下页面</p><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412100449636.png" alt="image-20210412100449636"></p><p>点击开始使用进入</p><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412100635669.png" alt="image-20210412100635669"></p><p>创建成功后</p><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412100740922.png" alt="image-20210412100740922"></p><p>Access Key 和Secret Key可一先保存下来，得会会用到的！</p><p>如果想使用自己的域名作为图片的链接地址的话，可以根据文档进行配置</p></blockquote><h2 id="2、图床工具设置"><a href="#2、图床工具设置" class="headerlink" title="2、图床工具设置"></a>2、图床工具设置</h2><h3 id="2-1、下载图床软件"><a href="#2-1、下载图床软件" class="headerlink" title="2.1、下载图床软件"></a>2.1、下载图床软件</h3><blockquote><p>一开始我是想用ipic的，但是中所周知MAC电脑大多软件都要钱。这个软件用不起！最终换成了upic作为图床工具。</p><p>下载方式：<a href="https://github.com/gee1k/uPic">地址</a></p><p>可以先去软件的github，然后根据说明在MAC命令行中执行一行代码就可以了！（需要homebrew哦）</p><p>命令：<strong>brew cask install upic</strong></p></blockquote><h3 id="2-2、配置图床"><a href="#2-2、配置图床" class="headerlink" title="2.2、配置图床"></a>2.2、配置图床</h3><blockquote><p>打开upic软件，选择偏好设置–&gt;图床–&gt; 点击加号–&gt;选择阿里云OSS。显示如图</p><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412101840657.png" alt="image-20210412101840657"></p><p>根据上面的显示填写正确完整即可。Access Key 和Secret Key上面已经申请过，复制进去即可，空间名称为你的<strong>Bucket</strong>的名称。域名如果你设置了自有域名的话就天自己的，没有的话就写<strong>Bucket</strong>的外网Bucket域名即可。</p><p>最后点击验证，如果提示上传成功，就代表完成。</p></blockquote><h2 id="3、typora配置图床"><a href="#3、typora配置图床" class="headerlink" title="3、typora配置图床"></a>3、typora配置图床</h2><blockquote><p>注意：版本太低的话，是不行的，没有配置的地方！升级一下就好了</p><p>typora – &gt; 偏好设置–&gt;图像–&gt; 上传服务设定–&gt;选择uPic–&gt;验证图片上传选项–&gt;如果图示成功则代表设置完成。</p><p>如图：</p><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412102652993.png" alt="image-20210412102652993"></p><p>到此全部完成，以后再在typora上使用图片时，就会自动上传并转换为上传的地址。</p><p><img src="http://www.oss.qcwy.org.cn/b/picture-bed/image-20210412103046602.png" alt="image-20210412103046602"></p><p>这个也放在这吧！方便看一下</p></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>总的来说很简单，只是没有弄过的话会有点摸不着头脑，感觉是个什么高深的东西一样！其实当你配置一下就会发现，就这？哈哈哈</p></blockquote><p>原创文章：转载请联系我。未经允许，禁止转载。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活杂谈</title>
      <link href="2021/02/18/life/life-2021-218/"/>
      <url>2021/02/18/life/life-2021-218/</url>
      
        <content type="html"><![CDATA[<h2 id="镜子"><a href="#镜子" class="headerlink" title="镜子"></a>镜子</h2><blockquote><p>​    我看见一个男人，前几年他无忧无虑，逍遥自在，从不自卑。<strong>现在他一身烟味，俩眼无光，面脸憔悴</strong></p><p>​    我很想心疼他一下，于是我摸了一下镜子，突然泪流满面！</p></blockquote><h2 id="三十岁一切才刚刚开始"><a href="#三十岁一切才刚刚开始" class="headerlink" title="三十岁一切才刚刚开始"></a>三十岁一切才刚刚开始</h2><blockquote><p>​    <strong>等你过了30岁，没有稳定的工作，没有存款</strong>，亲人遇到事情你拿不出钱，你就会明白，脸不脸的，情啊爱的，原来都是浮云。</p><p>​    <strong>没有钱，走到哪里，你都低人一等，十几个人去吃饭，没有人对你敬酒，更没有人问你喜欢吃什么，有你在，最多只是多一双筷子而已。</strong></p><p>​    男人这辈子，落魄一次，你就知道在你身边的到底是人是鬼。不要把什么都放在别人身上，不然你连后悔的机会都没有。</p></blockquote><h2 id="什么是吃苦"><a href="#什么是吃苦" class="headerlink" title="什么是吃苦"></a>什么是吃苦</h2><blockquote><p>​    大多数人对吃苦的含义可能理解的太肤浅。穷，并不是吃苦，穷就是穷，一天24小时流水线，也不叫吃苦。<strong>吃苦不是忍受贫穷的能力，更不是重复、机器式的工作多少时间</strong>。</p><p>​    吃苦的本质，<strong>是长时间为了某个目标而聚焦的能力，</strong>在这个过程中放弃娱乐生活，放弃无效社交，放弃无意义的消费以及在过程中不被理解的孤独，<strong>他本质是一种自控能力、自制能力、坚持能力和深度思考能力</strong></p><p>​    从很大程度来说，靠自己成功的富人往往比穷人更能吃苦耐劳，否则他不可能白手起家。你会看到他富有之后还是比普通人勤奋，比普通人能忍受孤独还更有理想。</p><p>​    <strong>吃苦，即吃脑力的苦、寂寞的苦、被指指点点等等的苦</strong></p></blockquote><h2 id="别再一无所有"><a href="#别再一无所有" class="headerlink" title="别再一无所有"></a>别再一无所有</h2><blockquote><p>​    你见过母亲羡慕别人的目光么？</p><p>​    你见过父亲哭哭哀求别人的样子么？</p><p>​    老大不小了，别再混日子了！</p><p>​    别再等到家人需要你的时候</p><p>​    你除了眼泪，一无所有！！！</p></blockquote><h2 id="穷人家庭VS富人家庭"><a href="#穷人家庭VS富人家庭" class="headerlink" title="穷人家庭VS富人家庭"></a>穷人家庭VS富人家庭</h2><blockquote><p>​    这事一个可悲的现象！</p><p>​    越是没钱的家庭，越是四分五裂。老人卑微受累，每一天好日子过；兄弟姐妹不念亲情，各过各的，连邻居都不如；</p><p>​    而越有钱的家庭，越幸福团结。老人德高望重，安享晚年；兄弟姐妹一个帮一个，经常聚会，一起发家致富</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 生活杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020总结与2021目标</title>
      <link href="2021/02/11/target/2021-target/"/>
      <url>2021/02/11/target/2021-target/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天是2020年农历大年三十，过了今天晚上12点就是崭新的2021年了！今天对2020年自己达成的成做坐一个总结以及2021年的规划做一个系统的规划！</p></blockquote><h2 id="2020个人总结"><a href="#2020个人总结" class="headerlink" title="2020个人总结"></a>2020个人总结</h2><blockquote><p>今年是一个极其特别的一年，也是一个特别不容易的一年！今年最值得庆幸的事有四件</p><ol><li>我还活着</li><li>走出了心里阴影</li><li>有了一个崭新的人生规划</li><li>事业更上一层楼</li></ol></blockquote><h3 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h3><blockquote><p>能够做到独自一人开发一个大型系统的前端开发。能够把公司的项目从零到一的完成！</p><p>对写程序有了一个全新的认识。能够充分理解并运组件化开发的思想、面向对象的思想、原子化css的思想等等。</p><p>对html、css、js有了全新的认识，更加注重内功的修炼。认识到css的强大、html的语义化的重要、无处不在的js</p><p>对vue、react、小程序、公众号等有了一个全新的认识。</p><p>对系统兼容性以及性能优化的重要性有了全新的认识，充分体会到性能的重要性！（以后还需要在这方面下更大的功夫）</p><p>总结：以上就是今年工作的收获吧！写的比较笼统。一句话概括就是自己已经达到独当一面的能力了！</p></blockquote><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><blockquote><p>2020年，对于生活，最大的收获就是终于走出了心里的阴影，能够让我下定决心，有勇气、体会到生活的美好！能够放下过去的失败的感情。用了整整5年的时间，终于从上一段感情冲走了出来，重新起航去寻找自己一生的伴侣（现在这个社会，说一生的伴侣可能有点。。。但是我愿意去尝试了，也愿意并能够接受失败）。<strong>每个人都会遇到不美好，该坚强该努力奋斗的还是要继续，不能一味矫情的过。相信生活很精彩，相信他人的善意，相信自己的能力，相信努力有意义。你越相信，就越接近美好</strong></p><p>2020年，住了一年朝北的房子，说实话，房子住的特别压抑，但是为了能够不靠家里，自己努力存钱，为自己以后的娶妻生子多存点钱，还是坚持下来了！</p><p>看了一些书，学会了一些事！</p></blockquote><h2 id="2021规划"><a href="#2021规划" class="headerlink" title="2021规划"></a>2021规划</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><blockquote><p>做好份内的工作！少说，多看，多听，多总结，多反思</p></blockquote><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><blockquote><p>每月阅读2-3本书</p><p>深入学习react flutter typescript技术以及生态。</p><p>学习管理学的相关知识</p></blockquote><h3 id="生活-1"><a href="#生活-1" class="headerlink" title="生活"></a>生活</h3><blockquote><p>换个朝阳的房子</p><p>脱单。寻找到可以把我的全世界都给她，我是她的全世界的人。亲人只能陪她走过一段路，我想陪她走剩下的路。（2021最大的目标！希望能够实现）</p><p>学会做一个有趣的人</p><p>给生活添加仪式感</p><ul><li>仪式就是使某一天于其他日子不同，使某一时刻与其他时刻不同。仪式时把本来单调普通的事情，变得不一样。仪式时让我们对所在意的事情，怀有敬畏心理。无聊的生活中，平淡时常态，总要找到一种新的方式，陪自己度过无趣的今天</li></ul><p>做一个更有担当，有责任心的人！</p><p>善待自己</p><p>想拥有一个属于自己的温馨、温暖的家。</p></blockquote><h3 id="2021对她说的话"><a href="#2021对她说的话" class="headerlink" title="2021对她说的话"></a>2021对她说的话</h3><blockquote><p>我不需要你长相如何，也不许要你有多优秀，我只需要我们能够互相包容，互相尊重，有一个温馨的、温暖的家。能够让我们有一个下班后第一念想就是回家的家。</p><p>我可能不善言辞，不屑言辞，也不知道如何才能找到你！但是我已经做好了一切准备去拥抱你！我会努力给你更好的生活。</p><p>家是港湾，是温暖，也是责任！</p><p>期望能够找到你，和你一起共度余生，共同感受生活的美好。</p></blockquote><p>总结：拥抱生活，拥抱明天！</p>]]></content>
      
      
      <categories>
          
          <category> target </category>
          
      </categories>
      
      
        <tags>
            
            <tag> target </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用shell编写脚本批量压缩文件</title>
      <link href="2021/01/21/shell/zip/"/>
      <url>2021/01/21/shell/zip/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于工作中每天进行项目开发后，都要给项目经理打包代码。而且pc和移动端都要进行打包，最重要的是带很多的站点，需要一个一个进行打包，而且每天都要打包一次，时间长了，感觉人都要没了！由于自己太懒了！就你想着想办法搞成自动的。于是就有了下面的内容。内容过于简单，但很实用！</p><p>不得不说，<strong>shell</strong>脚本真的很强大！有时间得好好学学<strong>shell</strong>脚本和<strong>linux</strong>命令！真的很实用，很好用！也把这个任务归到了<strong>2021小目标里了</strong></p><p>这里不说代码的具体意思，等完整的学完<strong>shell</strong>脚本后，会写一篇总结，到时候在总结里面再写！</p><p>本文只为随笔记录一些有用但还容易忘的知识点！</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>简单的随便写几个,并非公司内真是的文件</p><p>根目录，新建 是<strong>zip.sh</strong>文件</p><p>zip 进行压缩</p><p>unzip 进行解压</p><p>-r   对目录及目录的内容一起压缩 ，不添加-r 参数时 对目录进行压缩 解压后目录内是没有内容的！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123; <span class="string">&quot;vn-VN xxx&quot;</span> , <span class="string">&quot;th-Th&quot;</span> , <span class="string">&quot;zh-TW&quot;</span> , <span class="string">&quot;en-US&quot;</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> zip -r <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;zip&quot;: &quot;./zop.sh&quot;</span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 zip.sh</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><blockquote><p>这个是你要生成的需要压缩的文件。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build:all</span><br></pre></td></tr></table></figure><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><blockquote><p>对需要压缩的文件进行压缩</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn zip</span><br></pre></td></tr></table></figure><blockquote><p>至此，就已经完成打包了！</p><p>原创文章：转载请联系我。未经允许，禁止转载。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0-1开发基于Vue3.x+TS项目实战</title>
      <link href="2020/12/22/vue/vue-3_ts/"/>
      <url>2020/12/22/vue/vue-3_ts/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>vue3.x正式版已经发布有几个月了！终于有时间学习vue3.x了！本文记录了使用vue3.x+TS从0到1项目开发全过程。</p></blockquote><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ul><li>创建项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite-app </span><br></pre></td></tr></table></figure><ul><li>运行项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ts_vue // 进入项目目录</span><br><span class="line">yarn dev //启动项目</span><br></pre></td></tr></table></figure><ul><li>加入TS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescript</span><br></pre></td></tr></table></figure><ul><li>初始化项目引入TS以及基础配置</li></ul><blockquote><p>根目录创建vite.config.ts文件，相当于vue2.x里面的vue.config.js文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathResolve = <span class="function">(<span class="params">pathStr: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> path.resolve(__dirname, pathStr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  base: <span class="string">&quot;./&quot;</span>, <span class="comment">//在生产中服务时的基本公共路径。@default &#x27;/&#x27;</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">&quot;/@/&quot;</span>: pathResolve(<span class="string">&quot;./src&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  outDir: <span class="string">&quot;dist&quot;</span>, <span class="comment">//构建输出将放在其中。如果目录存在，它将在构建之前被删除。@default &#x27;dist&#x27;</span></span><br><span class="line">  minify: <span class="string">&quot;esbuild&quot;</span>, <span class="comment">//压缩</span></span><br><span class="line">  hostname: <span class="string">&quot;localhost&quot;</span>, <span class="comment">//ip地址</span></span><br><span class="line">  port: <span class="number">8888</span>, <span class="comment">//端口号</span></span><br><span class="line">  open: <span class="literal">false</span>, <span class="comment">//是否自动在浏览器打开</span></span><br><span class="line">  https: <span class="literal">false</span>, <span class="comment">//是否开启 https</span></span><br><span class="line">  ssr: <span class="literal">false</span>, <span class="comment">//是否服务端渲染</span></span><br><span class="line">  optimizeDeps: &#123;</span><br><span class="line">    <span class="comment">// 引入第三方的配置</span></span><br><span class="line">    <span class="comment">// include: [&quot;moment&quot;, &quot;echarts&quot;, &quot;axios&quot;, &quot;mockjs&quot;]</span></span><br><span class="line">    include: [<span class="string">&quot;axios&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">//配置代理</span></span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">      target: <span class="string">&quot;http://10.0.11.7:8090&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      ws: <span class="literal">true</span>,</span><br><span class="line">      rewrite: <span class="function">(<span class="params">path: string</span>) =&gt;</span> path.replace(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><blockquote><p>创建TS的配置文件 <strong>tsconfig.json</strong></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span> <span class="comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span>,</span><br><span class="line">      <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span> <span class="comment">/* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */</span>,</span><br><span class="line">      <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enable all strict type-checking options. */</span>,</span><br><span class="line">      <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span> <span class="comment">/* Base directory to resolve non-absolute module names. */</span>,</span><br><span class="line">      <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@/*&quot;</span>: [<span class="string">&quot;*&quot;</span>, <span class="string">&quot;src/*&quot;</span>]</span><br><span class="line">      &#125;<span class="comment">/* A series of entries which re-map imports to lookup locations relative to the &#x27;baseUrl&#x27;. */</span>,</span><br><span class="line">      <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span> <span class="comment">/* Raise error on expressions and declarations with an implied &#x27;any&#x27; type. */</span>,</span><br><span class="line">      <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies &#x27;allowSyntheticDefaultImports&#x27;. */</span>,</span><br><span class="line">      <span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span> <span class="comment">/* Enables experimental support for ES7 decorators. */</span>,</span><br><span class="line">      <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span> <span class="comment">/* Skip type checking of declaration files. */</span>,</span><br><span class="line">      <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span> <span class="comment">/* Disallow inconsistently-cased references to the same file. */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改main.js为main.ts</p><p>修改后你也许辉发现，有问题，啥问题呢？引入的.vue文件报错了！</p><p>这是因为ts不识别**.vue**文件。</p><p>解决办法</p><p>创建<strong>xxx.d.ts</strong>,本人创建的是<strong>shims-vue.d.ts</strong></p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;*.vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> componentOptions: ComponentOptions;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> componentOptions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加less-less-loader"><a href="#添加less-less-loader" class="headerlink" title="添加less less-loader"></a>添加<strong>less less-loader</strong></h2><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less less-loader -D</span><br></pre></td></tr></table></figure><ul><li>将css文件修改成less文件，引入的地方也改成<strong>xxx.less</strong>。然后运行页面，你会发现，ok了！页面正常显示了！偷个懒，这里就不上截图了！</li></ul><h2 id="引入Vant组件库"><a href="#引入Vant组件库" class="headerlink" title="引入Vant组件库"></a>引入Vant组件库</h2><ul><li>下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vant@next -S</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><blockquote><p>全局引入 <strong>main.ts</strong>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;/@/views/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;/@/styles/public.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vant/lib/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(Vant).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>页面中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;van-button type&#x3D;&quot;primary&quot;&gt;主要按钮&lt;&#x2F;van-button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="按需导入组件"><a href="#按需导入组件" class="headerlink" title="按需导入组件?"></a>按需导入组件?</h2><blockquote><p>按需导入？不存在的，哈哈！</p><p>看官网给的解释</p><p>在 Vite 中无须考虑按需引入的问题。Vite 在构建代码时，会自动通过 Tree Shaking 移除未使用的 ESM 模块。而 Vant 3.0 内部所有模块都是基于 ESM 编写的，天然具备按需引入的能力。</p><p>现阶段遗留的问题是，未使用的组件样式无法被 Tree Shaking 识别并移除，后续我们会考虑通过 Vite 插件的方式进行支持。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fixed特性</title>
      <link href="2020/12/18/css/fixed/"/>
      <url>2020/12/18/css/fixed/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本人写博客只是为了记录一些怕自己忘记的一些知识点。并且为了方便为弟弟学习。如果有幸被你看到我的文章，有写的不好的以及不对的地方还请留言指出！</p><p>本文记录的是本人在工作中遇到的关于fixed定位的特性和层叠上下文的一些知识</p></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>在使用索引栏的时候，需要把索引栏放到<strong>action-sheet</strong>弹层里面，并且是在pc端访问，显示区域为手机大小，剧中显示！但是弹层里的索引在滚动的时候跟着滚动跑出去了！但是索引使用的却是是<strong>fixed</strong>。本文使用的是<strong>vue+vantUI</strong></p><p>如图所示</p><ul><li>页面打开</li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/css/fixed/4.png"></p><ul><li>弹层滚动</li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/css/fixed/5.png"></p><p>可以看到右侧的索引兰跟着滚动上去了！</p></blockquote><h2 id="寻找问题答案"><a href="#寻找问题答案" class="headerlink" title="寻找问题答案"></a>寻找问题答案</h2><blockquote><p>根据自己的经验，知道肯定是因为定位以及层叠上下文的问题。带着疑问，开始了网上冲浪之旅。但遗憾的是，很难找到答案！自己解决不了，那怎么办呢！寻求帮助吧！就开始了愉快的群聊之旅。格说各的观点，甚至有大佬说让我重启一个页面，把索引兰放到新的页面。但是那种满足不了我的需求！我过大佬还是多的，大佬还是厉害的，直接问我祖先元素是不是使用了<strong>transform</strong>。然后告诉我<strong>fixed</strong>定位的原理。我就一直记得<strong>fixed</strong>是根据<strong>视口</strong>进行定位的！但是却忽略了细节！</p><p><img src="http://www.blog.image.qcwy.org.cn/article/css/fixed/1.png"></p><p>下面是官网<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">MDN</a>给出的解释</p><blockquote><p><strong>fixed</strong>的元素会被<strong>移出正常文档流</strong>，并<strong>不为元素预留空间</strong>，而是通过指定元素相对于<strong>屏幕视口（viewport）的位置</strong>来指定元素位置。<strong>元素的位置在屏幕滚动时不会改变</strong>。打印时，元素会出现在<strong>每页的固定位置</strong>。</p><p><strong>但是我忽略了下面这句话</strong></p><p><strong>fixed</strong>属性<strong>会创建新的层叠上下文</strong>。当元素祖先的 <strong>transform</strong>, <strong>perspective</strong> 或 <strong>filter</strong> 属性非 <strong>none</strong> 时，<strong>容器由视口改为该祖先</strong>。</p><ul><li>官网截图</li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/css/fixed/2.png"></p></blockquote><p>看到这句话了么————<strong>容器由视口改为该祖先</strong></p><p>这个问题的根本圆心就在这里！</p><ul><li>造成问题的代码</li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/css/fixed/3.png"></p><ul><li>解决问题后的效果</li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/css/fixed/6.png"></p><p>到此，问题完美解决！</p></blockquote><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><blockquote><p>自己的基础还有很多忽略的地方，不足的地方啊！以后对于基础，要加强！有时间再相信过一遍文档！</p></blockquote><p>宁愿苦一阵子，不愿苦一辈子！！！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> fixed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理解决跨域</title>
      <link href="2020/12/14/nginx/proxy/"/>
      <url>2020/12/14/nginx/proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>话说悲催的一天从跨域开始！不知道没有前端工程化的时候，业界是怎么处理跨域的！同源策略？jsonp？还是做代理呢？</p><p>可以说本人百分之95以上的时间都是在写工程化的项目！众所周知，工程化项目里可以配置代理解决跨域，我也写过两篇关于配置代理的文章！但是jq如何做代理，还真没有做过！</p><p>你可能会说，让后端写下请求头，允许跨域不就好了么！我只想说，我也想，但是沟通不来啊！</p><p>没办法！那就自己创造办法吧！</p></blockquote><h2 id="什么事跨域"><a href="#什么事跨域" class="headerlink" title="什么事跨域"></a>什么事跨域</h2><blockquote><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p></blockquote><h2 id="MacOS安装nginx"><a href="#MacOS安装nginx" class="headerlink" title="MacOS安装nginx"></a>MacOS安装nginx</h2><ul><li>查询要安装的软件是否存在</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search nginx</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/1.png"></p><ul><li>查看要安装的软件的详细信息以及安装在什么目录中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info nginx</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，nginx在本地还未安装（Not installed），nginx的来源（From），Docroot默认为/usr/local/var/www，在/usr/local/etc/nginx/nginx.conf配置文件中默认端口被配置为8080从而使nginx运行时不需要加sudo，nginx将在/usr/local/etc/nginx/servers/目录中加载所有文件，以及我们可以通过最简单的命令 ‘nginx’ 来启动nginx。</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/2.png"></p><ul><li>开始安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew install nginx</span><br></pre></td></tr></table></figure><blockquote><p>第一次安装忘记加sudo了！导致权限不足！</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/3.png"></p><ul><li>查看是否安装成功以及安装的目录</li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/4.png"></p><ul><li>查看nginx配置文件目录（是否如info所说）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/etc/nginx/</span><br></pre></td></tr></table></figure><blockquote><p>成功打开nginx目录，也可以看到如info所说servers目录以及nginx.conf的配置文件（后面会用到这个配置文件）。但我们并没有找到nginx被安装到了哪里（因为这个是配置目录嘛）。</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/5.png"></p><ul><li>查看nginx被安装到的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/Cellar/nginx</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/6.png"></p><ul><li>启动nginx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/7.png"></p><ul><li>验资nginx是否启动成功</li></ul><blockquote><p>浏览器访问localhost:8080</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/8.png"></p><ul><li>查看配置文件里的配置内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/9.png"></p><ul><li>查看网站跟目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /usr/<span class="built_in">local</span>/var/www/</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/nginx/nginx-proxy/10.png"></p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><blockquote><p>稍后更新</p></blockquote><h2 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  如果报无权限 则在命令前加上 sudo   然后输入密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">nginx <span class="comment">// 启动</span></span><br><span class="line">nginx -s quit    <span class="comment">// 平稳退出命令</span></span><br><span class="line">sudo nginx -s stop  <span class="comment">// 快速停止命令</span></span><br><span class="line">nginx -s reload  <span class="comment">// 重新加载</span></span><br><span class="line">nginx -s reopen <span class="comment">// 重新打开命令</span></span><br><span class="line">nginx -t         <span class="comment">//测试nginx.conf配置</span></span><br></pre></td></tr></table></figure><blockquote><p>nginx在mac上日志的路径<code>/usr/local/var/log/nginx/access.log</code></p></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组常用方法总结</title>
      <link href="2020/12/10/js/es6/array/"/>
      <url>2020/12/10/js/es6/array/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近被初入前端的的朋友问到，工作中经常用到的东西都有什么，刚好也为了今后要转行到前端来的亲弟弟能够更好的翻阅学习，写下此片文章。本文个人感觉并没有什么写的价值（只是个人感觉），所有的方法和简介均来自<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN官方文档</a>。只是多附加一些案例而已以及使用场景和个人使用心得</p><h2 id="本文包含的数组的方法"><a href="#本文包含的数组的方法" class="headerlink" title="本文包含的数组的方法"></a>本文包含的数组的方法</h2><ul><li>from()</li><li>isArray()</li><li>concat()</li><li>entries()</li><li>fill()</li><li>filter()</li><li>find()</li><li>forEach()</li><li>includes()</li><li>indexOf()</li><li>join()</li><li>keys()</li><li>values()</li><li>map()</li><li>pop()</li><li>push()</li><li>reduce()</li><li>shift()</li><li>unshift()</li><li>slice()</li><li>some()</li><li>sort()</li><li>splice()</li><li>toString()</li><li>length</li><li>flot()</li></ul><h2 id="具体的使用方法、使用场景、使用心得"><a href="#具体的使用方法、使用场景、使用心得" class="headerlink" title="具体的使用方法、使用场景、使用心得"></a>具体的使用方法、使用场景、使用心得</h2><h3 id="1、from"><a href="#1、from" class="headerlink" title="1、from()"></a>1、from()</h3><ul><li>定义 :</li></ul><blockquote><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。` 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p></blockquote><ul><li>语法：</li></ul><blockquote><p>如需观看，请参考官网文档<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">from() MDN文档</a></p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：一般就是把一些伪数组转换为真正的数组，比如获取dom节点的时候会使用到</p><p>心得：不算是经常用到，而是偶尔用到，当遇到的时候要知道使用这个数组方法</p></blockquote><hr><h3 id="2、isArray"><a href="#2、isArray" class="headerlink" title="2、isArray()"></a>2、isArray()</h3><ul><li>定义：</li></ul><blockquote><p><strong>Array.isArray()</strong> 用于确定传递的值是否是一个<strong>Array</strong></p></blockquote><ul><li>场景和心得：</li></ul><blockquote><p>场景：判断一个参数是否是数组，比如获取到的数据，或者函数的参数是不是数组</p><p>心得：还挺长用的，主要还是做安全判断if条件或者三元表达式，防止不是数组倒代码报错</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">官网</a></li></ul><hr><h3 id="3、concat"><a href="#3、concat" class="headerlink" title="3、concat()"></a>3、concat()</h3><ul><li>定义:</li></ul><blockquote><p><code>**concat()**</code> 方法用于合并两个或多个数组。此方法<strong>不会更改现有数组</strong>，而是<strong>返回一个新数组</strong>。</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：将两个数组合并成一个新的数组，不改变原来的数组，现在写代码很少使用了</p><p>心得：以前都是使用这种方法将两个数组进行合并，现在都是使用es6来解决（本人是这样使用的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = [...arr1,...arr2,...arr3] <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33,44]</span></span><br></pre></td></tr></table></figure></blockquote><hr><p>###4、entries()</p><ul><li>定义：</li></ul><blockquote><p><strong>entries()</strong> 方法返回一个新的<strong>Array Iterator</strong>对象，该对象包含数组中每个索引的键/值对</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>本人几乎没有使用过，就不提什么心得了个人感觉就是配合yeid关键字使用的，讲一个数组变为一个可迭代的对象，可以通过next()方法获取每次迭代的对象</p><p>放在这里是因为看看那个大佬看到了，并理解颇深，评论区给详细讲解下使用场景</p></blockquote><hr><h3 id="5、fill"><a href="#5、fill" class="headerlink" title="5、fill()"></a>5、fill()</h3><ul><li>定义：</li></ul><blockquote><p>**fill()**方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>没怎么使用过，很少有这方面的需求</p></blockquote><hr><h3 id="6、filter"><a href="#6、filter" class="headerlink" title="6、filter()"></a>6、filter()</h3><ul><li>定义：</li></ul><blockquote><p><strong>filter()</strong> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：在一个数组里筛选出符合条件的项，组合成一个心得数组返回</p><p>心得：<strong>必会的啊</strong>，不会行么?(不行，哈哈)。毕竟是太太太长用了！太太太好用了！</p></blockquote><ul><li>简单的案例</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">33</span>]</span><br><span class="line"><span class="keyword">const</span> arr1 = arr.filter(<span class="function"><span class="params">e</span>=&gt;</span>e&gt;<span class="number">5</span>) <span class="comment">// arr1=&gt; [6, 7, 8, 11, 22, 33, 33]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">const</span> objArr = [&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">4</span>&#125;]</span><br><span class="line"><span class="keyword">const</span> newObjArr = objArr.filter(el=el.id&gt;<span class="number">3</span>) <span class="comment">// newObjArr =&gt; [&#123;id:4&#125;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里只是列举了最简单的例子，毕竟简单才更容易看懂</p></blockquote><ul><li>语法：最好还是看官方文档，为太懒了!  [文档](<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a>)</li></ul><hr><h3 id="7、find"><a href="#7、find" class="headerlink" title="7、find()"></a>7、find()</h3><ul><li>定义：</li></ul><blockquote><p><strong>find()</strong> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <strong>undefined</strong></p></blockquote><ul><li>使用场景和心得</li></ul><blockquote><p>场景：和<strong>findIndex()**类似，一个是返回值，一个是返回索引，所以只列举这一个说了！我一般会使用</strong>some**（下面有将）</p><p>心得：了解就好</p></blockquote><hr><h3 id="8、forEach"><a href="#8、forEach" class="headerlink" title="8、forEach()"></a>8、forEach()</h3><ul><li>定义：</li></ul><blockquote><p><strong>forEach()</strong> 方法对数组的每个元素执行一次给定的函数。</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：for循环明白吧？没错，这就是那个for循环的加强版</p><p>心得：俗话说，终极大BOSS，不敢不会？</p></blockquote><ul><li>小小案例</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++</span>)</span>&#123;</span><br><span class="line">    count += arr[i]</span><br><span class="line">&#125; <span class="comment">// count =&gt; 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 循环</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">e</span>=&gt;</span>count += e) <span class="comment">// count =&gt; 55</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</span><br></pre></td></tr></table></figure></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">文档</a></li></ul><hr><h3 id="9、includes"><a href="#9、includes" class="headerlink" title="9、includes()"></a>9、includes()</h3><ul><li>定义：</li></ul><blockquote><p><strong>includes()</strong> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：必须得会啊！一般出现在三元表达式和条件判断中，根据数组中是否包含某个项进行不同的操作</p><p>心得：这个方法要是不会，那能中？哈哈</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">文档</a></li></ul><hr><h3 id="10、indexOf"><a href="#10、indexOf" class="headerlink" title="10、indexOf()"></a>10、indexOf()</h3><ul><li>定义：</li></ul><blockquote><p>**indexOf()**方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：一般不怎么使用，个人习惯使用**includes()**！嘿嘿</p><p>心得：得会吧！</p></blockquote><hr><h3 id="11、join"><a href="#11、join" class="headerlink" title="11、join()"></a>11、join()</h3><ul><li>定义：</li></ul><blockquote><p><strong>join()</strong> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN//docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：字符串去空，url 参数拼接等等太多了！</p><p>心得，不会是不行的呦。敢不会，头打烂（开玩笑的，别当真）</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">官网</a></li></ul><hr><h3 id="12、keys"><a href="#12、keys" class="headerlink" title="12、keys()"></a>12、keys()</h3><ul><li>定义：</li></ul><blockquote><p><strong>keys()</strong> 方法返回一个包含数组中每个索引键的<strong>Array Iterator</strong>对象</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：不是很清楚 哈哈。我太菜了！ 对象的这个方法倒是很常用</p><p>心得：无</p></blockquote><hr><h3 id="13、values"><a href="#13、values" class="headerlink" title="13、values()"></a>13、values()</h3><ul><li>和Keys()类似，一个是key 一个是values</li></ul><hr><h3 id="14、map"><a href="#14、map" class="headerlink" title="14、map()"></a>14、map()</h3><ul><li>定义：</li></ul><blockquote><p><strong>map()</strong> 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p></blockquote><ul><li>场景和心得</li></ul><blockquote><p>场景：说白了，就是映射。就是你数组一开始有多少项，返回的数组就有多少项，不会多，也不会少。</p><p>心得：很常用，不会不行系列</p></blockquote><hr><h3 id="15、pop"><a href="#15、pop" class="headerlink" title="15、pop()"></a>15、pop()</h3><ul><li>定义：<strong>pop()**方法从数组中删除最后一个元素，并</strong>返回该元素的值<strong>。此方法</strong>更改数组的长度**</li></ul><hr><h3 id="16、push"><a href="#16、push" class="headerlink" title="16、push()"></a>16、push()</h3><ul><li>定义：</li></ul><blockquote><p><strong>push()</strong> 方法将一个或多个元素添加到数组的末尾，并<strong>返回该数组的新长度</strong></p><p><strong>必会</strong></p></blockquote><ul><li>小小案例</li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">arr.push(...arr2) <span class="comment">// 返回值：新的arr的长度---8。 arr的值：[1, 2, 3, 4, 11, 22, 33, 44]</span></span><br></pre></td></tr></table></figure><p><strong>必会</strong></p></blockquote><hr><h3 id="17、reduce"><a href="#17、reduce" class="headerlink" title="17、reduce()"></a>17、reduce()</h3><ul><li>定义：</li></ul><blockquote><p><strong>reduce()</strong> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值</p></blockquote><ul><li>场景与心得</li></ul><blockquote><p>场景：很强大的一个方法，数组拍平等很多骚操作都能胜任</p><p>心得：不会也没关心，会了很多时候可以省时省力</p></blockquote><hr><h3 id="18、shift"><a href="#18、shift" class="headerlink" title="18、shift()"></a>18、shift()</h3><ul><li>定义：</li></ul><blockquote><p><strong>shift()</strong> 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度</p><p>** 必须会**</p></blockquote><hr><h3 id="19、unshift"><a href="#19、unshift" class="headerlink" title="19、unshift()"></a>19、unshift()</h3><ul><li>定义：</li></ul><blockquote><p><strong>unshift()</strong> 方法从数组中删除<strong>最后一个</strong>元素，并返回该元素的值。此方法更改数组的长度</p><p>** 必须会**</p></blockquote><hr><h3 id="20、slice"><a href="#20、slice" class="headerlink" title="20、slice()"></a>20、slice()</h3><ul><li>定义：</li></ul><blockquote><p><strong>slice()</strong> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变</p></blockquote><hr><h3 id="21、some"><a href="#21、some" class="headerlink" title="21、some()"></a>21、some()</h3><ul><li>定义：</li></ul><blockquote><p><strong>some()</strong> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值</p></blockquote><ul><li>场景与心得</li></ul><blockquote><p>场景：和**includes()**类似</p><p>心得：很好用呀！</p></blockquote><hr><h3 id="22、sort"><a href="#22、sort" class="headerlink" title="22、sort()"></a>22、sort()</h3><ul><li>定义：</li></ul><blockquote><p><strong>sort()</strong>`方法用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p><p>由于它取决于具体实现，因此无法保证排序的时间和空间复杂性</p><p><strong>本人很少使用</strong></p></blockquote><hr><h3 id="23、splice"><a href="#23、splice" class="headerlink" title="23、splice()"></a>23、splice()</h3><ul><li>定义：</li></ul><blockquote><p><strong>splice()</strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组</p></blockquote><ul><li>场景与心得</li></ul><blockquote><p>场景：对数组的<strong>增删改</strong>操作</p><p>心得：必须会，很强大</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">官网</a></li></ul><hr><h3 id="24、length-—是个属性，不要加括号哦"><a href="#24、length-—是个属性，不要加括号哦" class="headerlink" title="24、length —是个属性，不要加括号哦"></a>24、length —是个属性，不要加括号哦</h3><ul><li>定义：</li></ul><blockquote><p>返回数组的长度 ， 总比最高项下标大一！</p></blockquote><hr><h3 id="25、flot"><a href="#25、flot" class="headerlink" title="25、flot()"></a>25、flot()</h3><ul><li>定义：</li></ul><blockquote><p><strong>flat()</strong> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</p></blockquote><ul><li>场景与心得</li></ul><blockquote><p>场景：本人只在做数组拍平的时候使用过</p><p>心得：不得不说，很强大，还是回了吧！求你了！最后一个了！压轴的啊！</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">官网</a></li></ul><p>注意：案例在慢慢加</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter 使用 intl 配置国际化</title>
      <link href="2020/12/04/flutter/l10n/"/>
      <url>2020/12/04/flutter/l10n/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>不造你有没有发现—&gt;写程序，学语言，学框架，怎么又绕不过这个国际化，毕竟现在叫地球村嘛。不过flutter现在的国际话不叫<strong>i8n</strong>了，叫<strong>l10n</strong>，至于为什么，暂时也没有求关注这个问题。</p></blockquote><h2 id="学习配置"><a href="#学习配置" class="headerlink" title="学习配置"></a>学习配置</h2><p><a href="https://flutterchina.club/tutorials/internationalization/#dart-tools">中文官网</a></p><h3 id="先安装插件-Flutter-Intl"><a href="#先安装插件-Flutter-Intl" class="headerlink" title="先安装插件 Flutter Intl"></a>先安装插件 Flutter Intl</h3><ol><li><p>vscode安装</p><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/1.png"></p></li><li><p>Android studio安装</p><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/2.png"></p></li></ol><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="string">+</span> <span class="attr">flutter_localizations:</span></span><br><span class="line">  <span class="string">+</span> <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/3.png"></p><h3 id="生成国际化文件"><a href="#生成国际化文件" class="headerlink" title="生成国际化文件"></a>生成国际化文件</h3><ol><li><p>vscode生成国际化文件</p><ul><li><p>查看—&gt;命令面板—&gt; Flutter Intl: Initialize</p></li><li><p>之后会在lib目录下生成如下目录和文件（文件只有英文的）</p></li></ul><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/4.png"></p><ul><li><strong>-pubspec.yaml</strong>文件最下方会出现，这个是控制是否自动生成和动态修改国际化文件的</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter_intl:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>添加国际化文件——&gt; lib/l10n/intl_xxx.arb</li></ul></li><li><p>Android studio 生成国际化文件</p><ul><li><p>Tools-&gt;flutter Intl-&gt;Initialize for the project</p><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/5.png"></p></li><li><p>生成的文件和vscode是一样的</p></li><li><p>添加国际化文件——&gt;Tools-&gt;flutter Intl-&gt;Add Locale</p><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/6.png"></p><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/7.png"></p></li></ul></li></ol><h3 id="设置国际化语言"><a href="#设置国际化语言" class="headerlink" title="设置国际化语言"></a>设置国际化语言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:flutter_localizations&#x2F;flutter_localizations.dart&#39;;</span><br><span class="line">import &#39;generated&#x2F;l10n.dart&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      l</span><br><span class="line">      ocalizationsDelegates: const [</span><br><span class="line">        S.delegate,</span><br><span class="line">        GlobalMaterialLocalizations.delegate,</span><br><span class="line">        GlobalCupertinoLocalizations.delegate,</span><br><span class="line">        GlobalWidgetsLocalizations.delegate</span><br><span class="line">      ],</span><br><span class="line">      supportedLocales: S.delegate.supportedLocales,</span><br><span class="line">      localeListResolutionCallback: (locales, supportedLocales) &#123;</span><br><span class="line">        print(&#39;当前系统语言环境$locales&#39;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      home: MyStatefulWidget(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用国际化"><a href="#使用国际化" class="headerlink" title="使用国际化"></a>使用国际化</h3><blockquote><ul><li>在需要配置国际化的地方调用<code>S.of(context).key</code>即可.</li><li>没有<code>context</code> 时可以使用<code>S.current.key</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class _DrawerState extends State&lt;MyStatefulWidget&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(S.current.title),&#x2F;&#x2F;这里使用的是国际化</span><br><span class="line">      ),</span><br><span class="line">      drawer: _drawer,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/8.png"></p><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/l10n/9.png"></p><hr><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> 国际化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter 自定义Drawer的宽度</title>
      <link href="2020/12/04/flutter/drawer/"/>
      <url>2020/12/04/flutter/drawer/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在学习flutter的时候碰到了<strong>Drawer</strong>这个<strong>Widget</strong>，但是在使用的过程中有这么一个需求，我想修改他的宽度，网上搜了一圈没找到对应的api。自己也是经过一番折腾才解决的，可能是因为我还是flutter小白把！不管怎样，记录一下，下次遇到问题，好解决。</p></blockquote><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>这里上个图就好了，代码就先不上了，毕竟下面会有最终代码。</p><h3 id="初始效果"><a href="#初始效果" class="headerlink" title="初始效果"></a>初始效果</h3><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/drawer/1.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/drawer/2.png"></p><blockquote><p>可以看到的是_kWidth字段是私有的，是没有办法被外部访问或修改的，然而，宽度的大小控制就是跟这个字段息息相关的，如下图</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/drawer/3.png"></p><blockquote><p>_width这个才是真正的宽度（真正的宽度的大小是根据这个变量计算出来的），但是可以发现这个也是私有的，不能被外部访问和篡改。那么，该怎样处理呢？不要怕，重写这个类不就可以了么！重写这个类，把需要的加进去就可以实现了。</p></blockquote><h3 id="重写CustomDrawer类"><a href="#重写CustomDrawer类" class="headerlink" title="重写CustomDrawer类"></a>重写CustomDrawer类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 为了简单，里面一切处理没写，可以参照官方的，或者把官方的拷贝过来，在官方的基础上进行修改，都是可以的</span><br><span class="line">class CustomDrawer extends StatelessWidget &#123;</span><br><span class="line">  final double elevation;</span><br><span class="line">  final Widget child;</span><br><span class="line">  final String semanticLabel;</span><br><span class="line">  final double widthPercent;</span><br><span class="line">  const CustomDrawer(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    this.elevation &#x3D; 16.0,</span><br><span class="line">    this.child,</span><br><span class="line">    this.semanticLabel,</span><br><span class="line">    this.widthPercent &#x3D; 0.7,</span><br><span class="line">  &#125;)  : assert(</span><br><span class="line">            widthPercent !&#x3D; null &amp;&amp; widthPercent &lt; 1.0 &amp;&amp; widthPercent &gt; 0.0),</span><br><span class="line">        super(key: key);</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    assert(debugCheckHasMaterialLocalizations(context));</span><br><span class="line">    String label &#x3D; semanticLabel;</span><br><span class="line">    final double _width &#x3D; MediaQuery.of(context).size.width * widthPercent;</span><br><span class="line">    return Semantics(</span><br><span class="line">      scopesRoute: true,</span><br><span class="line">      namesRoute: true,</span><br><span class="line">      explicitChildNodes: true,</span><br><span class="line">      label: label,</span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints.expand(width: _width),</span><br><span class="line">        child: Material(</span><br><span class="line">          elevation: elevation,</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用重写都的CustomDrawer类"><a href="#使用重写都的CustomDrawer类" class="headerlink" title="使用重写都的CustomDrawer类"></a>使用重写都的CustomDrawer类</h3><blockquote><p>既然重构好了，就还等什么，赶紧使用吧！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class MyStatefulWidget extends StatefulWidget &#123;</span><br><span class="line">  MyStatefulWidget(&#123;Key key&#125;) : super(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _DrawerState createState() &#x3D;&gt; _DrawerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _DrawerState extends State&lt;MyStatefulWidget&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(S.current.title),</span><br><span class="line">      ),</span><br><span class="line">      drawer: _drawer,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get _drawer &#123;</span><br><span class="line">    var listView &#x3D; ListView(</span><br><span class="line">      &#x2F;&#x2F;1</span><br><span class="line">      padding: EdgeInsets.zero,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        UserAccountsDrawerHeader(</span><br><span class="line">          accountName: Text(&#39;Yunjiege&#39;),</span><br><span class="line">          accountEmail: Text(&#39;1329712473@qq.com&#39;),</span><br><span class="line">          currentAccountPicture: CircleAvatar(</span><br><span class="line">            child: Text(&#39;X&#39;),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Icon(Icons.local_post_office),</span><br><span class="line">          title: Text(&#39;邮件&#39;),</span><br><span class="line">        ),</span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Icon(Icons.settings),</span><br><span class="line">          title: Text(&#39;设置&#39;),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">    return new CustomDrawer(</span><br><span class="line">      widthPercent: 0.7,&#x2F;&#x2F;这里控制抽屉的弯度，不能小于0，不能大于1</span><br><span class="line">      child: listView,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图和完整代码"><a href="#效果图和完整代码" class="headerlink" title="效果图和完整代码"></a>效果图和完整代码</h3><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/drawer/5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">void main() &#x3D;&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  static const String _title &#x3D; &#39;Flutter Code Sample&#39;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: MyStatefulWidget(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyStatefulWidget extends StatefulWidget &#123;</span><br><span class="line">  MyStatefulWidget(&#123;Key key&#125;) : super(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _DrawerState createState() &#x3D;&gt; _DrawerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _DrawerState extends State&lt;MyStatefulWidget&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&#39;开车cn&#39;),</span><br><span class="line">      ),</span><br><span class="line">      drawer: _drawer,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get _drawer &#123;</span><br><span class="line">    var listView &#x3D; ListView(</span><br><span class="line">      &#x2F;&#x2F;1</span><br><span class="line">      padding: EdgeInsets.zero,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        UserAccountsDrawerHeader(</span><br><span class="line">          accountName: Text(&#39;Yunjiege&#39;),</span><br><span class="line">          accountEmail: Text(&#39;1329712473@qq.com&#39;),</span><br><span class="line">          currentAccountPicture: CircleAvatar(</span><br><span class="line">            child: Text(&#39;X&#39;),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Icon(Icons.local_post_office),</span><br><span class="line">          title: Text(&#39;邮件&#39;),</span><br><span class="line">        ),</span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Icon(Icons.settings),</span><br><span class="line">          title: Text(&#39;设置&#39;),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">    return new CustomDrawer(</span><br><span class="line">      widthPercent: 0.5,</span><br><span class="line">      child: listView,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CustomDrawer extends StatelessWidget &#123;</span><br><span class="line">  final double elevation;</span><br><span class="line">  final Widget child;</span><br><span class="line">  final String semanticLabel;</span><br><span class="line">  final double widthPercent;</span><br><span class="line">  const CustomDrawer(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    this.elevation &#x3D; 16.0,</span><br><span class="line">    this.child,</span><br><span class="line">    this.semanticLabel,</span><br><span class="line">    this.widthPercent &#x3D; 0.7,</span><br><span class="line">  &#125;)  : assert(</span><br><span class="line">            widthPercent !&#x3D; null &amp;&amp; widthPercent &lt; 1.0 &amp;&amp; widthPercent &gt; 0.0),</span><br><span class="line">        super(key: key);</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    assert(debugCheckHasMaterialLocalizations(context));</span><br><span class="line">    String label &#x3D; semanticLabel;</span><br><span class="line">    final double _width &#x3D; MediaQuery.of(context).size.width * widthPercent;</span><br><span class="line">    return Semantics(</span><br><span class="line">      scopesRoute: true,</span><br><span class="line">      namesRoute: true,</span><br><span class="line">      explicitChildNodes: true,</span><br><span class="line">      label: label,</span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints.expand(width: _width),</span><br><span class="line">        child: Material(</span><br><span class="line">          elevation: elevation,</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>其实并不复杂，只要知道自己的需求就好，然后根据自己的需求寻找问题，找到问题的根本。然后以最好的方式去解决（本人这个方法不造是不是好的）。其实吧，发现<strong>Drawer</strong>组件和原生android里的<strong>DrawerLayout</strong>是差不多的（大学学过android）。</p></blockquote><hr><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> Drawer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter 打包apk</title>
      <link href="2020/12/02/flutter/apk/"/>
      <url>2020/12/02/flutter/apk/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最近公司开会说要搞一套 app 出来，所以嘛！没办法，干呗！学习 flutter。本篇文章记录 flutter 打包成 apk 的方法和步骤。虽说没什么东西，但是记录一下也是好的，毕竟好记性不如烂笔头嘛！话不多说，赶紧肝起来。</p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="使用官网给的命令生成-key-jks-文件"><a href="#使用官网给的命令生成-key-jks-文件" class="headerlink" title="使用官网给的命令生成 key.jks 文件"></a>使用官网给的命令生成 key.jks 文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize <span class="number">2048</span> -validity <span class="number">10000</span> -alias key</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ul><li>保持文件私密; 不要将它加入到公共源代码控制中。</li><li>此操作生成的签名是*.jks 格式</li></ul></blockquote><h3 id="创建一个-key-properties-文件"><a href="#创建一个-key-properties-文件" class="headerlink" title="创建一个 key.properties 文件"></a>创建一个 key.properties 文件</h3><p>创建一个名为/android/key.properties 的文件，其中包含对密钥库的引用</p><blockquote><p>storePassword=&lt;创建 keystore 时的 storePassword&gt;,如：123456<br>keyPassword=123456&lt;创建 keystore 时的 keyPassword&gt;,如：123456<br>keyAlias=key<br>storeFile=../key.jks 例如:key/key.jks</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 演示：</span></span><br><span class="line">storePassword = <span class="number">123456</span>;</span><br><span class="line">keyPassword = <span class="number">123456</span>;</span><br><span class="line">keyAlias = key;</span><br><span class="line">storeFile = key / key.jks;</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/apk/1.png"></p><h3 id="在-gradle-中配置签名"><a href="#在-gradle-中配置签名" class="headerlink" title="在 gradle 中配置签名"></a>在 gradle 中配置签名</h3><p>编辑/android/app/build.gradle 文件为您的应用配置签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将下面的代码</span></span><br><span class="line">android &#123;</span><br><span class="line"><span class="comment">// 替换为</span></span><br><span class="line">def keystorePropertiesFile = rootProject.file(<span class="string">&quot;key.properties&quot;</span>)</span><br><span class="line">def keystoreProperties = <span class="keyword">new</span> Properties()</span><br><span class="line">keystoreProperties.load(<span class="keyword">new</span> FileInputStream(keystorePropertiesFile))</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/apk/2.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将下面的代码</span></span><br><span class="line">buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Add your own signing config for the release build.</span></span><br><span class="line">        <span class="comment">// Signing with the debug keys for now, so `flutter run --release` works.</span></span><br><span class="line">        signingConfig signingConfigs.debug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替换为</span></span><br><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        keyAlias keystoreProperties[<span class="string">&#x27;keyAlias&#x27;</span>]</span><br><span class="line">        keyPassword keystoreProperties[<span class="string">&#x27;keyPassword&#x27;</span>]</span><br><span class="line">        storeFile file(keystoreProperties[<span class="string">&#x27;storeFile&#x27;</span>])</span><br><span class="line">        storePassword keystoreProperties[<span class="string">&#x27;storePassword&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        signingConfig signingConfigs.release</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/apk/3.png"></p><h3 id="生成-apk"><a href="#生成-apk" class="headerlink" title="生成 apk"></a>生成 apk</h3><blockquote><p>运行  <strong>flutter build apk</strong>命令，执行完成后就会生成apk包<br>生成apk包的目录 =&gt;  /build/app/outputs/apk/app-release.apk</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/article/flutter/apk/4.png"></p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 设置背景图片</title>
      <link href="2020/11/30/vscode/bg/"/>
      <url>2020/11/30/vscode/bg/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>本来是没想着写这篇博客的，但是有一个要好的朋友问到了！因为在异地，我这个人又懒，又刚好有时间，就想着写这么一个教程给他！也防止以后再有人问到这个（万一有以后有朋友问呢）！</p><p>由于本人是mac电脑，只能使用mac电脑进行演示！windows电脑与之类似，下面简单说一下如何配置，没有图片</p><ul><li>下面的方式的第三步，找到文件</li><li>修改文件，第五步</li><li>重启vscode查看效果，第六步</li></ul></blockquote><h2 id="修改方式"><a href="#修改方式" class="headerlink" title="修改方式"></a>修改方式</h2><blockquote><p>本人知道的修改方式分为两种</p></blockquote><ol><li><p>方式一</p><blockquote><p>使用插件background,在vscode中下载这个插件，然后按照说明配置就行了！但是个人不推荐使用这个，至于原因，百度一下，你就知道！</p></blockquote></li><li><p>方式二</p><blockquote><p>修改vscode的文件（操作需谨慎）。比较推荐的方式！下面就以这种方式进行讲解说明！</p></blockquote></li></ol><h2 id="设置过程"><a href="#设置过程" class="headerlink" title="设置过程"></a>设置过程</h2><ol><li><p>找到vscode</p><p>找到vscode，右键&gt; 选项&gt; 在访达中显示</p><p><img src="http://www.blog.image.qcwy.org.cn/article/vscode/bg/1.png"></p></li><li><p>点击vscode，显示包内容</p></li></ol><p><img src="http://www.blog.image.qcwy.org.cn/article/vscode/bg/2.png"></p><ol start="3"><li><p>点击Contents&gt;Resources&gt;app&gt;out&gt;vs&gt;workbench后显示的就是下面图片的内容，第一次打开里面是没有图片的</p><p>注意：这里面的文件是只读的，需要复制后修改然后替换文件！还有就是vscode更新后，会删除里面添加的内容</p></li></ol><p><img src="http://www.blog.image.qcwy.org.cn/article/vscode/bg/3.png"></p><ol start="4"><li>右键<strong>workbench.desktop.main.css</strong>文件，使用任意方式打开文件</li></ol><p><img src="http://www.blog.image.qcwy.org.cn/article/vscode/bg/4.png"></p><ol start="5"><li><p>打开文件后，添加下面代码，可以按需要修改！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;./4.jpg&quot;</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://www.blog.image.qcwy.org.cn/article/vscode/bg/5.png"></p><ol start="6"><li>最终效果如下图</li></ol><p><img src="http://www.blog.image.qcwy.org.cn/article/vscode/bg/6.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除图片文字水印</title>
      <link href="2020/11/26/ui/ps/delete-text/"/>
      <url>2020/11/26/ui/ps/delete-text/</url>
      
        <content type="html"><![CDATA[<h2 id="在网络上下载的图片具有水印"><a href="#在网络上下载的图片具有水印" class="headerlink" title="在网络上下载的图片具有水印"></a>在网络上下载的图片具有水印</h2><blockquote><p>有时候在网络上下载的图片具有水印，会影响到整体的美观，就想把图片的文字水印去掉。本文记录的是自己使用 ps 去除水印的方法！由于刚开始也是不会，经过网络上查找学习才会，所以记录一下，防止遗忘。</p></blockquote><blockquote><p>为了不浪费不必要的时间，这里有些图片说明就省略了，毕竟不是什么难的东西，按照流程做就可以了。没有什么思想和原理什么乱七八糟的东西！</p></blockquote><h2 id="去除过程"><a href="#去除过程" class="headerlink" title="去除过程"></a>去除过程</h2><ol><li>在<strong>菜单栏</strong>执行<strong>文件-&gt;打开</strong>命令，导入图片素材，按下<strong>Command+J</strong> 复制新建图层(<strong>对原文件进行保护</strong>)</li><li>在<strong>工具栏</strong>选中<strong>矩形选框工具</strong>，使用矩形选框工具将<strong>文字水印部分</strong>框选</li><li>在<strong>菜单栏</strong>执行 <strong>选择-&gt;色彩范围</strong>命令</li><li>出现色彩范围窗口，选择<strong>第一个吸管工具</strong>，吸取<strong>文字上的颜色</strong>，调节<strong>颜色容差</strong>，在下方预览的位置看到<strong>文字完整</strong>，且<strong>背景比较黑</strong>的情况下，如果效果不好，可以<strong>选择第二个吸管工具</strong>，将没有吸到的位置吸取，完成后，点击 确定，这样就转中文字水印了</li><li>为了<strong>确保文字水印完全选中</strong>还需要扩展一下选取范围，在<strong>菜单栏</strong>执行 <strong>选择-&gt;修改-&gt;扩展</strong>命令，弹出扩展选区窗口，<strong>扩展值根据实际情况来调整</strong>，点击 确定</li><li>在<strong>菜单栏</strong>执行<strong>编辑-&gt;内容识别填充</strong> 命令，在内容识别填充状态下，<strong>涂抹不被识别的位置</strong>，点击 确定，内容识别填充具有<strong>随机性</strong>，如果效果不好，可以多次尝试</li><li><strong>Command+D</strong> 取消选区。 恭喜你，文字水印去除成功</li></ol><hr><p>日常随笔</p>]]></content>
      
      
      <categories>
          
          <category> ui </category>
          
          <category> ps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改URL但不跳转页面</title>
      <link href="2020/11/23/js/change-url/"/>
      <url>2020/11/23/js/change-url/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote><p>今天提出了一个需求，就是在使用第三方支付的时候，如果用户在支付页面直接点击浏览器的返回页面，会直接返回到下单的页面，但此时订单已经下过了，再次返回到下订单的页面，展示之前的内容显然是不合理的，现在的需求就是，用户在第三方支付的时候，点击浏览器的返回按钮时，返回到当前下的订单的订单详情页面。</p></blockquote><h2 id="寻找解决方法"><a href="#寻找解决方法" class="headerlink" title="寻找解决方法"></a>寻找解决方法</h2><blockquote><p>你可能会说，单击返回的时候跳转到订单详情页面不就行了么！那么不好意思，你怎么知道或者说这么做是没办法跳转过去的，因为从支付页面返回没有传回来任何的参数，程序根本就什么都不知道，由于是公司的项目，这里就不贴图了（程序员操守）。</p></blockquote><blockquote><p>经过思考，研究，想到如果在页面跳转到支付页面之前，先往页面的历史记录里添加一条订单详情的历史记录是不是可以解决问题。</p></blockquote><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>经过插文档和mdn发现，如果想要往历史记录里加入一条记录，但是页面不发生变化。需要使用history.replaceState(null,””,``);</p><p>最终解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">history.replaceState(</span><br><span class="line">   <span class="literal">null</span>,</span><br><span class="line">   <span class="string">&quot;&quot;</span>,</span><br><span class="line">   <span class="string">`http://192.168.1.11:8080/tw/xxx/orderdetail/<span class="subst">$&#123;xxx&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line"> <span class="built_in">window</span>.location = xxx.goUrl;</span><br></pre></td></tr></table></figure><p>效果图暂不展示，如果需要，可直接demo嘛！</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> url </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter 基础学习第一天</title>
      <link href="2020/11/15/flutter/basis_one/"/>
      <url>2020/11/15/flutter/basis_one/</url>
      
        <content type="html"><![CDATA[<h2 id="flutter基础之Text"><a href="#flutter基础之Text" class="headerlink" title="flutter基础之Text"></a>flutter基础之Text</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">void</span> main()=&gt;runApp(MyApp());</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">   Widget build(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> MaterialApp(</span><br><span class="line">       title: <span class="string">&quot;flutter入门学习&quot;</span>,</span><br><span class="line">       home: Scaffold(</span><br><span class="line">         body: Center(</span><br><span class="line">           child: Text(</span><br><span class="line">             <span class="string">&quot;今天开始学习flutter的text组件，我相信总有一天我会成为flutter真正的开发者，加油！打工人&quot;</span>,</span><br><span class="line">             textAlign: TextAlign.center,</span><br><span class="line">             maxLines: <span class="number">1</span>,</span><br><span class="line">             overflow: TextOverflow.ellipsis,</span><br><span class="line">             style: TextStyle(</span><br><span class="line">              fontSize: <span class="number">26.0</span>,</span><br><span class="line">              color: Color.fromARGB(<span class="number">255</span>, <span class="number">255</span>,<span class="number">33</span>,<span class="number">33</span>),               </span><br><span class="line">              decoration: TextDecoration.lineThrough,</span><br><span class="line">              decorationStyle: TextDecorationStyle.dotted,</span><br><span class="line">             ),</span><br><span class="line">           ),</span><br><span class="line">         ),</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet 语法 速查表</title>
      <link href="2020/11/02/html/emmet/"/>
      <url>2020/11/02/html/emmet/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p> Emmet是一款文本编辑器/IDE的插件，用来快速生成复杂的HTML代码，只要掌握一些常用的语法（类似于CSS选择器），可以减少重复编码的工作。再配合上乱数假文（lorem）能够帮助我们快速开发网页。</p><h2 id="2、语法使用"><a href="#2、语法使用" class="headerlink" title="2、语法使用"></a>2、语法使用</h2><h3 id="2-1、-调用方法"><a href="#2-1、-调用方法" class="headerlink" title="2.1、 调用方法"></a>2.1、 调用方法</h3><blockquote><p>Emmet使用Tab作为自动生成HTML代码的触发器。当然也可以按回车键来触发（本人喜欢使用VsCode）</p></blockquote><h3 id="2-2、后代标签生成"><a href="#2-2、后代标签生成" class="headerlink" title="2.2、后代标签生成"></a>2.2、后代标签生成</h3><blockquote><p>Child: &gt;</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ul&gt;li --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3、兄弟标签生成"><a href="#2-3、兄弟标签生成" class="headerlink" title="2.3、兄弟标签生成"></a>2.3、兄弟标签生成</h3><blockquote><p>Sibling:+</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- span+span+span --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4、上级元素标签生成"><a href="#2-4、上级元素标签生成" class="headerlink" title="2.4、上级元素标签生成"></a>2.4、上级元素标签生成</h3><blockquote><p>Climb-up: ^</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p&gt;span+em^span --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5、-分组"><a href="#2-5、-分组" class="headerlink" title="2.5、 分组"></a>2.5、 分组</h3><blockquote><p>Grouping:()</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- div&gt;(p+span)+div&gt;a --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- (div&gt;dl&gt;(dt+dd))+div&gt;p --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6、重复多份标签"><a href="#2-6、重复多份标签" class="headerlink" title="2.6、重复多份标签"></a>2.6、重复多份标签</h3><blockquote><p>Multiplication: *</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- span*5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-7、给重复标签编号"><a href="#2-7、给重复标签编号" class="headerlink" title="2.7、给重复标签编号"></a>2.7、给重复标签编号</h3><blockquote><p>Item numbering: $</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- ul&gt;li.item$*6 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- h$[title=item$]&#123;Header $&#125;*6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">title</span>=<span class="string">&quot;item3&quot;</span>&gt;</span>Header 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">title</span>=<span class="string">&quot;item4&quot;</span>&gt;</span>Header 4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">title</span>=<span class="string">&quot;item5&quot;</span>&gt;</span>Header 5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span> <span class="attr">title</span>=<span class="string">&quot;item6&quot;</span>&gt;</span>Header 6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- ul&gt;li.item$$$*6 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item003&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item005&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item006&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- ul&gt;li.item$@3*5 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-8、为标签设置ID名"><a href="#2-8、为标签设置ID名" class="headerlink" title="2.8、为标签设置ID名"></a>2.8、为标签设置ID名</h3><blockquote><p>id:#</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #header --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-9、为标签添加类名"><a href="#2-9、为标签添加类名" class="headerlink" title="2.9、为标签添加类名"></a>2.9、为标签添加类名</h3><blockquote><p>class:  .</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- .size.center.container --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;size center container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-10、为标签添加自定义属性"><a href="#2-10、为标签添加自定义属性" class="headerlink" title="2.10、为标签添加自定义属性"></a>2.10、为标签添加自定义属性</h3><blockquote><p>Custom attributes:[]</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- div[attr=&#x27;nihao&#x27;] --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">attr</span>=<span class="string">&quot;nihao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-11、为标签添加文本"><a href="#2-11、为标签添加文本" class="headerlink" title="2.11、为标签添加文本"></a>2.11、为标签添加文本</h3><blockquote><p>text:{}</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- span&#123;为是一个小猫咪&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>为是一个小猫咪<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、乱数假文（lorem）"><a href="#3、乱数假文（lorem）" class="headerlink" title="3、乱数假文（lorem）"></a>3、乱数假文（lorem）</h2><h3 id="3-1-、段落-lorem-回撤-tab"><a href="#3-1-、段落-lorem-回撤-tab" class="headerlink" title="3.1 、段落 lorem+回撤/tab"></a>3.1 、段落 lorem+回撤/tab</h3><blockquote><pre><code>Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellat earum id numquam sequi rem fugit incidunt dolorum, atque facilis, ab reiciendis dolor aspernatur? Ea amet commodi explicabo placeat dolorem maxime.</code></pre></blockquote><h3 id="3-2、句子-单词-lorem6"><a href="#3-2、句子-单词-lorem6" class="headerlink" title="3.2、句子/单词 lorem6"></a>3.2、句子/单词 lorem6</h3><blockquote><p>Lorem ipsum dolor sit amet consectetur.</p></blockquote><h3 id="3-3-、生产多个段落活句子-lorem3-或者-lorem7-3-gt-lorem12-3"><a href="#3-3-、生产多个段落活句子-lorem3-或者-lorem7-3-gt-lorem12-3" class="headerlink" title="3.3 、生产多个段落活句子 lorem3   或者  lorem7\3  =&gt; lorem12*3"></a>3.3 、生产多个段落活句子 lorem<em>3   或者  lorem7\</em>3  =&gt; lorem12*3</h3><blockquote><p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum odio dignissimos tempore.<br> Nobis sint illo ipsam beatae laudantium fugit, quisquam veritatis! Sapiente, cupiditate recusandae?<br> Alias unde libero repellat eveniet veniam nihil dicta magni vero, cupiditate minima?</p></blockquote><h2 id="4-、总结"><a href="#4-、总结" class="headerlink" title="4 、总结"></a>4 、总结</h2><blockquote><p>本文并不是全部语法，这些只是本人在开发的过程中经常会用到的一些语法，能够帮助为开发开发网页，事半功倍。</p></blockquote><p>原创文章：转载请联系我。未经允许，禁止转载。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！</p>]]></content>
      
      
      <categories>
          
          <category> Emmet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写一个自己的npm包</title>
      <link href="2020/09/27/npm/package/"/>
      <url>2020/09/27/npm/package/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote><p>整天就是乱搞，这不，今天莫名的想写下从无到有的发布一个自己的npm包。下面就是具体的步骤。</p></blockquote><h2 id="2、具体实现"><a href="#2、具体实现" class="headerlink" title="2、具体实现"></a>2、具体实现</h2><h3 id="2-1、创建自己的npm账户"><a href="#2-1、创建自己的npm账户" class="headerlink" title="2.1、创建自己的npm账户"></a>2.1、创建自己的npm账户</h3><blockquote><p>想要发布npm包，拥有npm账号是必要的。可以直接到npm官网去注册，也可以点击<a href="https://www.npmjs.com/signup">注册npm</a>去注册账户</p></blockquote><h3 id="2-2、创建包"><a href="#2-2、创建包" class="headerlink" title="2.2、创建包"></a>2.2、创建包</h3><blockquote><p>在自己的目录下执行 npm init   根据提示填写信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;cq-demo&#x27;</span>, <span class="comment">// 包名</span></span><br><span class="line">    main: <span class="string">&#x27;lib/index.js&#x27;</span>,  <span class="comment">// 包加载时的入口文件</span></span><br><span class="line">    version: <span class="number">0.0</span><span class="number">.1</span>, <span class="comment">// 版本</span></span><br><span class="line">    description: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 描述</span></span><br><span class="line">    author: <span class="string">&#x27;pythongyj&#x27;</span>, <span class="comment">// 作者</span></span><br><span class="line">    contributors: <span class="string">&#x27;...&#x27;</span>, <span class="comment">// 其他贡献者</span></span><br><span class="line">    dependencies: &#123;&#125;, <span class="comment">// 生产依赖</span></span><br><span class="line">    devDependencies: &#123;&#125;, <span class="comment">// 开发依赖</span></span><br><span class="line">    repository：<span class="string">&#x27;&#x27;</span>,  <span class="comment">// 源码地址</span></span><br><span class="line">    keywords: [<span class="string">&#x27;cq&#x27;</span>, <span class="string">&#x27;pythongyj&#x27;</span>], <span class="comment">// 包搜索关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>name 包名，为了避免包名已被使用，可以提前在npm中搜索相关的名称字段， 看是否已被使用</li><li>main 包引入地址, 当一个包被引入到项目中，被使用时，将通这个地址查找对应的入口文件.</li><li>version 版本号， 每次提交包到npm时，需要保证当前包版本与已发布的包版本不同，但没有要求版本的具体格式。例如： 现在线上的包版本为 v1.1.1， 我本地包的版本设置为 v1.0.0, 不会影响我的发布。<blockquote><p>创建src目录，把项目里的代码都放在src目录下Ï</p></blockquote></li></ol><h3 id="2-3、登录npm"><a href="#2-3、登录npm" class="headerlink" title="2.3、登录npm"></a>2.3、登录npm</h3><blockquote><p>项目登录npm , 使用   npm login  ｜  npm adduser  命令，根据提示，输入用户名，密码，邮箱<br> 注意：这里有个坑，就是如果你的邮箱没有验证，下一步发布的过程是不会成功的，会提示403</p></blockquote><h3 id="2-4、发布包到npm"><a href="#2-4、发布包到npm" class="headerlink" title="2.4、发布包到npm"></a>2.4、发布包到npm</h3><blockquote><p>使用npm publish命令发布包到npm</p></blockquote><h3 id="2-5、撤销发布"><a href="#2-5、撤销发布" class="headerlink" title="2.5、撤销发布"></a>2.5、撤销发布</h3><blockquote><p>使用npm unpublish 命令撤销发布</p></blockquote><hr><p>注意：如果修改了代码, 进行重新发布,一定要修改 package.json 中的 version 选项更新版本</p><p>原创文章：转载请联系我。未经允许，禁止转载。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步console.log();和异步console.log();</title>
      <link href="2020/09/21/js/log/"/>
      <url>2020/09/21/js/log/</url>
      
        <content type="html"><![CDATA[<h2 id="今天遇到了一个奇怪的问题"><a href="#今天遇到了一个奇怪的问题" class="headerlink" title="今天遇到了一个奇怪的问题"></a>今天遇到了一个奇怪的问题</h2><p><img src="http://www.blog.image.qcwy.org.cn/article/js/log/1.webp" alt="image.png"><br>可以看到图中，log同时打印这个对象和这个对象的一个属性，打印出的值却不相同！这是怎么哥回事呢？</p><h2 id="排查问题原因"><a href="#排查问题原因" class="headerlink" title="排查问题原因"></a>排查问题原因</h2><p>我当时就特别奇怪，这是为什么呢？这不都是同步的么？没有什么异步啊，怎么值就不一样呢？<br>接下来，你知道的，就开始排查原因，代码看了n遍，也没看出个所以然来！接下来就是各种查资料。也没有找到什么原因（毕竟查的资料和根本原因不同）。什么结果都没有查出来，很显然，也没有找到解决问题的办法。有点怀疑人生了。</p><h2 id="找到原因"><a href="#找到原因" class="headerlink" title="找到原因"></a>找到原因</h2><p>终于，找到问题原因。<br>最终还是一点一点的断点调试。结果发现，log居然不是同步的。当时的我无比的惊奇。<br>开始百度，log是同步的还是异步的。<br>结果发现，WebKit内核下，是异步的。在node.js中是绝对同步的。了解到这，不得不感叹，js真的是奇怪又强大啊！自己的js内功还是差了很多啊！以后多多补补，多多看书吧！</p><h2 id="完美形容问题"><a href="#完美形容问题" class="headerlink" title="完美形容问题"></a>完美形容问题</h2><p><img src="http://www.blog.image.qcwy.org.cn/article/js/log/2.webp" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>《JavaScript异步编程》书中是这么解释的：</p><p>WebKit的console.log并没有立即拍摄对象快照，相反，它只存储了一个指向对象的引用，然后在代码返回事件队列时才去拍摄快照。而chrome的内核正是webkit</p><p>Node的console.log是另一回事，它是严格同步的，因此同样的代码输出却是正确的</p><p>书中指出，JavaScript 环境提供的异步函数一般分为两大类：I/O函数和计时函数。console.log就是一个I/O函数。对于引用类型，console.log会先储存一个引用，因此在打印引用类型时结果不一定准确。</p><p>所以 console.log 到底是同步还是异步取决于运行环境。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sass从零到一不完全解读</title>
      <link href="2020/09/12/css/sass-script/"/>
      <url>2020/09/12/css/sass-script/</url>
      
        <content type="html"><![CDATA[<h1 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 CSS 属性的基础上 Sass 提供了一些名为 SassScript 的新功能。 SassScript 可作用于任何属性，允许属性使用变量、算数运算等额外功能。</span><br><span class="line"></span><br><span class="line">弱类型语言, 对语法要求没那么严格</span><br></pre></td></tr></table></figure><h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><ol><li><p>Sass 支持标准的 CSS 多行注释 <code>/* */</code>，以及单行注释 <code>//</code>，前者会被完整输出到编译后的 CSS 文件中，而后者则不会。</p></li><li><p>将 <code>!</code> 作为多行注释的第一个字符表示在压缩输出模式下保留这条注释并输出到 CSS 文件中，通常用于添加版权信息。</p></li><li><p>插值语句 (interpolation) 也可写进多行注释中输出变量值</p></li></ol><p>例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// compile scss files to css</span></span><br><span class="line"><span class="comment">// it&#x27;s ready to do it.</span></span><br><span class="line"><span class="variable">$pink</span>: <span class="number">#f3e1e1</span>;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$pink</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$author</span>: <span class="string">&quot;gdream@126.com&quot;</span>;</span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">Author: #&#123;$author&#125;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>开发模式编译后:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f3e1e1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">Author: &#x27;gdream@126.com&#x27;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>压缩输出模式编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f3e1e1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">Author: &#x27;gdream@126.com&#x27;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>变量以美元符号开头，赋值方法与 CSS 属性的写法一样</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">1600px</span>;</span><br><span class="line"><span class="variable">$pen-size</span>: <span class="number">3em</span>;</span><br></pre></td></tr></table></figure><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>直接使用变量的名称即可调用变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$pen-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h3><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#foo</span> &#123;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">5em</span> !global;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#foo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>SassScript 支持 7 种主要的数据类型：</p><ul><li>数字，<code>1, 2, 13, 10px</code></li><li>字符串，有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>颜色，<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li><li>布尔型，<code>true, false</code></li><li>空值，<code>null</code></li><li>数组 (list)，用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li><li>maps, 相当于 JavaScript 的 object，<code>(key1: value1, key2: value2)</code></li></ul><p>SassScript 也支持其他 CSS 属性值，比如 Unicode 字符集，或 <code>!important</code> 声明。然而 Sass 不会特殊对待这些属性值，一律视为无引号字符串。</p><p>判断数据类型的方式：<code>type-of($value)</code></p><h3 id="1-字符串-Strings"><a href="#1-字符串-Strings" class="headerlink" title="1.字符串 (Strings)"></a>1.字符串 (Strings)</h3><p>SassScript 支持 CSS 的两种字符串类型：<code>有引号字符串 (quoted strings)</code>，和<code>无引号字符串 (unquoted strings)</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: <span class="string">&quot;Tom Bob&quot;</span>;</span><br><span class="line"><span class="variable">$container</span>: <span class="string">&quot;top bottom&quot;</span>;</span><br><span class="line"><span class="variable">$what</span>: heart;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 `#&#123;&#125;` (interpolation) 时，有引号字符串将被编译为无引号字符串，这样便于在 mixin 中引用选择器名</span></span><br></pre></td></tr></table></figure><h3 id="2-数字-Numbers"><a href="#2-数字-Numbers" class="headerlink" title="2.数字(Numbers)"></a>2.数字(Numbers)</h3><p>SassScript 支持两种数字类型：<code>带单位数字</code>和<code>不带单位数字</code>。（可正可负可为零，可正可浮点）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$my-age</span>: <span class="number">19</span>;</span><br><span class="line"><span class="variable">$your-age</span>: <span class="number">19.5</span>;</span><br><span class="line"><span class="variable">$height</span>: <span class="number">120px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：单位会和数字当做一个整体，进行算数运算</span></span><br></pre></td></tr></table></figure><h3 id="3-空值-Null"><a href="#3-空值-Null" class="headerlink" title="3.空值(Null)"></a>3.空值(Null)</h3><p>只有一个取值<code>null</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span>: null;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：由于它代表空，所以不能够使用它与任何类型进行算数运算</span></span><br></pre></td></tr></table></figure><h3 id="4-布尔型-Booleans"><a href="#4-布尔型-Booleans" class="headerlink" title="4.布尔型(Booleans)"></a>4.布尔型(Booleans)</h3><p>只有两个取值：<code>true</code>和<code>false</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: true;</span><br><span class="line"><span class="variable">$b</span>: false;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：只有自身是false和null才会返回false，其他一切都将返回true</span></span><br></pre></td></tr></table></figure><h3 id="5-数组-Lists"><a href="#5-数组-Lists" class="headerlink" title="5.数组 (Lists)"></a>5.数组 (Lists)</h3><p>通过空格或者逗号分隔的一系列的值。事实上，独立的值也被视为数组 —— 只包含一个值的数组。索引从<code>1</code>开始</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$list0</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">6px</span>;</span><br><span class="line"><span class="variable">$list1</span>: <span class="number">1px</span> <span class="number">2px</span>, <span class="number">5px</span> <span class="number">6px</span>;</span><br><span class="line"><span class="variable">$list2</span>: (<span class="number">1px</span> <span class="number">2px</span>) (<span class="number">5px</span> <span class="number">6px</span>);</span><br></pre></td></tr></table></figure><p>数组中可以包含子数组，比如 <code>1px 2px, 5px 6px</code> 是包含 <code>1px 2px</code> 与 <code>5px 6px</code> 两个数组的数组。如果内外两层数组使用相同的分隔方式，需要用圆括号包裹内层，所以也可以写成 <code>(1px 2px) (5px 6px)</code>。变化是，之前的 <code>1px 2px, 5px 6px</code> 使用逗号分割了两个子数组 (comma-separated)，而 <code>(1px 2px) (5px 6px)</code> 则使用空格分割(space-separated)。</p><p>当数组被编译为 CSS 时，Sass 不会添加任何圆括号（CSS 中没有这种写法），所以 <code>(1px 2px) (5px 6px)</code> 与 <code>1px 2px, 5px 6px</code> 在编译后的 CSS 文件中是完全一样的，但是它们在 Sass 文件中却有不同的意义，前者是包含两个数组的数组，而后者是包含四个值的数组。</p><p>用 <code>()</code> 表示不包含任何值的空数组（在 Sass 3.3 版之后也视为空的 map）。空数组不可以直接编译成 CSS，比如编译 <code>font-family: ()</code> Sass 将会报错。如果数组中包含空数组或空值，编译时将被清除，比如 <code>1px 2px () 3px</code> 或 <code>1px 2px null 3px</code>。</p><p>基于逗号分隔的数组允许保留结尾的逗号，这样做的意义是强调数组的结构关系，尤其是需要声明只包含单个值的数组时。例如 <code>(1,)</code> 表示只包含 <code>1</code> 的数组，而 <code>(1 2 3,)</code> 表示包含 <code>1 2 3</code> 这个以空格分隔的数组的数组。</p><h3 id="6-映射-Maps"><a href="#6-映射-Maps" class="headerlink" title="6.映射(Maps)"></a>6.映射(Maps)</h3><p>Maps 必须被圆括号包围，可以映射任何类型键值对（任何类型，包括内嵌 maps，不过不推荐这种内嵌方式）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span>: (</span><br><span class="line">  <span class="variable">$key1</span>: value1,</span><br><span class="line">  <span class="variable">$key2</span>: value2,</span><br><span class="line">  <span class="variable">$key3</span>: value3,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="7-颜色-Colors"><a href="#7-颜色-Colors" class="headerlink" title="7.颜色 (Colors)"></a>7.颜色 (Colors)</h3><p>CSS 原有颜色类型，十六进制、RGB、RGBA、HSL、HSLA 和色彩单词</p><p>SCSS 提供了内置 Colors 函数，从而更方便地使用颜色</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color0</span>: green;</span><br><span class="line"><span class="variable">$color1</span>: lighten(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color2</span>: darken(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color3</span>: saturate(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color4</span>: desaturate(<span class="variable">$color</span>, <span class="number">15%</span>);</span><br><span class="line"><span class="variable">$color5</span>: (green + red);</span><br></pre></td></tr></table></figure><hr><h2 id="四、运算"><a href="#四、运算" class="headerlink" title="四、运算"></a>四、运算</h2><h3 id="1-数字运算符"><a href="#1-数字运算符" class="headerlink" title="1.数字运算符"></a>1.数字运算符</h3><p>SassScript 支持数字的加减乘除、取整等运算 (<code>+, -, *, /, %</code>)，如果必要会在不同单位间转换值</p><p>如果要保留运算符号，则应该使用插值语法</p><ul><li><p><code>+</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 纯数字</span></span><br><span class="line"><span class="variable">$add1</span>: <span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 3</span></span><br><span class="line"><span class="variable">$add2</span>: <span class="number">1</span> + <span class="number">2px</span>; <span class="comment">// 3px</span></span><br><span class="line"><span class="variable">$add3</span>: <span class="number">1px</span> + <span class="number">2</span>; <span class="comment">// 3px</span></span><br><span class="line"><span class="variable">$add4</span>: <span class="number">1px</span> + <span class="number">2px</span>; <span class="comment">//3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 纯字符串</span></span><br><span class="line"><span class="variable">$add5</span>: <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>; <span class="comment">// &quot;ab&quot;</span></span><br><span class="line"><span class="variable">$add6</span>: <span class="string">&quot;a&quot;</span> + b; <span class="comment">// &quot;ab&quot;</span></span><br><span class="line"><span class="variable">$add7</span>: a + <span class="string">&quot;b&quot;</span>; <span class="comment">// ab</span></span><br><span class="line"><span class="variable">$add8</span>: a + b; <span class="comment">// ab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字和字符串</span></span><br><span class="line"><span class="variable">$add9</span>: <span class="number">1</span> + a; <span class="comment">// 1a</span></span><br><span class="line"><span class="variable">$adda</span>: a + <span class="number">1</span>; <span class="comment">// a1</span></span><br><span class="line"><span class="variable">$addb</span>: <span class="string">&quot;1&quot;</span> + a; <span class="comment">// &quot;1a&quot;</span></span><br><span class="line"><span class="variable">$addc</span>: <span class="number">1</span> + <span class="string">&quot;a&quot;</span>; <span class="comment">// &quot;1a&quot;</span></span><br><span class="line"><span class="variable">$addd</span>: <span class="string">&quot;a&quot;</span> + <span class="number">1</span>; <span class="comment">// &quot;a1&quot;</span></span><br><span class="line"><span class="variable">$adde</span>: a + <span class="string">&quot;1&quot;</span>; <span class="comment">// a1</span></span><br><span class="line"><span class="variable">$addf</span>: <span class="number">1</span> + <span class="string">&quot;1&quot;</span>; <span class="comment">// &quot;11&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="selector-tag">a</span>.纯数字：只要有单位，结果必有单位</span><br><span class="line"><span class="selector-tag">b</span>.纯字符串：第一个字符串有无引号决定结果是否有引号</span><br><span class="line">c数字和字符串：第一位有引号，结果必为引号；第一位对应数字非数字且最后一位带有引号，则结果必为引号</span><br></pre></td></tr></table></figure></li><li><p><code>-</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$add1</span>: <span class="number">1</span> - <span class="number">2</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="variable">$add2</span>: <span class="number">1</span> - <span class="number">2px</span>; <span class="comment">// -1px</span></span><br><span class="line"><span class="variable">$add3</span>: <span class="number">1px</span> - <span class="number">2</span>; <span class="comment">// -1px</span></span><br><span class="line"><span class="variable">$add4</span>: <span class="number">1px</span> - <span class="number">2px</span>; <span class="comment">//-1px</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sub1</span>: a - <span class="number">1</span>; <span class="comment">// a-1</span></span><br><span class="line"><span class="variable">$sub2</span>: <span class="number">1</span> - a; <span class="comment">// 1-a</span></span><br><span class="line"><span class="variable">$sub3</span>: <span class="string">&quot;a&quot;</span> - <span class="number">1</span>; <span class="comment">// &quot;a&quot;-1</span></span><br><span class="line"><span class="variable">$sub4</span>: a - <span class="string">&quot;1&quot;</span>; <span class="comment">// a-&quot;1&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line">每个字段必须前部分为数字，且两个字段只能一个后部分是字符(因为此时后缀被当被单位看待了)。</span><br><span class="line">只要其中一个值首位不为数字的，结果就按顺序去除空格后拼接起来</span><br></pre></td></tr></table></figure></li><li><p><code>*</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num1</span>: <span class="number">1</span> * <span class="number">2</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="variable">$mul2</span>: <span class="number">1</span> * <span class="number">2px</span>; <span class="comment">// 2px</span></span><br><span class="line"><span class="variable">$num3</span>: <span class="number">1px</span> * <span class="number">2</span>; <span class="comment">// 2px</span></span><br><span class="line"><span class="variable">$num4</span>: <span class="number">2px</span> * <span class="number">2px</span>; <span class="comment">// 编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$num5</span>: <span class="number">1</span> * <span class="number">2</span>abc; <span class="comment">// 2abc</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line">每个字段必须前部分为数字，且两个字段只能一个后部分是字符(因为此时后缀被当被单位看待了)。其余编译不通过</span><br></pre></td></tr></table></figure></li><li><p><code>/</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="selector-tag">a</span>.不会四舍五入，精确到小数点后5位</span><br><span class="line"><span class="selector-tag">b</span>.每个字段必须前部分为数字，且当前者只是单纯数字无单位时，后者(除数)后部分不能有字符。其余结果就按顺序去除空格后拼接起来。</span><br><span class="line">(因为此时后缀被当被单位看待了)</span><br></pre></td></tr></table></figure></li><li><p><code>%</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="selector-tag">a</span>.值与&quot;%&quot;之间必须要有空格，否则会被看做字符串</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h3><p>大前提：两端必须为<code>数字</code> 或 <code>前部分数字后部分字符</code></p><p>返回值：<code>true</code> or <code>false</code></p><ul><li><p><code>&gt;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &gt; <span class="number">2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &gt; <span class="number">2</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>&gt;=</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &gt;= <span class="number">2</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;=</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> &lt;= <span class="number">2</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-相等运算符"><a href="#3-相等运算符" class="headerlink" title="3.相等运算符"></a>3.相等运算符</h3><p>作用范围：相等运算 <code>==, !=</code> 可用于所有数据类型</p><p>返回值：<code>true</code> or <code>false</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span> == <span class="number">1px</span>; <span class="comment">// true</span></span><br><span class="line"><span class="variable">$b</span>: <span class="string">&quot;a&quot;</span> == a; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line">前部分为不带引号数字时，对比的仅仅是数字部分；反之，忽略引号，要求字符一一对应</span><br></pre></td></tr></table></figure><h3 id="4-布尔运算符"><a href="#4-布尔运算符" class="headerlink" title="4.布尔运算符"></a>4.布尔运算符</h3><p>SassScript 支持布尔型的 <code>and</code> <code>or</code> 以及 <code>not</code> 运算。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>: <span class="number">1</span>&gt;<span class="number">0</span> and <span class="number">0</span>&gt;=<span class="number">5</span>; <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总结：</span></span><br><span class="line">值与&quot;and&quot;、&quot;or&quot;和&quot;not&quot;之间必须要有空格，否则会被看做字符串</span><br></pre></td></tr></table></figure><h3 id="5-颜色值运算"><a href="#5-颜色值运算" class="headerlink" title="5.颜色值运算"></a>5.颜色值运算</h3><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值</p><ul><li><p><code>颜色值与颜色值</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 01 + 04 = 05 02 + 05 = 07 03 + 06 = 09，然后编译为</span></span><br><span class="line"><span class="comment">// p &#123;</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#050709</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>颜色值与数字</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 01 * 2 = 02 02 * 2 = 04 03 * 2 = 06，然后编译为</span></span><br><span class="line"><span class="comment">// p &#123;</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#020406</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>RGB和HSL</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) + rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p &#123;</span></span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>); &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-运算优先级"><a href="#6-运算优先级" class="headerlink" title="6.运算优先级"></a>6.运算优先级</h3><ol start="0"><li><p><code>()</code></p></li><li><p><code>*</code>、<code>/</code>、<code>%</code></p></li><li><p><code>+</code>、<code>-</code></p></li><li><p><code>&gt;</code> 、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></p></li></ol><hr><h2 id="五、嵌套语法"><a href="#五、嵌套语法" class="headerlink" title="五、嵌套语法"></a>五、嵌套语法</h2><hr><h2 id="六、杂货语法"><a href="#六、杂货语法" class="headerlink" title="六、杂货语法"></a>六、杂货语法</h2><h3 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.<code>插值语法</code></h3><p>通过 <code>#&#123;&#125;</code> 插值语句可以在选择器、属性名和属性值中使用变量。</p><p>但大多数情况下，这样使用属性值可能还不如直接使用变量方便，但是使用 <code>#&#123;&#125;</code> 可以避免 Sass 运行运算表达式，直接编译 CSS。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo;</span><br><span class="line"><span class="variable">$attr</span>: border;</span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后：</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: foo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-amp-in-SassScript"><a href="#2-amp-in-SassScript" class="headerlink" title="2.&amp; in SassScript"></a>2.<code>&amp; in SassScript</code></h3><p><code>&amp;</code>为父选择器</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-default"><a href="#3-default" class="headerlink" title="3.!default"></a>3.<code>!default</code></h3><p>可以在变量的结尾添加 <code>!default</code> 给一个未通过 <code>!default</code> 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">&quot;First content&quot;</span>;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">&quot;Second content?&quot;</span> !default;</span><br><span class="line"><span class="variable">$new_content</span>: <span class="string">&quot;First time reference&quot;</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="variable">$new_content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;First content&quot;</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="string">&quot;First time reference&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：变量是 null 空值时将视为未被 <code>!default</code> 赋值。</p><h3 id="3-global"><a href="#3-global" class="headerlink" title="3.!global"></a>3.<code>!global</code></h3><p>将局部变量提升为全局变量</p><h3 id="4-optional"><a href="#4-optional" class="headerlink" title="4.!optional"></a>4.<code>!optional</code></h3><p>如果 <code>@extend</code> 失败会收到错误提示，比如，这样写 <code>a.important &#123;@extend .notice&#125;</code>，当没有 <code>.notice</code> 选择器时，将会报错，只有 <code>h1.notice</code> 包含 <code>.notice</code> 时也会报错，因为 <code>h1</code> 与 <code>a</code> 冲突，会生成新的选择器。</p><p>如果要求 <code>@extend</code> 不生成新选择器，可以通过 <code>!optional</code> 声明达到这个目的.</p><p>简而言之：当<code>@extend</code>相关代码出现语法错误时，编译器可能会给我们”乱”编译为 css，我们加上这个参数可以在出现问题后不让他编译该部分代码</p><hr><h2 id="七、-Rules-与指令"><a href="#七、-Rules-与指令" class="headerlink" title="七、@-Rules 与指令"></a>七、@-Rules 与指令</h2><h3 id="1-import"><a href="#1-import" class="headerlink" title="1.@import"></a>1.<code>@import</code></h3><p>Sass 拓展了 <code>@import</code> 的功能，允许其导入 SCSS 或 SASS 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。</p><p>通常，<code>@import</code> 寻找 Sass 文件并将其导入，但在以下情况下，<code>@import</code> 仅作为普通的 CSS 语句，不会导入任何 Sass 文件。</p><ul><li>文件拓展名是 <code>.css</code>；</li><li>文件名以 <code>http://</code> 开头；</li><li>文件名是 <code>url()</code>；</li><li><code>@import</code> 包含 media queries。</li></ul><p>如果不在上述情况内，文件的拓展名是 <code>.scss</code> 或 <code>.sass</code>，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 <code>.scss</code> 或 <code>.sass</code> 的文件并将其导入。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo.scss&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="comment">// 以上两种方式均可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下方式均不可行</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo.css&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;foo&quot;</span> screen;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;http://foo.com/bar&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> url(foo);</span><br></pre></td></tr></table></figure><p>Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;rounded-corners&quot;</span>, <span class="string">&quot;text-shadow&quot;</span>;</span><br></pre></td></tr></table></figure><p>导入文件也可以使用 <code>#&#123; &#125;</code> 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 <code>url()</code> 导入方式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">&quot;Droid+Sans&quot;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=\#&#123;$family&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=Droid+Sans&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。</p><p>除此之外，还支持嵌套 @import,但是不可以在混合指令 (mixin) 或控制指令 (control directives) 中嵌套 <code>@import</code>。</p><h3 id="2-media"><a href="#2-media" class="headerlink" title="2.@media"></a>2.<code>@media</code></h3><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@media</code>的 queries 允许互相嵌套使用，编译时，Sass 自动添加 <code>and</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> (orientation: landscape) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@media</code> 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$media</span>: screen;</span><br><span class="line"><span class="variable">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="line"><span class="variable">$value</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> #&#123;<span class="variable">$media</span>&#125; and (<span class="variable">$feature</span>: <span class="variable">$value</span>) &#123;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    width: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-extend"><a href="#3-extend" class="headerlink" title="3.*@extend"></a>3.<code>*@extend</code></h3><p><code>@extend</code>即<code>继承</code>。在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。</p><p>总的来看：支持层叠继承、多继承、允许延伸任何定义给单个元素的选择器（但是允许不一定好用）</p><p>a. <code>基本延伸</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面代码的意思是将 .error 下的所有样式继承给 .seriousError，border-width: 3px; 是单独给 .seriousError 设定特殊样式，这样，使用 .seriousError 的地方可以不再使用 .error。</span></span><br></pre></td></tr></table></figure><p><code>@extend</code> 的作用是将重复使用的样式 (<code>.error</code>) 延伸 (extend) 给需要包含这个样式的特殊样式（<code>.seriousError</code>）</p><p>注意理解以下情况：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/image/hacked.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .error, .seriousError &#123;</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>, <span class="selector-class">.seriousError</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/image/hacked.png&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure><p>当合并选择器时，<code>@extend</code> 会很聪明地避免无谓的重复，<code>.seriousError.seriousError</code> 将编译为 <code>.seriousError</code>，不能匹配任何元素的选择器也会删除。</p><p>b. <code>延伸复杂的选择器</code>：Class 选择器并不是唯一可以被延伸 (extend) 的，Sass 允许延伸任何定义给单个元素的选择器，比如 <code>.special.cool</code>，<code>a:hover</code> 或者 <code>a.user[href^=&quot;http://&quot;]</code> 等</p><p>c. <code> 多重延伸</code>：同一个选择器可以延伸给多个选择器，它所包含的属性将继承给所有被延伸的选择器</p><p>d. <code>继续延伸</code>：当一个选择器延伸给第二个后，可以继续将第二个选择器延伸给第三个</p><p>e.<code>*选择器列</code>：暂时不可以将选择器列 (Selector Sequences)，比如 <code>.foo .bar</code> 或 <code>.foo + .bar</code>，延伸给其他元素，但是，却可以将其他元素延伸给选择器列。</p><p>尽量不使用<code>合并选择器列</code>，因为如果凭个人推理的话，会出现排列组合的情况，所以 SASS 编译器只会保留有用的组合形式，但依旧会存在排列组合的情况，有可能会留下隐患。</p><ol><li><p>当两个列合并时，如果没有包含相同的选择器，将生成两个新选择器：第一列出现在第二列之前，或者第二列出现在第一列之前</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为：</span></span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果两个列包含了相同的选择器，相同部分将会合并在一起，其他部分交替输出</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译为</span></span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>f. <code>在指令中延伸</code></p><p>在指令中使用 <code>@extend</code> 时（比如在 <code>@media</code> 中）有一些限制：Sass 不可以将 <code>@media</code> 层外的 CSS 规则延伸给指令层内的 CSS.</p><p>g. <code>%placeholder</code>为选择器占位符，配合<code>@extend-Only选择器</code>使用。</p><p>效果：只定义了样式，但不会对原有选择器匹配的元素生效</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example1:</span></span><br><span class="line">%<span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.path</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %img;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译后：</span></span><br><span class="line"><span class="selector-class">.path</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example2:</span></span><br><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span>%extreme &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译后：</span></span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %extreme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：必须是&quot;.&quot;和&quot;#&quot;选择器</span></span><br></pre></td></tr></table></figure><h3 id="4-at-root"><a href="#4-at-root" class="headerlink" title="4.@at-root"></a>4.<code>@at-root</code></h3><blockquote><p>The @at-root directive causes one or more rules to be emitted at the root of the document, rather than being nested beneath their parent selectors. It can either be used with a single inline selector</p></blockquote><p>译文：@at root 指令使一个或多个规则在文档的根发出，而不是嵌套在其父选择器下。它可以与单个内联选择器一起使用</p><p>且@at-root 使多个规则跳出嵌套</p><p>@at-root 默认情况下并不能使规则或者选择器跳出指令，通过使用 without 和 with 可以解决该问题</p><p>了解即可</p><h3 id="5-debug"><a href="#5-debug" class="headerlink" title="5.@debug"></a>5.<code>@debug</code></h3><p>用于调试，按标准错误输出流输出</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$size</span>: <span class="number">9px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file</span> &#123;</span><br><span class="line">  <span class="keyword">@debug</span> <span class="variable">$size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-warn"><a href="#6-warn" class="headerlink" title="6.@warn"></a>6.<code>@warn</code></h3><p>用于警告，按标准错误输出流输出</p><h3 id="7-error"><a href="#7-error" class="headerlink" title="7.@error"></a>7.<code>@error</code></h3><p>用于报错，按标准错误输出流输出</p><table><thead><tr><th>序列</th><th>@-rules</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>@import</td><td>导入 sass 或 scss 文件</td></tr><tr><td>2</td><td>@media</td><td>用于将样式规则设置为不同的媒体类型</td></tr><tr><td>3</td><td>@extend</td><td>以继承的方式共享选择器</td></tr><tr><td>4</td><td>@at-root</td><td>转到根节点</td></tr><tr><td>5</td><td>@debug</td><td>用于调试，按标准错误输出流输出</td></tr><tr><td>6</td><td>@warn</td><td>用于警告，按标准错误输出流输出</td></tr><tr><td>7</td><td>@error</td><td>用于报错，按标准错误输出流输出</td></tr></tbody></table><hr><h2 id="八、控制指令"><a href="#八、控制指令" class="headerlink" title="八、控制指令"></a>八、控制指令</h2><h3 id="1-if"><a href="#1-if" class="headerlink" title="1.if()"></a>1.<code>if()</code></h3><p><em>三元运算符</em></p><p>表达式：<code>if(expression, value1, value2)</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: if(<span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span>, green, yellow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-if"><a href="#2-if" class="headerlink" title="2.@if"></a>2.<code>@if</code></h3><p><em>条件语句</em></p><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>&#123;&#125;</code> 内的代码</p><p><code>@if</code> 声明后面可以跟多个 <code>@else if</code> 声明，或者一个 <code>@else</code> 声明。如果 <code>@if</code> 声明失败，Sass 将逐条执行 <code>@else if</code> 声明，如果全部失败，最后执行 <code>@else</code> 声明</p><ul><li><p><code>单@if</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@if - @else</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> != <span class="number">2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@if - @else if - @else</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$age</span>: <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$age</span> == <span class="number">18</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$age</span> == <span class="number">19</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-for"><a href="#3-for" class="headerlink" title="3.@for"></a>3.<code>@for</code></h3><p><em>循环语句</em></p><p>表达式：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 或 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code></p><p>through 和 to 的相同点与不同点：</p><ul><li>相同点：两者均包含<start>的值</li><li>不同点：through 包含<end>的值，但 to 不包含<end>的值</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-while"><a href="#4-while" class="headerlink" title="4.@while"></a>4.<code>@while</code></h3><p><em>循环语句</em></p><p>表达式：<code>@while expression</code></p><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。这样可以实现比 <code>@for</code> 更复杂的循环，只是很少会用到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-each"><a href="#5-each" class="headerlink" title="5.@each"></a>5.<code>@each</code></h3><p><em>循环语句</em></p><p>表达式：<code>$var in $vars</code></p><p><code>$var</code> 可以是任何变量名</p><p><code>$vars</code> 只能是<code>Lists</code>或者<code>Maps</code></p><ul><li><p>一维列表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/#&#123;$animal&#125;.png&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/puma.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/sea-slug.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/egret.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/salamander.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二维列表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span>, <span class="variable">$color</span>, <span class="variable">$cursor</span> in (puma, black, default), (</span><br><span class="line">    sea-slug,</span><br><span class="line">    blue,</span><br><span class="line">    pointer</span><br><span class="line">  ), (egret, white, move)</span><br><span class="line">&#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/#&#123;$animal&#125;.png&quot;</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="variable">$cursor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/puma.png&quot;</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">cursor</span>: default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/sea-slug.png&quot;</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;/images/egret.png&quot;</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>maps</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>) &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="九、混合指令"><a href="#九、混合指令" class="headerlink" title="九、混合指令"></a>九、混合指令</h2><blockquote><p>混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 <code>.float-left</code>。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。</p></blockquote><p>注意：这不是函数！没有返回值！！</p><h3 id="1-定义混合指令"><a href="#1-定义混合指令" class="headerlink" title="1.定义混合指令"></a>1.定义混合指令</h3><p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式，以及需要的参数（可选）。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">@mixin</span> name &#123;</span><br><span class="line">  <span class="comment">// 样式....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example：</span></span><br><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-引用混合样式"><a href="#2-引用混合样式" class="headerlink" title="2.引用混合样式"></a>2.引用混合样式</h3><p>使用 <code>@include</code> 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">@include</span> name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：无参数或参数都有默认值时，带不带括号都可以</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example：</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-参数"><a href="#3-参数" class="headerlink" title="3.参数"></a>3.参数</h3><p>格式：按照变量的格式，通过逗号分隔，将参数写进 Mixin 名称后的圆括号里</p><p>支持默认值；支持多参数；支持不定参数；支持位置传参和关键词传参</p><h4 id="a-位置传参"><a href="#a-位置传参" class="headerlink" title="a. 位置传参"></a>a. 位置传参</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mp(<span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> mp(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-关键词传参"><a href="#b-关键词传参" class="headerlink" title="b.关键词传参"></a>b.关键词传参</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mp(<span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> mp(<span class="variable">$width</span>: <span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-参数默认值"><a href="#c-参数默认值" class="headerlink" title="c.参数默认值"></a>c.参数默认值</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mp(<span class="variable">$width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> mp(<span class="variable">$width</span>: <span class="number">300px</span>);</span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  <span class="keyword">@include</span> mp(<span class="number">300px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d-不定参数"><a href="#d-不定参数" class="headerlink" title="d.不定参数"></a>d.不定参数</h4><blockquote><p>官方：Variable Arguments</p><p>译文：参数变量</p><p>有时，不能确定混合指令需要使用多少个参数。这时，可以使用参数变量 <code>…</code> 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> mar(<span class="variable">$value</span>...) &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-向混合样式中导入内容"><a href="#4-向混合样式中导入内容" class="headerlink" title="4.向混合样式中导入内容"></a>4.向混合样式中导入内容</h3><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 <code>@content</code> 标志的地方</p><p>可以看作参数的升级版</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> example &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> example &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compile:</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="十、函数指令"><a href="#十、函数指令" class="headerlink" title="十、函数指令"></a>十、函数指令</h2><h3 id="1-内置函数"><a href="#1-内置函数" class="headerlink" title="1.内置函数"></a>1.内置函数</h3><h4 id="a-字符串函数"><a href="#a-字符串函数" class="headerlink" title="a. 字符串函数"></a>a. 字符串函数</h4><blockquote><p>索引第一个为 1，最后一个为-1；切片两边均为闭区间</p></blockquote><table><thead><tr><th align="left">函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td align="left">quote($string)</td><td align="center">添加引号</td></tr><tr><td align="left">unquote($string)</td><td align="center">除去引号</td></tr><tr><td align="left">to-lower-case($string)</td><td align="center">变为小写</td></tr><tr><td align="left">to-upper-case($string)</td><td align="center">变为大写</td></tr><tr><td align="left">str-length($string)</td><td align="center">返回$string 的长度(汉字算一个)</td></tr><tr><td align="left">str-index($string，$substring)</td><td align="center">返回$substring在$string 的位置</td></tr><tr><td align="left">str-insert($string, $insert, $index)</td><td align="center">在$string的$index 处插入$insert</td></tr><tr><td align="left">str-slice($string, $start-at, $end-at）</td><td align="center">截取$string的$start-at 和$end-at 之间的字符串</td></tr></tbody></table><h4 id="b-数字函数"><a href="#b-数字函数" class="headerlink" title="b. 数字函数"></a>b. 数字函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>percentage($number)</td><td align="center">转换为百分比形式</td></tr><tr><td>round($number)</td><td align="center">四舍五入为整数</td></tr><tr><td>ceil($number)</td><td align="center">数值向上取整</td></tr><tr><td>floor($number)</td><td align="center">数值向下取整</td></tr><tr><td>abs($number)</td><td align="center">获取绝对值</td></tr><tr><td>min($number…)</td><td align="center">获取最小值</td></tr><tr><td>max($number…)</td><td align="center">获取最大值</td></tr><tr><td>random($number?:number)</td><td align="center">不传入值：获得 0-1 的随机数；传入正整数 n：获得 0-n 的随机整数（左开右闭）</td></tr></tbody></table><h4 id="c-数组函数"><a href="#c-数组函数" class="headerlink" title="c. 数组函数"></a>c. 数组函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>length($list)</td><td align="center">获取数组长度</td></tr><tr><td>nth($list, n)</td><td align="center">获取指定下标的元素</td></tr><tr><td>set-nth($list, $n, $value)</td><td align="center">向$list的$n 处插入$value</td></tr><tr><td>join($list1, $list2, $separator)</td><td align="center">拼接$list1和list2；$separator 为新 list 的分隔符，默认为 auto，可选择 comma、space</td></tr><tr><td>append($list, $val, $separator)</td><td align="center">向$list的末尾添加$val；$separator 为新 list 的分隔符，默认为 auto，可选择 comma、space</td></tr><tr><td>index($list, $value)</td><td align="center">返回$value值在$list 中的索引值</td></tr><tr><td>zip($lists…)</td><td align="center">将几个列表结合成一个多维的列表；要求每个的列表个数值必须是相同的</td></tr></tbody></table><h4 id="d-映射函数"><a href="#d-映射函数" class="headerlink" title="d. 映射函数"></a>d. 映射函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>map-get($map, $key)</td><td align="center">获取$map中$key 对应的$value</td></tr><tr><td>map-merge($map1, $map2)</td><td align="center">合并$map1和$map2，返回一个新$map</td></tr><tr><td>map-remove($map, $key)</td><td align="center">从$map中删除$key，返回一个新$map</td></tr><tr><td>map-keys($map)</td><td align="center">返回$map所有的$key</td></tr><tr><td>map-values($map)</td><td align="center">返回$map所有的$value</td></tr><tr><td>map-has-key($map, $key)</td><td align="center">判断$map中是否存在$key，返回对应的布尔值</td></tr><tr><td>keywords($args)</td><td align="center">返回一个函数的参数，并可以动态修改其值</td></tr></tbody></table><h4 id="e-颜色函数"><a href="#e-颜色函数" class="headerlink" title="e. 颜色函数"></a>e. 颜色函数</h4><ul><li><p><strong>RGB 函数</strong></p><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>rgb($red, $green, $blue)</td><td align="center">返回一个 16 进制颜色值</td></tr><tr><td>rgba($red,$green,$blue,$alpha)</td><td align="center">返回一个 rgba；$red,$green 和$blue 可被当作一个整体以颜色单词、hsl、rgb 或 16 进制形式传入</td></tr><tr><td>red($color)</td><td align="center">从$color 中获取其中红色值</td></tr><tr><td>green($color)</td><td align="center">从$color 中获取其中绿色值</td></tr><tr><td>blue($color)</td><td align="center">从$color 中获取其中蓝色值</td></tr><tr><td>mix($color1,$color2,$weight?)</td><td align="center">按照$weight比例，将$color1 和$color2 混合为一个新颜色</td></tr></tbody></table></li><li><p><strong>HSL 函数</strong></p><table><thead><tr><th>函数名和参数类型</th><th>函数作用</th></tr></thead><tbody><tr><td>hsl($hue,$saturation,$lightness)</td><td>通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色</td></tr><tr><td>hsla($hue,$saturation,$lightness,$alpha)</td><td>通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色</td></tr><tr><td>saturation($color)</td><td>从一个颜色中获取饱和度（saturation）值</td></tr><tr><td>lightness($color)</td><td>从一个颜色中获取亮度（lightness）值</td></tr><tr><td>adjust-hue($color,$degrees)</td><td>通过改变一个颜色的色相值，创建一个新的颜色</td></tr><tr><td>lighten($color,$amount)</td><td>通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色</td></tr><tr><td>darken($color,$amount)</td><td>通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色</td></tr><tr><td>hue($color)</td><td>从一个颜色中获取亮度色相（hue）值</td></tr></tbody></table></li><li><p><strong>Opacity 函数</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>alpha($color)/opacity($color)</td><td>获取颜色透明度值</td></tr><tr><td>rgba($color,$alpha)</td><td>改变颜色的透明度</td></tr><tr><td>opacify($color, $amount) / fade-in($color, $amount)</td><td>使颜色更不透明</td></tr><tr><td>transparentize($color, $amount) / fade-out($color, $amount)</td><td>使颜色更加透明</td></tr></tbody></table></li></ul><h4 id="f-Introspection-函数"><a href="#f-Introspection-函数" class="headerlink" title="f. Introspection 函数"></a>f. Introspection 函数</h4><table><thead><tr><th>函数名和参数类型</th><th align="center">函数作用</th></tr></thead><tbody><tr><td>type-of($value)</td><td align="center">返回$value 的类型</td></tr><tr><td>unit($number)</td><td align="center">返回$number 的单位</td></tr><tr><td>unitless($number)</td><td align="center">判断$number 是否带单位，返回对应的布尔值</td></tr><tr><td>comparable($number1, $number2)</td><td align="center">判断$number1和$number2 是否可以做加、减和合并，返回对应的布尔值</td></tr></tbody></table><h3 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2.自定义函数"></a>2.自定义函数</h3><blockquote><p>Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用</p><p>Params: 与 Mixin 一致</p><p>支持返回值</p></blockquote><p><strong>基本格式：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> fn-name(<span class="variable">$params</span>...) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$params</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example:</span></span><br><span class="line"><span class="keyword">@function</span> fn-name(<span class="variable">$params</span>...) &#123;</span><br><span class="line">  <span class="keyword">@return</span> nth(<span class="variable">$params</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: fn-name(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiled:</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="十一、细节与展望"><a href="#十一、细节与展望" class="headerlink" title="十一、细节与展望"></a>十一、细节与展望</h2><h3 id="1-细节"><a href="#1-细节" class="headerlink" title="1.细节"></a>1.细节</h3><p>a. @extend、@Mixin 和@function 的选择</p><p><a href="https://csswizardry.com/2016/02/mixins-better-for-performance/">原文链接</a></p><p><img src="http://www.oss.qcwy.org.cn/blog/css/sass/1.png" alt="image-20200707171035353"></p><blockquote><p><code>minxins</code>在网络传输中比<code>@extend</code> 拥有更好的性能.尽管有些文件未压缩时更大，但使用<code>gzip</code>压缩后，依然可以保证我们拥有更好的性能。</p></blockquote><p><strong>所以@extend 我们就尽量不要使用了，而@Mixin 和@function 的差别在定义和使用上</strong></p><blockquote><p>定义方式不同： <code>@function</code> 需要调用<code>@return</code>输出结果。而 @mixin 则不需要。</p><p>使用方式不同：<code>@mixin</code> 使用<code>@include</code>引用，而 <code>@function</code> 使用小括号执行函数。</p></blockquote><h3 id="2-展望"><a href="#2-展望" class="headerlink" title="2.展望"></a>2.展望</h3><blockquote><p>以上内容算是”基础”部分，但是对于日常开发，我觉得是足够使用的了。</p><p>如果想要进一步了解，就必须先去学习下 Ruby，使用 Ruby 相关模块进行更丰富地学习</p></blockquote><h3 id="Unfinished…"><a href="#Unfinished…" class="headerlink" title="Unfinished…"></a>Unfinished…</h3>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> sass </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读vantUI源码发现的语法（坑了我一把）</title>
      <link href="2020/09/10/vue/vant-ui-code/"/>
      <url>2020/09/10/vue/vant-ui-code/</url>
      
        <content type="html"><![CDATA[<h2 id="真心的吐槽"><a href="#真心的吐槽" class="headerlink" title="真心的吐槽"></a>真心的吐槽</h2><blockquote><p>今天看vant源码，可把我坑了一把，问了好多人，查了好久的东西。先看问题<br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/1.webp" alt="image.png"><br>看标记的部分，发现vant源码内用了大量的这种语法。讲真的，我是第一次看到代码这样写。<br>一个特别大的疑问涌上心头。那就是第一个括号里的<strong>0</strong>是干嘛的呢？自执行函数不应该是<strong>（）（）</strong>的么？哪这事什么语法呢？ 再看看其他的框架，也到处都是这种语法</p></blockquote><h2 id="解决疑问"><a href="#解决疑问" class="headerlink" title="解决疑问"></a>解决疑问</h2><p><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/2.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/3.webp" alt="image.png"></p><p><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/4.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/5.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/6.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/7.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/8.webp" alt="image.png"></p><p><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/9.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/10.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/11.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/article/vant/vant-ui-code/12.webp" alt="image.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>终究还是自执行函数，在严格模式下，为了使其在全局范围内执行，改变this指向的作用。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Winne_Shen/article/details/102684878">https://blog.csdn.net/Winne_Shen/article/details/102684878</a><br><a href="https://www.jianshu.com/p/c64bfbcd34c3">https://www.jianshu.com/p/c64bfbcd34c3</a><br><a href="https://www.i-programmer.info/programming/javascript/6524-the-confusing-comma-in-javascript.html">https://www.i-programmer.info/programming/javascript/6524-the-confusing-comma-in-javascript.html</a></p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-cookie</title>
      <link href="2020/09/09/js/js-cookie/"/>
      <url>2020/09/09/js/js-cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="1、整理记录一下-js-cookie-这个库的使用"><a href="#1、整理记录一下-js-cookie-这个库的使用" class="headerlink" title="1、整理记录一下 js-cookie 这个库的使用"></a>1、整理记录一下 js-cookie 这个库的使用</h2><blockquote><p>一个简单，轻巧的 JavaScript API，用于处理 Cookie</p><ul><li>适用于<a href="https://saucelabs.com/u/js-cookie">所有</a>浏览器</li><li>接受<a href="https://www.npmjs.com/package/js-cookie#encoding">任何</a>字符</li><li><a href="https://github.com/js-cookie/js-cookie/blob/HEAD/test"></a>经过<a href="https://github.com/js-cookie/js-cookie/blob/HEAD/test">严格</a>测试</li><li>无依赖性</li><li><a href="https://www.npmjs.com/package/js-cookie#json">不引人注目的</a> JSON 支持</li><li>支持 AMD / CommonJS</li><li><a href="https://tools.ietf.org/html/rfc6265"></a>符合<a href="https://tools.ietf.org/html/rfc6265">RFC 6265</a></li><li>有用的<a href="https://github.com/js-cookie/js-cookie/wiki">维基</a></li><li>启用<a href="https://www.npmjs.com/package/js-cookie#converters">自定义编码/解码</a></li><li>压缩<strong>约 900 个字节</strong>！<br>这就是官方的描述，很好用的一个库，了解了这个库的好处，下面开始正式介绍使用。</li></ul></blockquote><h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><h3 id="2-1、下载安装"><a href="#2-1、下载安装" class="headerlink" title="2.1、下载安装"></a>2.1、下载安装</h3><blockquote><script src="/path/to/js.cookie.js"></script><p>OR</p><script src="https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script><p>OR</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add js-cookie --save  / npm install js-cookie -- save</span><br></pre></td></tr></table></figure><p>JavaScript Cookie 也可以作为 AMD 或 CommonJS 模块加载</p></blockquote><h3 id="2-2、基本用法"><a href="#2-2、基本用法" class="headerlink" title="2.2、基本用法"></a>2.2、基本用法</h3><ul><li><ol><li>创建一个在整个网站上有效的 cookie<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>创建一个在整个网站都有效，但有效期为 7 天但 cookie<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="3"><li>读取 cookie<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="4"><li>读取所有可见的 cookie<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get();</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="5"><li>删除 cookie<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.remove(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="6"><li>根据不同的 domain/path 进行删除<br><code>js Cookies.remove(&#39;name&#39;, &#123; path: &#39;&#39;, domain: &#39;&#39; &#125;); </code><br><strong>注意：</strong>在读取的时候，domain/path 属性将不起作用。删除的时候，如果不想用默认的参数，就需要覆盖其默认的参数</li></ol></li></ul><p>还有一些其他的用法，如需了解<a href="https://www.npmjs.com/package/js-cookie">请查看官网</a></p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react使用antd-mobile的按需加载和自定义主题</title>
      <link href="2020/09/01/react/antd-mobile-theme/"/>
      <url>2020/09/01/react/antd-mobile-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>练习使用react做移动端h5的时候，选择使用antd-mobileUI库。但是在使用的时候，遇到了一些坑。查询了很多别人遇到类似问题的解决方法。现在记录一下自己的解决方法。</p></blockquote><h2 id="1、创建react项目以及准备工作"><a href="#1、创建react项目以及准备工作" class="headerlink" title="1、创建react项目以及准备工作"></a>1、创建react项目以及准备工作</h2><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app [你的项目名称]</span><br></pre></td></tr></table></figure><h3 id="1-2、下载需要的UI组件库"><a href="#1-2、下载需要的UI组件库" class="headerlink" title="1.2、下载需要的UI组件库"></a>1.2、下载需要的UI组件库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add antd-mobile</span><br></pre></td></tr></table></figure><h3 id="1-3、整理项目目录"><a href="#1-3、整理项目目录" class="headerlink" title="1.3、整理项目目录"></a>1.3、整理项目目录</h3><blockquote><p>这里放一个本人整理好的项目目录，当然可能有些目录是不需要的，可以不要，暂时先放在这里。<br><img src="http://www.blog.image.qcwy.org.cn/article/react/ntd-theme/1.webp" alt="image.png"></p></blockquote><h2 id="2、antd-mobile按需引入配置"><a href="#2、antd-mobile按需引入配置" class="headerlink" title="2、antd-mobile按需引入配置"></a>2、antd-mobile按需引入配置</h2><blockquote><p>这里是按需加载的操作，可以按照官网上的提示一步一步的做。</p></blockquote><h3 id="2-1、-引入-react-app-rewired"><a href="#2-1、-引入-react-app-rewired" class="headerlink" title="2.1、 引入 react-app-rewired"></a>2.1、 引入 <a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a></h3><blockquote><p>由于新的 <a href="https://github.com/timarney/react-app-rewired#alternatives">react-app-rewired@2.x</a> 版本的关系，你需要还需要安装 <a href="https://github.com/arackaf/customize-cra">customize-cra</a>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-app-rewired customize-cra --save-dev</span><br></pre></td></tr></table></figure><h3 id="2-2、-修改-package-json-里的启动配置"><a href="#2-2、-修改-package-json-里的启动配置" class="headerlink" title="2.2、 修改 package.json 里的启动配置"></a>2.2、 修改 package.json 里的启动配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;start&quot;</span>: <span class="string">&quot;react-app-rewired start&quot;</span>,</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;react-app-rewired build&quot;</span>,</span><br><span class="line">   <span class="string">&quot;test&quot;</span>: <span class="string">&quot;react-app-rewired test --env=jsdom&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、根目录创建一个-config-overrides-js-用于修改默认配置"><a href="#2-3、根目录创建一个-config-overrides-js-用于修改默认配置" class="headerlink" title="2.3、根目录创建一个 config-overrides.js 用于修改默认配置"></a>2.3、根目录创建一个 config-overrides.js 用于修改默认配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-4、使用-babel-plugin-import"><a href="#2-4、使用-babel-plugin-import" class="headerlink" title="2.4、使用 babel-plugin-import"></a>2.4、使用 babel-plugin-import</h3><blockquote><p> <a href="https://github.com/ant-design/babel-plugin-import">babel-plugin-import</a> 是一个用于按需加载组件代码和样式的 babel 插件（<a href="https://ant.design/docs/react/getting-started-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD">原理</a>），现在我们尝试安装它并修改 config-overrides.js 文件</p></blockquote><blockquote><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-<span class="keyword">import</span> --save-dev</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>修改config-overrides.js 文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">    libraryName: <span class="string">&#x27;antd-mobile&#x27;</span>,</span><br><span class="line">    style: <span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-5、-更改使用方式"><a href="#2-5、-更改使用方式" class="headerlink" title="2.5、 更改使用方式"></a>2.5、 更改使用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&#x27;antd-mobile&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3、-自定义主题"><a href="#3、-自定义主题" class="headerlink" title="3、 自定义主题"></a>3、 自定义主题</h2><p><img src="http://www.blog.image.qcwy.org.cn/article/react/ntd-theme/2.webp" alt="image.png"></p><blockquote><p>antd-mobile 的样式使用了 <a href="http://lesscss.org/">Less</a> 作为开发语言，并定义了一系列全局/组件的样式变量，你可以根据需求进行相应调整。<br>使用 <a href="http://lesscss.org/usage/#using-less-in-the-browser-modify-variables">modifyVars</a> 的方式来覆盖变量。</p></blockquote><blockquote><p>这个过程中，出现了很多错误，踩了很多坑，才解决问题的。这也是写这篇博客的原因所在。由于是解决问题后才写的这篇博客，又不想浪费时间重现过程中遇到的错误。所以，这里只写正确解决问题的所有过程。</p></blockquote><h3 id="3-1、下载依赖"><a href="#3-1、下载依赖" class="headerlink" title="3.1、下载依赖"></a>3.1、下载依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-<span class="keyword">import</span> less less-loader style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：下面配置webpack的方式不是唯一，可以在根目录下创建webpack配置文件覆盖默认的配置。</p></blockquote><h3 id="3-2、生成config的所有文件"><a href="#3-2、生成config的所有文件" class="headerlink" title="3.2、生成config的所有文件"></a>3.2、生成config的所有文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn eject  <span class="comment">// 生成 config 和scripts文件夹</span></span><br></pre></td></tr></table></figure><h3 id="3-3、配置webpack文件，路径在config-webpack-config-js"><a href="#3-3、配置webpack文件，路径在config-webpack-config-js" class="headerlink" title="3.3、配置webpack文件，路径在config/webpack.config.js"></a>3.3、配置webpack文件，路径在config/webpack.config.js</h3><blockquote><p>添加lessRegex、lessModuleRegex</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加的常量代码</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br></pre></td></tr></table></figure><blockquote><p>复制sass-loader的配置替换为less-loader的配置复制在oneOf下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">oneOf:[</span><br><span class="line">        xxx,</span><br><span class="line">            &#123;</span><br><span class="line">              test: lessRegex,</span><br><span class="line">              exclude: lessModuleRegex,</span><br><span class="line">              use: getStyleLoaders(</span><br><span class="line">                &#123;</span><br><span class="line">                  importLoaders: <span class="number">3</span>,</span><br><span class="line">                  sourceMap: isEnvProduction</span><br><span class="line">                    ? shouldUseSourceMap</span><br><span class="line">                    : isEnvDevelopment</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">              ),</span><br><span class="line">              sideEffects: <span class="literal">true</span></span><br><span class="line">            &#125;,            &#123;</span><br><span class="line">              test: lessModuleRegex,</span><br><span class="line">              use: getStyleLoaders(</span><br><span class="line">                &#123;</span><br><span class="line">                  importLoaders: <span class="number">3</span>,</span><br><span class="line">                  sourceMap: isEnvProduction</span><br><span class="line">                    ? shouldUseSourceMap</span><br><span class="line">                    : isEnvDevelopment,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  getLocalIdent: getCSSModuleLocalIdent</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">              )</span><br><span class="line">            &#125;,</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><h3 id="3-3、src下创建theme文件下以及antd-theme-json文件用于创建主题样式"><a href="#3-3、src下创建theme文件下以及antd-theme-json文件用于创建主题样式" class="headerlink" title="3.3、src下创建theme文件下以及antd-theme.json文件用于创建主题样式"></a>3.3、src下创建theme文件下以及antd-theme.json文件用于创建主题样式</h3><p><img src="http://www.blog.image.qcwy.org.cn/article/react/ntd-theme/3.webp" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@brand-primary&quot;</span>: <span class="string">&quot;#ff5722&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@brand-primary-tap&quot;</span>: <span class="string">&quot;#ffccbc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@color-text-base-inverse&quot;</span>: <span class="string">&quot;#3f51b5&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、配置覆盖默认主题"><a href="#3-4、配置覆盖默认主题" class="headerlink" title="3.4、配置覆盖默认主题"></a>3.4、配置覆盖默认主题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports, addLessLoader &#125; = <span class="built_in">require</span>(<span class="string">&quot;customize-cra&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> theme = <span class="built_in">require</span>(<span class="string">&quot;./src/theme/antd-theme.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">  fixBabelImports(<span class="string">&quot;import&quot;</span>, &#123;</span><br><span class="line">    libraryName: <span class="string">&quot;antd-mobile&quot;</span>,</span><br><span class="line">    libraryDirectory: <span class="string">&quot;es&quot;</span>,</span><br><span class="line">    style: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  addLessLoader(&#123;</span><br><span class="line">    lessOptions: &#123;</span><br><span class="line">      javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">      modifyVars: theme,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>到此，就配置完了，那么让我们来看下效果吧！</p></blockquote><h2 id="4、效果"><a href="#4、效果" class="headerlink" title="4、效果"></a>4、效果</h2><p><img src="http://www.blog.image.qcwy.org.cn/article/react/ntd-theme/4.webp" alt="image.png"></p><p>原创文章：转载请联系我。未经允许，禁止转载。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css 取值于单位</title>
      <link href="2020/08/27/css/unit/"/>
      <url>2020/08/27/css/unit/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Css-的长度"><a href="#1、Css-的长度" class="headerlink" title="1、Css 的长度"></a>1、Css 的长度</h2><blockquote><p><number>+长度单位</p><ul><li>特殊值0可以省略单位。例如：margin:0px可以写成margin:0</li><li>一些属性可能允许有负长度值，或者有一定的范围限制。如果不支持负长度值，那应该变换到能够被支持的最近的一个长度值。</li><li>长度单位包括包括：相对单位和绝对单位。</li><li>相对长度单位包括有：em、ex、ch、rem、vw、vh、vmax、vmin、</li><li>绝对长度单位包括有：cm、mm、q、in、pt、pc、px</li></ul></blockquote><h3 id="1-1、em"><a href="#1-1、em" class="headerlink" title="1.1、em"></a>1.1、em</h3><blockquote><p>概念：</p><ul><li> 相对长度单位。相对于当前对象内文本的字体尺寸。</li><li>如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸  </li></ul></blockquote><h3 id="1-2、-ex"><a href="#1-2、-ex" class="headerlink" title="1.2、 ex"></a>1.2、 ex</h3><blockquote><p>概念：</p><ul><li>相对长度单位，相对于字符“x”的高度。通常为字体高度的一半。</li><li>如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</li></ul></blockquote><h3 id="1-3、-ch"><a href="#1-3、-ch" class="headerlink" title="1.3、 ch"></a>1.3、 ch</h3><blockquote><p>概念：</p><ul><li>数字“0”的宽度</li></ul></blockquote><h3 id="1-4、-rem"><a href="#1-4、-rem" class="headerlink" title="1.4、 rem"></a>1.4、 rem</h3><blockquote><p>概念：</p><ul><li>相对长度单位，相对于根元素(即html元素)font-size计算值的倍数</li></ul></blockquote><h3 id="1-4、vw"><a href="#1-4、vw" class="headerlink" title="1.4、vw"></a>1.4、vw</h3><blockquote><p>概念：</p><ul><li>相对于视口的宽度，视口被均分为100单位的vw</li></ul></blockquote><h3 id="1-5、-vh"><a href="#1-5、-vh" class="headerlink" title="1.5、 vh"></a>1.5、 vh</h3><blockquote><p>概念：</p><ul><li>相对于视口的高度。视口被均分为100单位的vh</li></ul></blockquote><h3 id="1-6、-vmax"><a href="#1-6、-vmax" class="headerlink" title="1.6、 vmax"></a>1.6、 vmax</h3><blockquote><p>概念：</p><ul><li>相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax</li></ul></blockquote><h3 id="1-7、-vmin"><a href="#1-7、-vmin" class="headerlink" title="1.7、 vmin"></a>1.7、 vmin</h3><blockquote><p>概念：</p><ul><li>相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin</li></ul></blockquote><h3 id="1-8、-cm"><a href="#1-8、-cm" class="headerlink" title="1.8、 cm"></a>1.8、 cm</h3><blockquote><p>概念:</p><ul><li>厘米（Centimeters），绝对长度单位</li><li>1in = 2.54cm = 25.4 mm = 101.6q = 72pt = 6pc = 96px</li></ul></blockquote><h3 id="1-9、-mm"><a href="#1-9、-mm" class="headerlink" title="1.9、 mm"></a>1.9、 mm</h3><blockquote><p>概念：</p><ul><li>毫米（Millimeters），绝对长度单位。</li><li>1in = 2.54cm = 25.4 mm = 101.6q = 72pt = 6pc = 96px</li></ul></blockquote><h3 id="1-10、-q"><a href="#1-10、-q" class="headerlink" title="1.10、 q"></a>1.10、 q</h3><blockquote><p>概念：</p><ul><li>1/4毫米（quarter-millimeters），绝对长度单位</li></ul></blockquote><h3 id="1-11、-in"><a href="#1-11、-in" class="headerlink" title="1.11、 in"></a>1.11、 in</h3><blockquote><p>概念：</p><ul><li>英寸（Inches)，绝对长度单位</li></ul></blockquote><h3 id="1-12、-pt"><a href="#1-12、-pt" class="headerlink" title="1.12、 pt"></a>1.12、 pt</h3><blockquote><p>概念：</p><ul><li>点（Points），绝对长度单位</li></ul></blockquote><h3 id="1-13、-pc"><a href="#1-13、-pc" class="headerlink" title="1.13、 pc"></a>1.13、 pc</h3><blockquote><p>概念：</p><ul><li>派卡（Picas），绝对长度单位。相当于我国新四号铅字的尺</li></ul></blockquote><h3 id="1-14、-px"><a href="#1-14、-px" class="headerlink" title="1.14、 px"></a>1.14、 px</h3><blockquote><p>概念：</p><ul><li>相对长度单位，像素（Pixels)</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css常用特效</title>
      <link href="2020/08/20/css/effect/"/>
      <url>2020/08/20/css/effect/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文主要记录的是一些css的特效，一些在日常开发中使用到的css效果，记录在此，方便日后用到的时候直接拿来使用。<br>当然，很多都是在网上看到的效果，自己根据效果实现的。也会有一些是抄的。不论怎样，目的只为学习。如侵犯了您的权益，请告知！必定立即删除。</p></blockquote><h1 id="1-按钮系列"><a href="#1-按钮系列" class="headerlink" title="1.按钮系列"></a>1.按钮系列</h1><h2 id="1-1、-霓虹特效"><a href="#1-1、-霓虹特效" class="headerlink" title="1.1、 霓虹特效"></a>1.1、 霓虹特效</h2><blockquote><p>先看效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/1.webp" alt="image.png"></p></blockquote><blockquote><p><a href="https://codepen.io/GYjcode/pen/LYNRadx">查看效果</a></p></blockquote><blockquote><p>颜色值</p><ul><li>主题色：#031628</li><li>按钮一的颜色： #4cc9f0</li><li>按钮二的颜色： #f038ff</li><li>按钮三的颜色： #b9e769</li></ul></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn one&quot;</span>&gt;</span>Hover one<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn two&quot;</span>&gt;</span>Hover two<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn three&quot;</span>&gt;</span>Hover three<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.base-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#031628</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4cc9f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#4cc9f0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4cc9f0</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">76</span>, <span class="number">201</span>, <span class="number">240</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">76</span>, <span class="number">201</span>, <span class="number">240</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">76</span>, <span class="number">201</span>, <span class="number">240</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">240</span>, <span class="number">56</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">240</span>, <span class="number">56</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">240</span>, <span class="number">56</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b9e769</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#b9e769</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b9e769</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">185</span>, <span class="number">231</span>, <span class="number">105</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">185</span>, <span class="number">231</span>, <span class="number">105</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">99px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">185</span>, <span class="number">231</span>, <span class="number">105</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2、-跑马灯边框"><a href="#1-2、-跑马灯边框" class="headerlink" title="1.2、 跑马灯边框"></a>1.2、 跑马灯边框</h2><blockquote><p>由于本人暂时不会制作gif图，所以只能先使用静态图</p></blockquote><blockquote><p>效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/2.webp" alt="image.png"><br><a href="https://codepen.io/GYjcode/pen/wvGzOrx">CodePen查看效果</a></p></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#031628</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid transparent;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease-out, height <span class="number">0.3s</span> ease-out <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#f038ff</span>;</span><br><span class="line">  <span class="attribute">transition</span>: border-color <span class="number">0s</span> ease-out <span class="number">0.6s</span>, width <span class="number">0.3s</span> ease-out <span class="number">0.6s</span>,</span><br><span class="line">    height <span class="number">0.3s</span> ease-out <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3、-圆角过度"><a href="#1-3、-圆角过度" class="headerlink" title="1.3、 圆角过度"></a>1.3、 圆角过度</h2><blockquote><p>效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/3.webp" alt="image.png"><br><a href="%5Bhttps://codepen.io/GYjcode/pen/rNeMbNL%5D(https://codepen.io/GYjcode/pen/rNeMbNL)">查看效果</a></p></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圆角变换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border-btn&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#031628</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2ec4b6</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition</span>: border-radius <span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: border-radius <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4、-冰冻特效"><a href="#1-4、-冰冻特效" class="headerlink" title="1.4、 冰冻特效"></a>1.4、 冰冻特效</h2><blockquote><p>效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/4.webp" alt="image.png"><br><a href="%5Bhttps://codepen.io/GYjcode/pen/XWdjQXN%5D(https://codepen.io/GYjcode/pen/XWdjQXN)">查看效果</a></p></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frozen-btn&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;purple&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.frozen-btn</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#031628</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">button</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: bold;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">button</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">          to left,</span><br><span class="line">          rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">50%</span>,</span><br><span class="line">          <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span></span><br><span class="line">        );</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">210%</span> <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-position</span>: right bottom;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">        <span class="attribute">-webkit-transition</span>: all <span class="number">1s</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.green</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #<span class="number">25</span>aae1, #<span class="number">40</span>e495);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">15px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">49</span>, <span class="number">196</span>, <span class="number">190</span>, <span class="number">0.75</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.purple</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #<span class="number">6253</span>e1, #<span class="number">852</span>d91);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">15px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">236</span>, <span class="number">116</span>, <span class="number">149</span>, <span class="number">0.75</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.purple</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: left bottom;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.green</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: left bottom;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="1-5、-闪电特效"><a href="#1-5、-闪电特效" class="headerlink" title="1.5、 闪电特效"></a>1.5、 闪电特效</h2><blockquote><p>效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/5.webp" alt="image.png"><br><a href="%5Bhttps://codepen.io/GYjcode/pen/bGpwJeP%5D(https://codepen.io/GYjcode/pen/bGpwJeP)">查看效果</a></p></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>按钮闪电特效<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shiny-shadow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shiny-shadow</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#031628</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">125px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">120%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">600ms</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">1</span>, <span class="number">0.2</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">600ms</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.3</span>, <span class="number">1</span>, <span class="number">0.2</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6、-加载特效"><a href="#1-6、-加载特效" class="headerlink" title="1.6、 加载特效"></a>1.6、 加载特效</h2><blockquote><p>效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/6.webp" alt="image.png"><br><a href="%5Bhttps://codepen.io/GYjcode/pen/vYGXMxz%5D(https://codepen.io/GYjcode/pen/vYGXMxz)">查看效果</a></p></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>加载特效<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#031628</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, -<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff5964</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#ff0036</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff5964</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">mix-blend-mode</span>: darken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>[原文链接](blog.duomly.com/html-button-hover-effects/)</code><br>  <strong>华丽的分割线</strong></p><h1 id="2、卡片系列"><a href="#2、卡片系列" class="headerlink" title="2、卡片系列"></a>2、卡片系列</h1><h2 id="2-1、经典卡片"><a href="#2-1、经典卡片" class="headerlink" title="2.1、经典卡片"></a>2.1、经典卡片</h2><blockquote><p>效果图<br><img src="http://www.blog.image.qcwy.org.cn/article/css/effect/7.webp" alt="image.png"><br><a href="https://codepen.io/GYjcode/pen/oNxYYrg">查看效果</a></p></blockquote><blockquote><p>Html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    我是卡片</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Css 代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f7f8fa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> <span class="number">#ebedf0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>色调平衡</title>
      <link href="2020/08/18/ui/peise/tonal_balance/"/>
      <url>2020/08/18/ui/peise/tonal_balance/</url>
      
        <content type="html"><![CDATA[<h2 id="色调平衡"><a href="#色调平衡" class="headerlink" title="色调平衡"></a>色调平衡</h2><blockquote><p>色彩三要素 HSB：色相，饱和度，明度<br>饱和度和明度决定色调<br>七个色调：纯色调 刺激直接活力 廉价<br>明色调 明朗干净阳光 廉价<br>淡色调 天真女性纤细高档 单薄软弱<br>白色调 文艺干净高档 无趣单调<br>灰色调 成熟稳重 脏<br>暗色调 品质力量厚重古典高档 阴暗危险<br>色调之间平衡，平衡各色调之间优点与缺点<br>深浅平衡，每个颜色都有自己的重量，轻重平衡形成对比才能看清有重点<br>冷暖平衡，红橙黄暖，蓝冷，绿紫中性<br>互补平衡，色环互补色的使用<br>花色与纯色的平衡<br>有彩色和无彩色的平衡<br>面积平衡 主色百分之七十，辅助色百分之二十五，点缀色百分之五</p></blockquote><p>日常学习随笔</p>]]></content>
      
      
      <categories>
          
          <category> ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>safair下input获取焦点时fixed失效</title>
      <link href="2020/08/12/js/input-fixed/"/>
      <url>2020/08/12/js/input-fixed/</url>
      
        <content type="html"><![CDATA[<h2 id="1、fixed-失效的原因"><a href="#1、fixed-失效的原因" class="headerlink" title="1、fixed 失效的原因"></a>1、fixed 失效的原因</h2><blockquote><p>在 safair 下，当 input 获取焦点当时候，页面内设置当 fixed 固定定位会失效。为自己记录一下产生问题当原因，以便以后查阅。</p></blockquote><h2 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h2><blockquote><p>根据不同当场景，使用不同当方法。如果 fixed 在顶部可以不做处理，因为本身 input 获取焦点就是在操作 input、如果是在底部，可以设置整体为绝对定位，占全屏，Y 轴超出滚动。还有一种稍微通用当方法就是，操作 dom。在获取 input 焦点的时候，获取滚动距离，设置固定定位为绝对定位，计算出合适当距离，在失去焦点当时候，恢复为固定定位。</p></blockquote><p>随笔</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios移动端，js时间操作getTime(),getFullYear()等返回显示NaN的解决</title>
      <link href="2020/08/12/js/ios-android-time/"/>
      <url>2020/08/12/js/ios-android-time/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020下半年——目标</title>
      <link href="2020/08/06/other/target-2020/"/>
      <url>2020/08/06/other/target-2020/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote><p>对于自己的学习和成长，不断的制定目标。并完成目标<br>成长自己，随着时间的增长，慢慢的熟悉这个社会<br>终于明白，社会是有多么的残酷，人要有立足之本<br>以自己的爱好，自己喜欢的事为基础，打造自己的只是体系<br>成长自己，充实自己，为了自己想要的努力，在学习中充实自己<br><strong>Dream it possible</strong>  总有一天我可以活出真实的自己<br>曾经，我年少轻狂。如今，只能为此买单。回头一看，全是活该！</p></blockquote><h2 id="2、2020年下半年目标"><a href="#2、2020年下半年目标" class="headerlink" title="2、2020年下半年目标"></a>2、2020年下半年目标</h2><blockquote><ol><li>8月份 —— 做一个自己的小程序，先自己模拟数据，不接入后台。</li><li>9月份 —— 专攻 政治、高数、英语。</li><li>10月份 —— 搞定flutter，做一个自己的app，可以先不接入后台数据，先mock数据</li><li>11月份 —— 学习react基础知识。</li><li>12月份 —— 重新学习react，做一个自己的pc博客，可以先不接入后台数据，先mock数据</li></ol></blockquote><h2 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h2><blockquote><p>每天写一篇博客，为自己做笔记，也为以后遇到相同的问题的时候能够快速的查阅</p></blockquote><h2 id="2020年计划"><a href="#2020年计划" class="headerlink" title="2020年计划"></a>2020年计划</h2><blockquote><p>以前荒废的太多了，浪费了太多的时间。今年搞定多端，明年开始学习底层，开发组件以及工具</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Mac环境配置 创建项目</title>
      <link href="2020/08/05/flutter/ambient/"/>
      <url>2020/08/05/flutter/ambient/</url>
      
        <content type="html"><![CDATA[<h2 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h2><blockquote><p>最近开始学习 flutter 开发 app 了, 然而学习之前要安装搭建开发环境。</p></blockquote><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><blockquote><p>官网<a href="https://flutterchina.club/setup-macos/">https://flutterchina.club/setup-macos/</a><br>首先先下载 flutter 包，下载开发工具等等。<br>其次就是配置环境，因为 flutter 并不像 node.js 那样，安装上就直接配置到环境变量了。flutter 需要自己去配置。具体到配置，可以看上面到官网。这里只记录自己开配置过程中遇到到一些问题，记录一下。</p></blockquote><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><blockquote><p>1、在下载好 flutter 包以后，进行解压，然后把解压后到文件放在你想要按装的位置<br>2、使用 linux 的编辑器工具 vim</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="regexp">/.bash_profile  /</span><span class="regexp">/使用vim编辑器编写.bash_profile</span></span><br></pre></td></tr></table></figure><blockquote><p>3、在打开 vim 编辑器后，按<strong>i</strong>进入编辑模式，输入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH=<span class="regexp">/你的flutter文件夹所在位置/</span>flutter/bin:$PATH</span><br></pre></td></tr></table></figure><blockquote><p>4、输入完成后按<strong>esc</strong>进行退出，输入** ：wq<strong>进行保存退出。这个时候你可能会遇到一个错误（没有截图），就是说</strong>文件只读<strong>，这时强制保存退出就好了。执行</strong>:wq!**进行强制退出保存<br>5、执行命令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><blockquote><p>6、此时 flutter 就配置完成了！但是在你运行 flutter -h 的时候，可能会遇到一个问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Waiting <span class="keyword">for</span> another flutter command to release the startup lock...</span><br></pre></td></tr></table></figure><p>遇到这个问题的话，解决方案如下：</p><blockquote><p>1、关闭 Android Studio<br>2、打开 flutter 安装目录/bin/cache<br>3、删除 lockfile 文件<br>4、此时可在命令行再执行 flutter 相关命令</p></blockquote><p>完美解决</p><blockquote><p>7、此时执行 flutter -h 会打印出 flutter 的相关信息<br>8、执行 flutter doctor 检查环境，如果有错误，根据提示执行就可以了！<br><img src="https://upload-images.jianshu.io/upload_images/23925307-b41e8ffad257e328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote><blockquote><p>8、可以看到还有报错，所以，根据提示执行命令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/23925307-42610f06cea2dc9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>此时环境就配置完成喽！</p><h2 id="4、创建项目"><a href="#4、创建项目" class="headerlink" title="4、创建项目"></a>4、创建项目</h2><blockquote><p>1、配置项目完成后，开始创建项目，打开 android studio<br><img src="https://upload-images.jianshu.io/upload_images/23925307-2af8bbb6790e3811.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2、点击创建 flutter 项目<br><img src="https://upload-images.jianshu.io/upload_images/23925307-0692aa96510da6ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3、注意：这里 android studio 配置省略了，没有写，因为太简单，根据官网文档提示做就好了！</p></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之图形结构</title>
      <link href="2020/07/27/sjjgysf/sjjgysf-figure/"/>
      <url>2020/07/27/sjjgysf/sjjgysf-figure/</url>
      
        <content type="html"><![CDATA[<h1 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h1><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-figure/graph-1.png" alt="graph-1"></p><p>图结构中，一个结点可以链接到<strong>任意</strong>结点，所有结点链接而成的结构，即为图结构</p><p>图结构中的链接可以是有向的，也可以是无向的（双向链接），本文仅讨论双向链接</p><p>树结构是一种特殊的图结构</p><p>图结构没有根，可以有环，但是在一个图结构中，不能存在两个或以上的孤立结点</p><p>可以使用图中任何一个结点表示整个图结构</p><p>图结构是一种常见的数据结构，例如网络爬虫抓取的网页就是一种典型的图结构</p><p>图结构的代码可表示为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.neighbors = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关算法"><a href="#相关算法" class="headerlink" title="相关算法"></a>相关算法</h1><ol><li><p>查询算法</p><p>和树结构一样，图结构的查询也可以分为深度优先（Depth First Search）和广度优先(Breadth First Search)查询</p></li><li><p>最小生成树算法</p><p>如果一个图中结点连接而成的边具备某种数值，需要将这些边进行精简，生成一个连接全节点同时总边长最小的树结构，该树称之为最小生成树</p><p>实现最小生成树可以使用Prim算法，从任意一个点出发，连接到该点最短的点，组成一个部落，然后继续连接到该部落最短的点，直到把所有点连接完成</p></li></ol><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 图形结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在职专升本高等数学公式</title>
      <link href="2020/07/27/other/zsb-math-gs/"/>
      <url>2020/07/27/other/zsb-math-gs/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote><p>本文所有内容均为图片，本文所有内容来自网络，本文所有内容只为方便本人学习使用。如若侵犯了您的版权，请联系我，本人会在第一时间删除本文章。如若对您造成了不便，敬请见谅。</p></blockquote><h2 id="2、公式内容"><a href="#2、公式内容" class="headerlink" title="2、公式内容"></a>2、公式内容</h2><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-1.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-2.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-3.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-4.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-5.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-6.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-7.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-8.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-9.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-10.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-11.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-12.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-13.png" alt="math-1"></p><p><img src="http://www.blog.image.qcwy.org.cn/old/zsb-math-gs/math-14.png" alt="math-1"></p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之树形结构</title>
      <link href="2020/07/26/sjjgysf/sjjgysf-tree/"/>
      <url>2020/07/26/sjjgysf/sjjgysf-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树是一个类似于链表的二维结构，每个节点可以指向0个或多个其他节点</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-tree/tree-1.png" alt="tree-1"></p><p>树具有以下特点：</p><ol><li>单根：如果一个节点A指向了另一个节点B，仅能通过A直接找到B节点，不可能通过其他节点直接找到B节点</li><li>无环：节点的指向不能形成环</li></ol><p>树的术语：</p><ol><li>结点的度：某个节点的度 = 该节点子节点的数量</li><li>树的度：一棵树中，最大的节点的度为该树的度</li><li>结点的层：从根开始定义起，根为第1层，根的子结点为第2层，以此类推；</li><li>树的高度或深度：树中结点的最大层次</li><li>叶子节点：度为0的结点称为叶结点；</li><li>分支节点：非叶子节点</li><li>子节点、父节点：相对概念，如果A节点有一个子节点B，则A是B的父节点，B是A的子节点</li><li>兄弟节点：如果两个节点有同一个父节点，则它们互为兄弟节点</li><li>祖先节点：某个节点的祖先节点，是从树的根到该节点本身经过的所有节点</li><li>后代节点：如果A是B的祖先节点，B则是A的后代节点</li></ol><p>树的代码表示法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.children = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>如果一颗树的度为2，则该树是二叉树</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-tree/tree-2.png" alt="tree-2"></p><p>二叉树可以用下面的代码表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的相关算法"><a href="#二叉树的相关算法" class="headerlink" title="二叉树的相关算法"></a>二叉树的相关算法</h2><p>编写各种函数，实现下面的功能</p><ol><li>对二叉树遍历打印<ol><li>前(先)序遍历 DLR</li><li>中序遍历 LDR</li><li>后序遍历 LRD</li></ol></li><li>根据前序遍历和中序遍历结果，得到一颗二叉树</li><li>计算树的深度</li><li>查询二叉树 <ol><li>深度优先 Depth First Search</li><li>广度优先 Breadth First Search</li></ol></li><li>比较两棵二叉树，得到它们的差异，diff 算法</li></ol><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 树形结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之排序和查找</title>
      <link href="2020/07/25/sjjgysf/sjjgysf-sort/"/>
      <url>2020/07/25/sjjgysf/sjjgysf-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><ol><li><p><strong>选择排序 Selection Sort</strong></p><p>一次选择排序，可以将某个区间的最小值排列到该区域的第一位，具体过程是：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-sort/sort-1.png" alt="sort-1"></p></li><li><p><strong>冒泡排序 Bubble Sort</strong></p><p>一次冒泡排序，可以将某个区域序列的最大值排序到该区域的最后一位，具体过程是：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-sort/sort-2.png" alt="sort-2"></p></li><li><p><strong>快速排序 Quick Sort</strong></p><p>选择一个数（比如序列的最后一位）作为基准数，将整个序列排序成两部分，一部分比该数小，另一部分比该数大，基准数在中间，然后对剩余的序列做同样的事情，直到排序完成</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-sort/sort-4.png" alt="sort-4"></p></li></ol><h1 id="查询算法"><a href="#查询算法" class="headerlink" title="查询算法"></a>查询算法</h1><ol><li><p><strong>顺序查找 Inorder Search</strong></p><p>即普通的遍历，属于算法的穷举法，没啥好解释的</p></li><li><p><strong>二分查找 Binary Search</strong></p><p>如果一个序列是一个排序好的序列，则使用二分查找可以极大的缩短查找时间</p><p>具体的做法是：</p><p>查找该序列中间未知的数据</p><ol><li>相等，找到</li><li>要找的数据较大，则对后续部分的数据做同样的步骤</li><li>要找的数据较小，则对前面部分的数据做同样的步骤</li></ol></li><li><p><strong>插值查找 Interpolation Search</strong></p><p>插值查找是对二分查找的进一步改进</p><p>如果序列不仅是一个排序好的序列，而且序列的步长大致相同，使用插值查找会更快的找到目标。</p><p>插值查找基于如下假设：下标之间的距离比和数据之间的距离比大致相同</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-sort/sort-5.png" alt="sort-5"></p><p>于是有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(target - a) &#x2F; (g - a) ≈ (mid - minIndex) &#x2F; (maxIndex - minIndex)</span><br></pre></td></tr></table></figure><p>从而有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid ≈ (target - a) &#x2F; (g - a) * (maxIndex - minIndex) + minIndex</span><br></pre></td></tr></table></figure></li></ol><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 排序和查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之线性结构</title>
      <link href="2020/07/24/sjjgysf/sjjgysf-line/"/>
      <url>2020/07/24/sjjgysf/sjjgysf-line/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>什么是数据结构？</strong></p><p>用于表示数据关系的结构</p><p>常见的数据结构有：数组、链表、树、图等</p></li><li><p><strong>什么是算法？</strong></p><p>根据已知数据得到结果数据的计算方法</p><p>常见的算法有：穷举法、分治法、贪心算法、动态规划</p></li><li><p><strong>数据结构和算法有什么关系？</strong></p><p>数据结构关心的是如何使用合适的结构存储数据</p><p>算法关心的是计算过程</p><p>有了相应的数据结构，免不了对这种数据结构的各种变化进行运算，所以，很多时候，某种数据结构都会自然而然的搭配不少算法。</p></li><li><p><strong>数据结构和算法课程使用什么计算机语言？</strong></p><p>数据结构和算法属于计算机基础课程，<strong>它们和具体的语言无关</strong>，用任何语言都可以实现。</p><p>本课程采用JavaScript语言。</p></li></ol><h2 id="递归知识回顾"><a href="#递归知识回顾" class="headerlink" title="递归知识回顾"></a>递归知识回顾</h2><p>递归（recursion）是<strong>函数式编程思想</strong>的产物，它使用数学函数的思想进行运算，只要在数学逻辑上是合理的，即代码中的函数一定合理</p><p><strong>使用递归时，无须深究其运行过程！</strong></p><blockquote><p>斐波拉契数列的特点是：第1位和第2位固定为1，后面的位，其数字等于前两位之和，比如：</p><p>[1, 1, 2, 3, 5, 8, 13, 21, ……]</p><p>求斐波拉契数列第n位的值，n&gt;0</p><p>如果使用函数<code>f(n)</code>来表示斐波拉契数列第n位的值，通过数学分析，可以轻松得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(1) &#x3D; 1</span><br><span class="line">f(2) &#x3D; 1</span><br><span class="line">f(n) &#x3D; f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure><p>以上等式考虑到了所有情况，并且在数学逻辑上是合理的，因此，可以轻松书写到代码中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求斐波拉契数列第n位的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">n === <span class="number">1</span> || n === <span class="number">2</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>线性结构是数据结构中的一种分类，用于表示一系列的元素形成的有序集合。</p><p>常见的线性结构包括：数组、链表、栈、队列</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>特别注意：这里所说的数组是数据结构中的数组，和JS中的数组不一样</p></blockquote><p><strong>数组是一整块连续的内存空间，它由固定数量的元素组成，数组具有以下基本特征：</strong></p><ol><li><p>整个数组占用的内存空间是连续的</p></li><li><p>数组中元素的数量是固定的（不可增加也不可减少），创建数组时就必须指定其长度</p></li><li><p>每个元素占用的内存大小是完全一样的<br><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-line/line-1.png" alt="image.png"></p></li></ol><p>根据数组的基本特征，我们可以推导出<strong>数组具有以下特点</strong>：</p><ol><li>通过下标寻找对应的元素效率极高，因此遍历速度快</li><li>无法添加和删除数据，虽然可以通过某种算法完成类似操作，但会增加额外的内存开销或时间开销</li><li>如果数组需要的空间很大，可能一时无法找到足够大的连续内存</li></ol><p><strong>JS中的数组</strong></p><p>在ES6之前，JS没有真正意义的数组，所谓的Array，实际上是一个对象。</p><p>ES6之后，出现真正的数组（类型化数组），但是由于只能存储数字，因此功能有限</p><p>目前来讲，JS语言只具备不完善的数组（类型化数组）</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>为弥补数组的缺陷而出现的一种数据结构，<strong>它具有以下基本特征</strong>：</p><ol><li><p>每个元素除了存储数据，需要有额外的内存存储一个引用（地址），来指向下一个元素</p></li><li><p>每个元素占用的内存空间并不要求是连续的</p></li><li><p>往往使用链表的第一个节点（根节点）来代表整个链表</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-line/line-2.png" alt="image-20200724152732227"></p></li></ol><p>根据链表的基本特征，我们可以推导出<strong>它具有以下特点</strong>：</p><ol><li>长度是可变的，随时可以增加和删除元素</li><li>插入和删除元素的效率极高</li><li>由于要存储下一个元素的地址，会增加额外的内存开销</li><li>通过下标查询链表中的某个节点，效率很低，因此链表的下标遍历效率低</li></ol><p><strong>手动用代码实现链表</strong></p><p>实际上，很多语言本身已经实现了链表，但链表作为一种基础的数据结构，通过手写代码实现链表，不仅可以锻炼程序思维和代码转换能力，对于后序的复杂数据结构的学习也是非常有帮助的。</p><p>因此，手写链表是学习数据结构和算法的一门基本功</p><p>手写一个链表结构，并<strong>完成一些链表的相关函数</strong>，要实现以下功能：</p><p>创建一个构造函数，用来创建Node节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建node节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 要创建node节点的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.value = value;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Node(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Node(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Node(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Node(<span class="string">&quot;D&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> Node(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">a.next = b;</span><br><span class="line">b.next = c;</span><br><span class="line">c.next = d;</span><br><span class="line">d.next = e;</span><br></pre></td></tr></table></figure><p>​    <strong>注意：    一下所有的例子创建node节点都是以此构造函数生成</strong>，并创建一个链表。</p><ol><li><p>遍历打印</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历打印整个链表的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(node.value);</span><br><span class="line">  <span class="keyword">if</span> (node.next) print(node.next);</span><br><span class="line">&#125;</span><br><span class="line">print(a);</span><br></pre></td></tr></table></figure><blockquote><p>打印出的值为ABCDE</p><p><img src="http://www.blog.image.qcwy.org.cn/old/sjjgysf-line/line-3.png" alt="line-3.png"></p></blockquote></li><li><p>获取链表的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取链表的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + getLength(node.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getLength(a));</span><br></pre></td></tr></table></figure><blockquote><p>打印结果是5</p></blockquote></li><li><p>通过下标获取链表中的某个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过下标  获取链表中的某个数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index  下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectValue</span>(<span class="params">node, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 辅助函数 通过判断当前下标和要查找的下标是否相等来查找值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index  要查找的值的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>curIndex  当前的索引值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_selectValue</span>(<span class="params">node, index, curIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;超出界限&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === curIndex) <span class="keyword">return</span> node.value;</span><br><span class="line">    curIndex++;</span><br><span class="line">    <span class="keyword">return</span> _selectValue(node.next, index, curIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _selectValue(node, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(selectValue(a, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><blockquote><p>输出结果是<strong>C</strong></p></blockquote></li><li><p>通过下标设置链表中的某个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过下标设置（修改）链表中的某个数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index  要修改的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value  要修改为的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setNode</span>(<span class="params">node, index, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodes = node;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 辅助函数  通过判断当前下标和要查找的下标是否相等来修改值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node 当前的链表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index 要修改的索引</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>curIndex 当前的索引值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_setNode</span>(<span class="params">node, index, curIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;数据错误&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === curIndex) &#123;</span><br><span class="line">      node.value = value;</span><br><span class="line">      <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">    curIndex++;</span><br><span class="line">    <span class="keyword">return</span> _setNode(node.next, index, curIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _setNode(node, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setNode(a, <span class="number">3</span>, <span class="string">&quot;k&quot;</span>));Node &#123;<span class="attr">value</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">next</span>: Node&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印的数据</span></span><br><span class="line">next: Node</span><br><span class="line">next: Node</span><br><span class="line">next: Node</span><br><span class="line">next: Node</span><br><span class="line">next: <span class="literal">null</span></span><br><span class="line">value: <span class="string">&quot;E&quot;</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br><span class="line">value: <span class="string">&quot;k&quot;</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br><span class="line">value: <span class="string">&quot;C&quot;</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br><span class="line">value: <span class="string">&quot;B&quot;</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br><span class="line">value: <span class="string">&quot;A&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在链表末尾加入一个新节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表末尾加入一个新节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>pushValue  要加入的新值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushNode</span>(<span class="params">node, pushValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node.next) &#123;</span><br><span class="line">    <span class="keyword">return</span> pushNode(node.next, pushValue);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="keyword">new</span> Node(pushValue);</span><br><span class="line">    <span class="keyword">return</span> (node.next = w);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(pushNode(a, <span class="string">&quot;w&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>在链表某一个节点之后加入一个新节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的某一个节点以后加入一个新的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>beforeNode </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertNode</span>(<span class="params">node, beforeNode, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node === beforeNode) &#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(value);</span><br><span class="line">    newNode.next = node.next;</span><br><span class="line">    node.next = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> insertNode(node.next, beforeNode, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertNode(a, b, <span class="string">&quot;l&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li><li><p>删除一个链表节点</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除一个链表的某一个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>deleteValue </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteNode</span>(<span class="params">node, deleteValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;数据错误&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (node.next === deleteValue) &#123;</span><br><span class="line">    node.next = deleteValue.next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    deleteNode(node.next, deleteValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deleteNode(a, c);</span><br><span class="line">print(a)<span class="comment">//A B l k E w</span></span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建node节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 要创建node节点的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.value = value;</span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Node(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Node(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Node(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Node(<span class="string">&quot;D&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> Node(<span class="string">&quot;E&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.next = b;</span><br><span class="line">b.next = c;</span><br><span class="line">c.next = d;</span><br><span class="line">d.next = e;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历打印整个链表的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(node.value);</span><br><span class="line">  <span class="keyword">if</span> (node.next) print(node.next);</span><br><span class="line">&#125;</span><br><span class="line">print(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取链表的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + getLength(node.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getLength(a));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过下标  获取链表中的某个数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index  下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectValue</span>(<span class="params">node, index</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 辅助函数 通过判断当前下标和要查找的下标是否相等来查找值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index  要查找的值的索引</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>curIndex  当前的索引值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_selectValue</span>(<span class="params">node, index, curIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;超出界限&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index === curIndex) &#123;</span><br><span class="line">      <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    curIndex++;</span><br><span class="line">    <span class="keyword">return</span> _selectValue(node.next, index, curIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _selectValue(node, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(selectValue(a, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过下标设置（修改）链表中的某个数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index  要修改的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value  要修改为的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setNode</span>(<span class="params">node, index, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodes = node;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 辅助函数  通过判断当前下标和要查找的下标是否相等来修改值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node 当前的链表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>index 要修改的索引</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>curIndex 当前的索引值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_setNode</span>(<span class="params">node, index, curIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;数据错误&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === curIndex) &#123;</span><br><span class="line">      node.value = value;</span><br><span class="line">      <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">    curIndex++;</span><br><span class="line">    <span class="keyword">return</span> _setNode(node.next, index, curIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _setNode(node, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setNode(a, <span class="number">3</span>, <span class="string">&quot;k&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表末尾加入一个新节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node  链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>pushValue  要加入的新值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushNode</span>(<span class="params">node, pushValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node.next) &#123;</span><br><span class="line">    <span class="keyword">return</span> pushNode(node.next, pushValue);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="keyword">new</span> Node(pushValue);</span><br><span class="line">    <span class="keyword">return</span> (node.next = w);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(pushNode(a, <span class="string">&quot;w&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的某一个节点以后加入一个新的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">beforeNode</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertNode</span>(<span class="params">node, beforeNode, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node === beforeNode) &#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(value);</span><br><span class="line">    newNode.next = node.next;</span><br><span class="line">    node.next = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> insertNode(node.next, beforeNode, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertNode(a, b, <span class="string">&quot;l&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除一个链表的某一个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>deleteValue </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteNode</span>(<span class="params">node, deleteValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;数据错误&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (node.next === deleteValue) &#123;</span><br><span class="line">    node.next = deleteValue.next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    deleteNode(node.next, deleteValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deleteNode(a, c);</span><br><span class="line">print(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 线性结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长大后明白的道理</title>
      <link href="2020/07/23/life/life-big/"/>
      <url>2020/07/23/life/life-big/</url>
      
        <content type="html"><![CDATA[<h2 id="当你长大以后，才会明白的道理"><a href="#当你长大以后，才会明白的道理" class="headerlink" title="当你长大以后，才会明白的道理"></a>当你长大以后，才会明白的道理</h2><blockquote><p>小的时候，总是盼着自己快快长大，盼望着自己能够有自己的意愿。能够不再被父母管着。</p><p>现在的我，长大了。</p><p>然而，我却开始怀念小时候的日子，那种无忧无虑，那种天真无邪的日子，那种没有任何烦恼的日子。</p><p>可是，回不去了！</p><p>随着年龄的增长，社会阅历的加深。越来越多的事把我打的措手不及。</p></blockquote><h3 id="1-起跑线"><a href="#1-起跑线" class="headerlink" title="1.起跑线"></a>1.起跑线</h3><blockquote><p>也许有一天，你会发现，原来，人的起跑线从来都不相同。</p><p>曾经，我天真的以为，人的起跑线是一样的，每个人都是从小开始上学，读书。每个人都有自己的父母关心疼爱等等。现在我才发现，原来不是这样的，原来，世界上还有那么多的孩童上不起学，还有那么多的单亲家庭，即使上学了，也不一样，有钱的家庭，孩子受到的教育要好的多，家庭不好的，随便上个学校，没人管也没人问。比如留守儿童，一年甚至都见不到自己的父母，在学校受人欺负，回家没人问津，很多时候，挨打了，还要挨吵，因为自己的父母没有势力，为了不得罪别人，只能忍气吞声吵自己的孩子来让对方家长消气。一个人守着一个院子，晚上睡觉的时候，都不敢关灯。晚上放学回家的路上，因为天黑的缘故，害怕的要命，骑着车子，拼命的骑，速度飞快，仅仅是为了在漆黑的路上的时间能够少那么一点。再看，那些大学毕业，几年以后，人的差距会被无限的放大。那些家里条件好的，有关系的，要么继承家里的产业，要么被安排的妥妥的，要么就是家里给资金已经创业了。在看那些没有背景，只能靠自己的，还在外面拼命的努力，早已没有了当初无比纯真的笑容，做着自己不愿意做的事。不同的起跑线的例子太多太多了，这里仅仅是列举了一点而已。</p></blockquote><h3 id="2-社会地位"><a href="#2-社会地位" class="headerlink" title="2.社会地位"></a>2.社会地位</h3><blockquote><p>也许有一天，你会发现，原来，有势力的人可以对你无法无天。</p><p>曾经，我天真的以为，不管什么事情，占理才是王道。现在才发现、你有理由如何。有理没地方说啊！即使你有理，只要你没别人有势力，别人还是欺负你。你想说理？找谁说，太难了！相信我们都会经常看到这个维权，那个维权的。但是，看到的那些，仅仅是一小部分而已。绝大多数都是被塞到肚子里去了。没人说理。这种感觉会压的人喘不过气来。曾经的我，有很多次因为被压的喘不过气来，想要轻生，想要拼命 。但是，我自己告诉自己，不能那样做！为了能够得倒平等的待遇，现在的我在拼命的努力。我现在拼命努力只是为了在不久的将来，为我的孩子、父母撑起一片天空。能够让他们在这篇天空下无忧无虑。</p></blockquote><h3 id="3-生活、责任"><a href="#3-生活、责任" class="headerlink" title="3.生活、责任"></a>3.生活、责任</h3><blockquote><p>也许有一天你会发现，生活、责任会压的你喘不过气来。</p><p>作为一个男人，唯有冷暖自知。只有男人，才会了解男人经历了什么。慢慢的，随着年龄的增长，阅历的丰富，会发现，男人的担子越来越重，父母，妻子，孩子等等。各种个样的事情。在外忍气吞声的为别人工作挣钱养家，在家要忍受家人的敲打，忍受邻居的冷嘲热讽。没有能力，没有金钱，再爱你的人，也会离你而去。没有势力，会被别人欺负，会被家人不理解，窝囊废等等。没有金钱，绝大多少女人都会选择离婚吧！当然会有一部分人不这么做，但是太少了，现在的离婚率，高的吓人。所以，事业是男人的一切，但是很大程度会被不理解。</p></blockquote><h3 id="4-做人难，做男人真难"><a href="#4-做人难，做男人真难" class="headerlink" title="4.做人难，做男人真难"></a>4.做人难，做男人真难</h3><blockquote><p>也许有一天，你会发现，做人难，做男人真难。</p><p>做为一个男人，不仅仅要照顾自己，而是要照顾家人，要有责任，有担当。男人，努力不仅仅是为了自己，更是为了那些爱自己的人，那些自己用生命去守护的亲人。</p></blockquote><h3 id="5-我为什么不想着结婚成家"><a href="#5-我为什么不想着结婚成家" class="headerlink" title="5.我为什么不想着结婚成家"></a>5.我为什么不想着结婚成家</h3><blockquote><p>有很多人问我，有没有女朋友，该结婚了什么乱七八糟的。而我为什么到现在还不结婚呢？</p><ol><li><p>恐惧婚姻</p><p>现代社会，离婚率急升，对于婚姻不再信任。害怕自己倾其所有，娶回家的媳妇会在不久的将来和自己分到扬镳。以前觉得婚姻就能长久，能让对方一直陪在自己身边，可是现在各种诱惑遍布，不管男人或是女人都会抵挡不住诱惑出轨。害怕犹豫自己结婚委屈了父母。在我的眼里，父母为我付出了前半生，后半生不想再让他们受苦还受气，每天看着别人的眼色过日子。以前娶回家的，是老婆，现在娶回家的是老虎。</p></li><li><p>压力太大</p><p>恋爱时不用负担太多，两个人开心快乐就好了，可是结婚后不一样，结婚后就要肩负起整个家庭的责任了。现在90后大部分是独生子女，夫妻两人要肩负起赡养四位老人家的重任，还要养育孩子。</p></li><li><p>没有找到合适的人</p><p>目前为止，还没有找到适合自己的女孩子。陪我一起风雨，愿意爱我包容我的女孩子。</p></li><li><p>渴望婚姻</p><p>没有哪一个人不想成家，渴望找到一个可以让我把我的全世界都给她的女孩子。渴望找到一个满眼都是她，她满眼也都是我的女孩子。</p></li><li><p>渴望的家庭的样子</p><p>温馨，舒适。可以互相扶持，互相理解、互相呵护、温馨、美满的家庭。拥有一个或两个宝宝。一起疯，一起闹，一起旅游，一起看电影，一起……</p></li><li><p>希望未来的媳妇的样子</p><p>长相一般就好，身高平均水平就好，最好是微胖的那种，通情达理，为人大方。我可以包容你所有的坏脾气，但请不要无理取闹。</p></li></ol></blockquote><p>以后会努力学习写作能力，有很多想要表达的东西都没有表达出来！后期文章会改动。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 长大后明白的道理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less全局变量</title>
      <link href="2020/07/13/less/less-var/"/>
      <url>2020/07/13/less/less-var/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote><p>记录每天学习的过程中遇到的一些问题和解决方案，如果哪里有不对的地方，还望指教。</p></blockquote><p>原创文章： <strong>转载请注名出处</strong>，谢谢配合</p><h2 id="2、问题——less全局变量的使用"><a href="#2、问题——less全局变量的使用" class="headerlink" title="2、问题——less全局变量的使用"></a>2、问题——less全局变量的使用</h2><h3 id="2-1、全局less变量"><a href="#2-1、全局less变量" class="headerlink" title="2.1、全局less变量"></a>2.1、全局less变量</h3><p><img src="http://www.blog.image.qcwy.org.cn/old/less-var/less-1.webp" alt="image.png"></p><h3 id="2-2、vue文件中使用全局的变量"><a href="#2-2、vue文件中使用全局的变量" class="headerlink" title="2.2、vue文件中使用全局的变量"></a>2.2、vue文件中使用全局的变量</h3><p><img src="http://www.blog.image.qcwy.org.cn/old/less-var/less-2.png" alt="image.png"></p><blockquote><p>可以看到问题所在，提示我变量为定义。而我已经在全局定义过了，在main.js中引入了，但是没有起作用。</p></blockquote><h2 id="3、解决问题——使用sass-resources-loader解决"><a href="#3、解决问题——使用sass-resources-loader解决" class="headerlink" title="3、解决问题——使用sass-resources-loader解决"></a>3、解决问题——使用sass-resources-loader解决</h2><h3 id="3-1、安装sass-resources-loader"><a href="#3-1、安装sass-resources-loader" class="headerlink" title="3.1、安装sass-resources-loader"></a>3.1、安装sass-resources-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-resources-loader --save-dev</span><br><span class="line">OR</span><br><span class="line">yarn add sass-resources-loader --save-dev</span><br></pre></td></tr></table></figure><h3 id="3-2、配置"><a href="#3-2、配置" class="headerlink" title="3.2、配置"></a>3.2、配置</h3><blockquote><p>在根目录创建一个vue.config.js的文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    <span class="string">&quot;style-resources-loader&quot;</span>: &#123;</span><br><span class="line">      preProcessor: <span class="string">&quot;less&quot;</span>,</span><br><span class="line">      patterns: [</span><br><span class="line">        <span class="comment">// 全局变量路径，不能使用路径别名</span></span><br><span class="line">        path.resolve(__dirname, <span class="string">&quot;./src/assets/css/variables.less&quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>此时，重新运行项目，就会发现，变量生效了！</p></blockquote><h2 id="4、注意——有些小伙伴可能还是报错，为定义"><a href="#4、注意——有些小伙伴可能还是报错，为定义" class="headerlink" title="4、注意——有些小伙伴可能还是报错，为定义"></a>4、注意——有些小伙伴可能还是报错，为定义</h2><blockquote><p>上面的都已经执行了，按着上面说的做了！为什么还是无法运行呢！还是报变量为定义的错误呢。<br>这是因为缺少包导致的。安装vue-cli-plugin-style-resources-loader</p></blockquote><h2 id="5、安装依赖"><a href="#5、安装依赖" class="headerlink" title="5、安装依赖"></a>5、安装依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli-plugin-style-resources-loader -S -D</span><br><span class="line">OR</span><br><span class="line">yarn add vue-cli-plugin-style-resources-loader -S -D</span><br><span class="line">这力的-S  -D是缩写</span><br></pre></td></tr></table></figure><blockquote><p>此时再次运行项目就可以了</p></blockquote><p><img src="http://www.blog.image.qcwy.org.cn/old/less-var/less-3.png" alt="image.png"></p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> less </category>
          
          <category> 全局变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt.js页面刷新数据丢失</title>
      <link href="2020/07/11/nuxt/nuxt-data-loss/"/>
      <url>2020/07/11/nuxt/nuxt-data-loss/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote><p>记录每天学习的过程中遇到的一些问题和解决方案，如果哪里有不对的地方，还望指教。</p></blockquote><p>原创文章： 转载请注名出处，谢谢配合</p><h2 id="2、问题"><a href="#2、问题" class="headerlink" title="2、问题"></a>2、问题</h2><blockquote><p>前几天搭建的项目，交给同事去做了。今天他过来问我，你看我页面好好的，跳转也正常，但是跳转过去后，刷新页面的时候，就报错了。页面数据丢失了。存到vuex里面的数据清空了，拿不到了。在asyncData里面也拿不到window等客户端对象，持久化存储等方式也没有办法拿到数据。这个我想了<strong>两天多了</strong>，不知道该如何解决。你帮我看下，看怎么做才能在页面刷新的时候拿到数据呢？</p></blockquote><p>这是今天公司的同事给我反应的问题。</p><h2 id="3、解决问题"><a href="#3、解决问题" class="headerlink" title="3、解决问题"></a>3、解决问题</h2><blockquote><p>知道问题的原因，解决问题还不简单么？<br>咱们先看看nuxt的文档<br><img src="http://www.blog.image.qcwy.org.cn/old/nuxt-data-loss/loss-1.webp" alt="image.png"><br><img src="http://www.blog.image.qcwy.org.cn/old/nuxt-data-loss/loss-2.webp" alt="image.png"><br>看上面官网给的api可以看到，这个api可以获取到页面的上下文对象作为这个api的第二个参数传递给它。</p></blockquote><blockquote><p>因此，我们就可以在服务端拿到客户端请求的url了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">      <span class="function"><span class="title">nuxtServerInit</span>(<span class="params">&#123; commit &#125;, &#123; req &#125;</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          req.url,</span><br><span class="line">          <span class="string">&#x27;==============================dsdasda=======================&#x27;</span></span><br><span class="line">        )</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/old/nuxt-data-loss/loss-3.webp" alt="image.png"><br>这样，我们就可以拿到数据进行请求了。</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> 页面刷新数据丢失 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt-proxy 代理</title>
      <link href="2020/07/09/nuxt/nuxt-proxy/"/>
      <url>2020/07/09/nuxt/nuxt-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="nuxt-js-点击页面跳转跨域"><a href="#nuxt-js-点击页面跳转跨域" class="headerlink" title="nuxt.js 点击页面跳转跨域"></a>nuxt.js 点击页面跳转跨域</h2><blockquote><p>使用nuxt.js做SSR有一个特点，就是在第一次打开页面的时候，不会存在跨域的问题。<br>但是页面跳转的时候，就会出现跨域的问题了。</p></blockquote><h2 id="问题——页面跳转会产生跨域问题"><a href="#问题——页面跳转会产生跨域问题" class="headerlink" title="问题——页面跳转会产生跨域问题"></a>问题——页面跳转会产生跨域问题</h2><blockquote><p>由于公司要开发一个SSR的PC端项目，前几天选择使用nuxt.js搭建了一个项目，做了国际化，拦截等等。然后交给其他同时去开发了。今天同时突然问我，这是产生跨域了吧！但是代理配置了啊，为什么会产生跨域啊，让我帮他解决一下。<br>我看了看之前写的代理，貌似没有什么问题，但就是产生跨域，这是为什么呢？代理也成功了，也运行了啊，为了解决这个问题<br>感觉应该是只代理了接口，没有代理文件，由于是服务端渲染，而没有代理文件，页面跳转的时候拿文件的过程中就会出现跨域（感觉应该是这个问题）</p></blockquote><h2 id="解决——使用-gauseen-nuxt-proxy做代理"><a href="#解决——使用-gauseen-nuxt-proxy做代理" class="headerlink" title="解决——使用@gauseen/nuxt-proxy做代理"></a>解决——使用@gauseen/nuxt-proxy做代理</h2><h3 id="一、安装-gauseen-nuxt-proxy-依赖资源"><a href="#一、安装-gauseen-nuxt-proxy-依赖资源" class="headerlink" title="一、安装 @gauseen/nuxt-proxy 依赖资源"></a>一、安装 @gauseen/nuxt-proxy 依赖资源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @gauseen/nuxt-proxy</span><br><span class="line">OR</span><br><span class="line">yarn add --save-dev @gauseen/nuxt-proxy</span><br></pre></td></tr></table></figure><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">modules: [<span class="string">&#x27;@nuxtjs/axios&#x27;</span>,<span class="string">&#x27;@gauseen/nuxt-proxy&#x27;</span>],</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * axios 代理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  axios: &#123;</span><br><span class="line">    prefix: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="comment">// credentials: false,</span></span><br><span class="line">    proxy: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  proxyTable: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      target: <span class="string">&#x27;http://xxxxxx/api/&#x27;</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api/&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>配置完成后，代理成功，再次运行项目，就不会出现跨域问题了。</p></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt-i18n 国际化</title>
      <link href="2020/07/07/nuxt/nuxt-i18n/"/>
      <url>2020/07/07/nuxt/nuxt-i18n/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>​    由于本人的能力有限，如若有说得做的不对的地方，还望指出。当然，如若你有更好的方法，或者更优解，还望不吝赐教。</p></blockquote><h3 id="1、需求"><a href="#1、需求" class="headerlink" title="1、需求"></a>1、需求</h3><blockquote><p>根据需求，现在需要做一个服务端渲染的PC网站。SSR</p><p>技术选型：Vue Vue-i18n  Nuxt.js  elementUI</p></blockquote><h3 id="2、对于Vue-i8n在Nuxt-js中的使用"><a href="#2、对于Vue-i8n在Nuxt-js中的使用" class="headerlink" title="2、对于Vue-i8n在Nuxt.js中的使用"></a>2、对于Vue-i8n在Nuxt.js中的使用</h3><blockquote><p>首先说一下，nuxt.js和我们之前做的SPA单页面应用不一样，做国际化也不一样，之前已经写过在SPA中如何使用国际化，现在再写一下在SSR中如何使用国际化</p></blockquote><h3 id="3、安装vue-i18n"><a href="#3、安装vue-i18n" class="headerlink" title="3、安装vue-i18n"></a>3、安装vue-i18n</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n --save</span><br><span class="line">yarn add vue-i18n --save</span><br></pre></td></tr></table></figure><h3 id="4、在nuxt中引入vue-i18n"><a href="#4、在nuxt中引入vue-i18n" class="headerlink" title="4、在nuxt中引入vue-i18n"></a>4、在nuxt中引入vue-i18n</h3><blockquote><p>在plugins文件夹下创建一个i18n.js文件，并写入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app, store &#125;) =&gt; &#123;</span><br><span class="line">  app.i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">    locale: store.state.locale,</span><br><span class="line">    fallbackLocale: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="comment">// 我这里默认语言为中文</span></span><br><span class="line">    messages: &#123;</span><br><span class="line">      <span class="string">&#x27;en-US&#x27;</span>: <span class="built_in">require</span>(<span class="string">&#x27;@/locales/en-US.json&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;zh-CN&#x27;</span>: <span class="built_in">require</span>(<span class="string">&#x27;@/locales/zh-CN.json&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.i18n.path = <span class="function">(<span class="params">link</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是默认语言，就省略</span></span><br><span class="line">    <span class="keyword">if</span> (app.i18n.locale === app.i18n.fallbackLocale) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`/<span class="subst">$&#123;link&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`/<span class="subst">$&#123;app.i18n.locale&#125;</span>/<span class="subst">$&#123;link&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="5、在vuex中保存语言的状态"><a href="#5、在vuex中保存语言的状态" class="headerlink" title="5、在vuex中保存语言的状态"></a>5、在vuex中保存语言的状态</h3><blockquote><p>在store页面下创建一个index.js文件</p><p>注意：</p><p>​    nuxt.js中如果想要使用vuex的模块化功能，需要使用如下方法，nuxt会自动生成模块化的vuex。</p><p>​    如果不实用模块化，则和vuex的使用没有任何区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  locales: [<span class="string">&#x27;zh-CN&#x27;</span>, <span class="string">&#x27;en-US&#x27;</span>],</span><br><span class="line">  locale: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// 此处为设置locale</span></span><br><span class="line">  <span class="function"><span class="title">SET_LANG</span>(<span class="params">state, locale</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.locales.includes(locale)) &#123;</span><br><span class="line">      state.locale = locale</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6、在middleware文件夹下新建i18n-js文件用来控制语言的切换"><a href="#6、在middleware文件夹下新建i18n-js文件用来控制语言的切换" class="headerlink" title="6、在middleware文件夹下新建i18n.js文件用来控制语言的切换"></a>6、在middleware文件夹下新建i18n.js文件用来控制语言的切换</h3><blockquote><p>middleware中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  isHMR,</span></span></span><br><span class="line"><span class="function"><span class="params">  app,</span></span></span><br><span class="line"><span class="function"><span class="params">  store,</span></span></span><br><span class="line"><span class="function"><span class="params">  route,</span></span></span><br><span class="line"><span class="function"><span class="params">  params,</span></span></span><br><span class="line"><span class="function"><span class="params">  error,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirect,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> defaultLocale = app.i18n.fallbackLocale</span><br><span class="line">  <span class="comment">// If middleware is called from hot module replacement, ignore it</span></span><br><span class="line">  <span class="keyword">if</span> (isHMR) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// Get locale from params</span></span><br><span class="line">  <span class="keyword">const</span> locale = params.lang || defaultLocale</span><br><span class="line">  <span class="keyword">if</span> (!store.state.locales.includes(locale)) &#123;</span><br><span class="line">    <span class="keyword">return</span> error(&#123; <span class="attr">message</span>: <span class="string">&#x27;This page could not be found.&#x27;</span>, <span class="attr">statusCode</span>: <span class="number">404</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Set locale</span></span><br><span class="line">  store.commit(<span class="string">&#x27;SET_LANG&#x27;</span>, locale)</span><br><span class="line">  app.i18n.locale = store.state.locale</span><br><span class="line">  <span class="comment">// If route is /&lt;defaultLocale&gt;/... -&gt; redirect to /...</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    locale === defaultLocale &amp;&amp;</span><br><span class="line">    route.fullPath.indexOf(<span class="string">&#x27;/&#x27;</span> + defaultLocale) === <span class="number">0</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> toReplace =</span><br><span class="line">      <span class="string">&#x27;^/&#x27;</span> +</span><br><span class="line">      defaultLocale +</span><br><span class="line">      (route.fullPath.indexOf(<span class="string">&#x27;/&#x27;</span> + defaultLocale + <span class="string">&#x27;/&#x27;</span>) === <span class="number">0</span> ? <span class="string">&#x27;/&#x27;</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(toReplace)</span><br><span class="line">    <span class="keyword">return</span> redirect(route.fullPath.replace(re, <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="7、在nuxt-config-js文件中进行配置"><a href="#7、在nuxt-config-js文件中进行配置" class="headerlink" title="7、在nuxt.config.js文件中进行配置"></a>7、在nuxt.config.js文件中进行配置</h3><blockquote><p>在上面写好之后，需要在这里进行配置才可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Nuxt rendering mode</span></span><br><span class="line"><span class="comment">   ** See https://nuxtjs.org/api/configuration-mode</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  mode: <span class="string">&#x27;universal&#x27;</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Nuxt target</span></span><br><span class="line"><span class="comment">   ** See https://nuxtjs.org/api/configuration-target</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  target: <span class="string">&#x27;server&#x27;</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Headers of the page</span></span><br><span class="line"><span class="comment">   ** See https://nuxtjs.org/api/configuration-head</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  head: &#123;</span><br><span class="line">    title: process.env.npm_package_name || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;viewport&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;width=device-width, initial-scale=1&#x27;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        hid: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        content: process.env.npm_package_description || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    link: [</span><br><span class="line">      &#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/favicon.ico&#x27;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        rel: <span class="string">&#x27;stylesheet&#x27;</span>,</span><br><span class="line">        href: <span class="string">&#x27;//at.alicdn.com/t/xxx.css&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 头部内容、</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Global CSS</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  css: [<span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>, <span class="string">&#x27;@/assets/public.less&#x27;</span>],</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Plugins to load before mounting the App</span></span><br><span class="line"><span class="comment">   ** https://nuxtjs.org/guide/plugins</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  plugins: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&#x27;@/plugins/element-ui&#x27;</span>, <span class="attr">ssr</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="string">&#x27;~/plugins/axios&#x27;</span>,</span><br><span class="line">+    <span class="string">&#x27;@/plugins/i18n.js&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  router: &#123;</span><br><span class="line">+    middleware: <span class="string">&#x27;i18n&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  generate: &#123;</span><br><span class="line">    <span class="comment">// 这里是指定生成静态文件的路由</span></span><br><span class="line">+    routes: [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/about&#x27;</span>, <span class="string">&#x27;/zh-CN&#x27;</span>, <span class="string">&#x27;/zh-CN/about&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Auto import components</span></span><br><span class="line"><span class="comment">   ** See https://nuxtjs.org/api/configuration-components</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  components: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Nuxt.js dev-modules</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  buildModules: [</span><br><span class="line">    <span class="comment">// Doc: https://github.com/nuxt-community/eslint-module</span></span><br><span class="line">    <span class="string">&#x27;@nuxtjs/eslint-module&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Nuxt.js modules</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  modules: [<span class="string">&#x27;@nuxtjs/axios&#x27;</span>],</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * axios 代理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  axios: &#123;</span><br><span class="line">    prefix: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    credentials: <span class="literal">true</span>,</span><br><span class="line">    proxy: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      target: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api/&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** Build configuration</span></span><br><span class="line"><span class="comment">   ** See https://nuxtjs.org/api/configuration-build/</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// build: &#123;</span></span><br><span class="line">  <span class="comment">//   transpile: [/^element-ui/],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    vendor: [<span class="string">&#x27;element-ui&#x27;</span>],</span><br><span class="line">    babel: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            libraryName: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">            styleLibraryName: <span class="string">&#x27;theme-chalk&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      ],</span><br><span class="line">      comments: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="8、创建本地语言包"><a href="#8、创建本地语言包" class="headerlink" title="8、创建本地语言包"></a>8、创建本地语言包</h3><blockquote><p>​    根据自己不同的需求，创建不同的语言包，这里只展示一个语言包</p><p>​    新建 local文件夹，创建en-US.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;home&quot;</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span>: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;english&quot;</span>: <span class="string">&quot;English&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;search&quot;</span>: <span class="string">&quot;searchs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;hahah&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;about&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;About&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="9、在page文件夹下创建页面文件"><a href="#9、在page文件夹下创建页面文件" class="headerlink" title="9、在page文件夹下创建页面文件"></a>9、在page文件夹下创建页面文件</h3><blockquote><p>在page页面文件夹下创建_lang文件夹。lang前面的下划线是动态路由的意思，nuxt.js的router路由文件会根据page文件夹自动生成对应的路由文件</p><p>下面代码是切换语言的文件代码</p><p>创建page/_lang/index.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container class&#x3D;&quot;bv-example-row main&quot;&gt;</span><br><span class="line">    &lt;NuxtLink</span><br><span class="line">      v-if&#x3D;&quot;$i18n.locale &#x3D;&#x3D;&#x3D; &#39;zh-CN&#39;&quot;</span><br><span class="line">      :to&#x3D;&quot;&#123; name: &#39;lang&#39;, params: &#123; lang: &#39;en-US&#39; &#125; &#125;&quot;</span><br><span class="line">      class&#x3D;&quot;Header__Link&quot;</span><br><span class="line">      active-class&#x3D;&quot;none&quot;</span><br><span class="line">      exact</span><br><span class="line">    &gt;</span><br><span class="line">      en&#123;&#123; $t(&#39;links.english&#39;) &#125;&#125;</span><br><span class="line">    &lt;&#x2F;NuxtLink&gt;</span><br><span class="line"></span><br><span class="line">    &lt;NuxtLink</span><br><span class="line">      v-else</span><br><span class="line">      :to&#x3D;&quot;&#123; name: &#39;lang&#39;, params: &#123; lang: &#39;zh-CN&#39; &#125; &#125;&quot;</span><br><span class="line">      class&#x3D;&quot;Header__Link&quot;</span><br><span class="line">      active-class&#x3D;&quot;none&quot;</span><br><span class="line">      exact</span><br><span class="line">    &gt;</span><br><span class="line">      zh&#123;&#123; $t(&#39;links.english&#39;) &#125;&#125;</span><br><span class="line">    &lt;&#x2F;NuxtLink&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $route.fullPath &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;el-container&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  head() &#123;</span><br><span class="line">    return &#123; title: this.$t(&#39;home.title&#39;) &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">  margin: 30px auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建page/index.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Index from &#39;@&#x2F;pages&#x2F;_lang&#x2F;index&#39;</span><br><span class="line">export default Index</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="10、总结"><a href="#10、总结" class="headerlink" title="10、总结"></a>10、总结</h3><blockquote><p>到此 国际化就配置完成了。</p><p>运行结果</p><p><img src="http://www.blog.image.qcwy.org.cn/old/nuxt-i18n/1.png" alt="1"></p><p>默认语言URL：<a href="http://localhost:3000/">http://localhost:3000</a></p><p>非默认语言URL：<a href="http://localhost:3000/en-US">http://localhost:3000/en-US</a></p></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p><p>程序的世界，写作的过程中部分文章难免会参考与借鉴网络上的一些资源、见解。如有侵权请与作者联系。如若如实侵权，文章会在24小时内删除。如若由于部分文章存在侵权行为给您带来不便还请见谅。</p><p>本博客仅仅为自己以及前端爱好者提供便利，不做任何商业用途。</p>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> 国际化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 中时时监听网络的链接状态</title>
      <link href="2020/07/03/vue/vue-network-online/"/>
      <url>2020/07/03/vue/vue-network-online/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>​    由于本人的能力有限，如若有说得做的不对的地方，还望指出。当然，如若你有更好的方法，或者更优解，还望不吝赐教。</p></blockquote><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><blockquote><p>​    实时监听app的联网状态，在断开网络的时候，提示用户网络断开了</p></blockquote><h3 id="自己的想法"><a href="#自己的想法" class="headerlink" title="自己的想法"></a>自己的想法</h3><blockquote><p>​    监听用户的网络链接状态，如果断网，显示断网的页面。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在app.vue文件中添加一个属性来监控网络是否是开启状态</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      network: <span class="literal">true</span>, <span class="comment">//默认有网</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></blockquote><p>在app.vue 的mounted生命钩子函数里注册检测网络链接的状态</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 检测断网</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;offline&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;已断网&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.network = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;online&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;网络已连接&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.network = <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><p>在app.vue 的 判断network是否为false，如果是，跳转到断网的页面。为了简单，我就直接写在本页面上了</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;network&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;!network&quot;</span>&gt;</span><br><span class="line">     网络已断开，链接网络，自动刷新</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div v-<span class="keyword">else</span>&gt;</span><br><span class="line">     &lt;keep-alive&gt;</span><br><span class="line">       &lt;router-view :key=<span class="string">&quot;$route.path&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span> /&gt;</span><br><span class="line">     &lt;/keep-alive&gt;</span><br><span class="line">     &lt;router-view :key=<span class="string">&quot;$route.path&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span> /&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.network</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 时时监听网络的链接状态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo从windows上移动的mac上的记录和遇到的坑</title>
      <link href="2020/06/30/hexo/hexo-move-mac/"/>
      <url>2020/06/30/hexo/hexo-move-mac/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>终于，迎来第一本苹果电脑，现在需要把很多东西移动到mac本上。下面是记录迁移博客的一些记录。</p></blockquote><h3 id="1-目前了解的是有两种方法进行迁移"><a href="#1-目前了解的是有两种方法进行迁移" class="headerlink" title="1.目前了解的是有两种方法进行迁移"></a>1.目前了解的是有两种方法进行迁移</h3><h3 id="1-1-粘贴复制的方法"><a href="#1-1-粘贴复制的方法" class="headerlink" title="1.1 粘贴复制的方法"></a>1.1 粘贴复制的方法</h3><blockquote><p>把所有的资源都粘贴到mac本上(安装的包除外)</p><p>sudo yarn install  / npm i 安装依赖</p><p>sudo npm i hexo-cli -g / sudo yarn add hero-cli -g 全局安装 hero-cli</p><p>sudo hexo new xxx</p><p>sudo hexo clean</p><p>sudo hexo g</p><p>sudo hexo d</p></blockquote><h3 id="1-2-在windows上把所有的资源上传到博客的一个新的分支上"><a href="#1-2-在windows上把所有的资源上传到博客的一个新的分支上" class="headerlink" title="1.2 在windows上把所有的资源上传到博客的一个新的分支上"></a>1.2 在windows上把所有的资源上传到博客的一个新的分支上</h3><blockquote><p>在本地创建新的分支</p><p>把包以外的资源上传的此分支上</p><p>在mac上使用git clone 地址   把资源克隆到本地</p><p>然后再重复1.1上面的命令就ok了</p></blockquote><h3 id="2-遇到的坑"><a href="#2-遇到的坑" class="headerlink" title="2.遇到的坑"></a>2.遇到的坑</h3><blockquote><p>由于在装node.js的时候没有注意，把node装成了测试版本，由于版本太高，造成运行hexo的时候报错  一些变量找不到</p><p>解决办法：把node版本降级到稳定版本就好了。可以使用。 n 进行降级。  n是node的简写。 是管理node的版本的一个工具，详细用法可以自行百度</p></blockquote><p>   注意：部分文章可能会在不就的将来更新</p><p>  如果能够帮助到你，是小编最大的荣幸</p><p>  当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>  小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>  让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> windows转mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-proxy</title>
      <link href="2020/05/12/vue/vue-proxy/"/>
      <url>2020/05/12/vue/vue-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="前端工程化开发时的跨域解决方案"><a href="#前端工程化开发时的跨域解决方案" class="headerlink" title="前端工程化开发时的跨域解决方案"></a>前端工程化开发时的跨域解决方案</h2><blockquote><p>此方案只能用于开发环境，线上最好设置同源策略</p></blockquote><h3 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h3><p>前后端分离的项目</p><p>前后端不在同一服务器的情况下，前端要访问后端API，可通过在vue.config.js中配置代理服务器</p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-前提条件"><a href="#2-1-前提条件" class="headerlink" title="2.1 前提条件"></a>2.1 前提条件</h4><p>1：安装<strong>vue-lic</strong></p><p>2：安装<strong>axios</strong>  用于发送请求</p><h4 id="2-2-配置axios"><a href="#2-2-配置axios" class="headerlink" title="2.2 配置axios"></a>2.2 配置axios</h4><p>详细配置 请查看axios </p><h4 id="2-3-开始发送请求"><a href="#2-3-开始发送请求" class="headerlink" title="2.3 开始发送请求"></a>2.3 开始发送请求</h4><p>此时控制台会报跨域错误 ， 这个时候  就需要设置跨域了，或者后台配置允许跨域（一般都不这么干）</p><h4 id="2-4-前端配置跨域"><a href="#2-4-前端配置跨域" class="headerlink" title="2.4 前端配置跨域"></a>2.4 前端配置跨域</h4><blockquote><ol><li>先在根目录创建vue.config.js</li><li>写入以下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//vue-cli3.0 里面的 vue.config.js做配置</span></span><br><span class="line">devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;     <span class="comment">//这里最好有一个 /</span></span><br><span class="line">            target: <span class="string">&#x27;http://xx.xx.xx.xx:8080&#x27;</span>,  <span class="comment">// 后台接口域名</span></span><br><span class="line">            ws: <span class="literal">true</span>,        <span class="comment">//如果要代理 websockets，配置这个参数</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>,  <span class="comment">//是否跨域</span></span><br><span class="line">            pathRewrite:&#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>axios 中配置的 根路径（baseURL）需要设置你要代理的路径 ，此时，就会把这个路径代理到后台接口的域名下</li></ol></blockquote><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 集成 gitalk评论功能遇到的坑</title>
      <link href="2020/03/20/hexo/hexo-gitalk/"/>
      <url>2020/03/20/hexo/hexo-gitalk/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>​    由于本人的能力有限，如若有说得做的不对的地方，还望指出。当然，如若你有更好的方法，或者更优解，还望不吝赐教。</p></blockquote><h2 id="1、什么是gitalk？"><a href="#1、什么是gitalk？" class="headerlink" title="1、什么是gitalk？"></a>1、什么是gitalk？</h2><blockquote><p><strong>Gitalk</strong> 利用了 <a href="https://links.jianshu.com/go?to=https://developer.github.com/v3/">GithubAPI</a> 基于 <strong>GitHub Issue</strong> 和 <strong>Preact</strong> 开发的评论插件，官方网址： <a href="https://links.jianshu.com/go?to=https://gitalk.github.io/">https://gitalk.github.io</a></p><p>特点：</p><ul><li>使用 GitHub 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 </li></ul></blockquote><h2 id="2、配置gitalk"><a href="#2、配置gitalk" class="headerlink" title="2、配置gitalk"></a>2、配置gitalk</h2><blockquote><ol><li><p>注册：要使用 Gitalk 需要先在 GitHub 上注册新应用，链接：<a href="https://links.jianshu.com/go?to=https://github.com/settings/applications/new">https</a> : <a href="https://links.jianshu.com/go?to=https://github.com/settings/applications/new">//github.com/settings/applications/new</a></p><p><img src="hexo-1.png" alt="hexo-1"> 2. 点击注册后，会生成<strong>Client ID</strong>和<strong>Client Secret</strong>在配置中需要用到，也是应用访问你 Github 的凭证，具体配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">  gitalk:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class="line">    ID: location.pathname</span><br><span class="line">    owner: pythongyj <span class="comment">## Your GitHub ID, e.g. username</span></span><br><span class="line">    repo: gitalk <span class="comment">## The repository to store your comments, make sure you&#x27;re the repo&#x27;s owner, e.g. gitalk.github.io</span></span><br><span class="line">    client_id: xxx <span class="comment">## GitHub client ID, e.g. 75752dafe7907a897619</span></span><br><span class="line">    client_secret: xxx <span class="comment">## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span></span><br><span class="line">    admin: pythongyj <span class="comment">## Github repo owner and collaborators, only these guys can initialize github issues.</span></span><br><span class="line">    language: zh-CN <span class="comment">## Language</span></span><br></pre></td></tr></table></figure><ol start="3"><li>重新部署博客，打开页面进入某一博客内容下，评论会出现在页面最下方</li></ol></li></ol></blockquote><h2 id="3、遇到的坑"><a href="#3、遇到的坑" class="headerlink" title="3、遇到的坑"></a>3、遇到的坑</h2><blockquote><p>自己遇到的坑：</p><ol><li><h4 id="未找到相关的issue进行评论，请联系-XXX初始化创建。"><a href="#未找到相关的issue进行评论，请联系-XXX初始化创建。" class="headerlink" title="未找到相关的issue进行评论，请联系@XXX初始化创建。"></a>未找到相关的issue进行评论，请联系@XXX初始化创建。</h4><ul><li>解决办法：出现这总情况是因为博主未给文章评论初始化，博主只需要登录 GitHub 账户即可。</li></ul></li><li><h4 id="浏览器进入开发者模式，看见类似https-api-github-com-user-401-Unauthorized"><a href="#浏览器进入开发者模式，看见类似https-api-github-com-user-401-Unauthorized" class="headerlink" title="浏览器进入开发者模式，看见类似https://api.github.com/user 401 (Unauthorized)"></a>浏览器进入开发者模式，看见类似<a href="https://links.jianshu.com/go?to=https://api.github.com/user">https://api.github.com/user</a> 401 (Unauthorized)</h4><ul><li>解决办法：找到主题配置文件， 在 gitalk 配置里添加 <strong>ID: location.pathname</strong></li></ul></li></ol><p>查找问题时发现的的坑：</p><ol><li><h4 id="Error-Not-Found"><a href="#Error-Not-Found" class="headerlink" title="Error: Not Found."></a>Error: Not Found.</h4><ul><li>解决办法：未能正确找到仓库 repo，检查一下你的仓库是否配置正确</li></ul></li></ol></blockquote><p>   注意：部分文章可能会在不就的将来更新</p><p>  如果能够帮助到你，是小编最大的荣幸</p><p>  当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>  小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>  让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 集成gitalk评论功能遇到的坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vant-UI 组件的List渲染列表多页列表 切换不加载的问题</title>
      <link href="2019/06/04/vue/vant-list/"/>
      <url>2019/06/04/vue/vant-list/</url>
      
        <content type="html"><![CDATA[<p>1 数据渲染</p><p>template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-list</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;items in tabbar&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;items.id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-show</span>=<span class="string">&quot;items.isActive&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;items.loading&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:finished</span>=<span class="string">&quot;items.finished&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">finished-text</span>=<span class="string">&quot;没有更多了&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">load</span>=<span class="string">&quot;onLoad(items)&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;listItem&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">van-cell</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items.list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">    items.value</span><br><span class="line">  &#125;&#125;<span class="tag">&lt;/<span class="name">van-cell</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     tabbar: [</span><br><span class="line">       &#123;</span><br><span class="line">         id: <span class="number">1</span>,</span><br><span class="line">         value: <span class="string">&quot;Lorem&quot;</span>,</span><br><span class="line">         isActive: <span class="literal">true</span>,</span><br><span class="line">         loading: <span class="literal">false</span>,</span><br><span class="line">         finished: <span class="literal">false</span>,</span><br><span class="line">         list: [],</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         id: <span class="number">2</span>,</span><br><span class="line">         value: <span class="string">&quot;Lorem2&quot;</span>,</span><br><span class="line">         isActive: <span class="literal">false</span>,</span><br><span class="line">         loading: <span class="literal">false</span>,</span><br><span class="line">         finished: <span class="literal">false</span>,</span><br><span class="line">         list: [],</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         id: <span class="number">3</span>,</span><br><span class="line">         value: <span class="string">&quot;Lorem3&quot;</span>,</span><br><span class="line">         isActive: <span class="literal">false</span>,</span><br><span class="line">         loading: <span class="literal">false</span>,</span><br><span class="line">         finished: <span class="literal">false</span>,</span><br><span class="line">         list: [],</span><br><span class="line">       &#125;,</span><br><span class="line">     ],</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 异步更新数据</span></span><br><span class="line">  <span class="comment">// setTimeout 仅做示例，真实场景中一般为 ajax 请求</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      obj.list.push(obj.list.length + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(obj.id);</span><br><span class="line">    <span class="built_in">console</span>.log(obj.finished);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载状态结束</span></span><br><span class="line">    obj.loading = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据全部加载完成</span></span><br><span class="line">    <span class="keyword">if</span> (obj.list.length &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">      obj.finished = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换选项</span></span><br><span class="line"><span class="comment"> * obj  选项的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onClickLoadData</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.tabbar.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.isActive = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  obj.isActive = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>切换页面  会发现  数据不会加载</p><p>这是为什么呢？</p><p>这是因为页面渲染的时候  已经进行过加载了   在点击切换按钮的时候  并没有触发onload事件</p><p>那么你可能会说   那点击的时候调用一次onLoad事件不就好了么？</p><p>对   点击的时候调用一次onLoad是会触发调用 </p><p>但是呢？ </p><p>第一个问题：如果第一次加载的数据不足以铺满全屏，那么  数据就不会继续加载了</p><p>第二个问题：如果你的数据已经全部加载结束了，但是你点击切换的时候  由于你调用了onLoad事件。就还会触发。</p><p>那么！</p><p>你也许会问 那该怎么做呢？</p><p>那么现在我就告诉你</p><p>超简单  一行代码搞定</p><p>官方给了一个    check方法</p><p>所以  我们就可以这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换选项</span></span><br><span class="line"><span class="comment"> * obj  选项的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">onClickLoadData</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.tabbar.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.isActive = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  obj.isActive = <span class="literal">true</span>;</span><br><span class="line">+  <span class="built_in">this</span>.$refs.listItem[obj.id - <span class="number">1</span>].check();检查点击的选项所显示的页面的滚动位置，若已滚动至底部，则会触发 load 事件  [obj.id - <span class="number">1</span>]为选中当前的list</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>完美搞定 </p><h2 id="2-遇到的坑-记录于2020-07-07"><a href="#2-遇到的坑-记录于2020-07-07" class="headerlink" title="2.遇到的坑 记录于2020.07.07"></a>2.遇到的坑 记录于2020.07.07</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><blockquote><p>在第一次打开页面刷印，且是第一次下啦都底部进行加载请求的时候，请求了两次。之后，只要不刷新页面，就不会再出现一下请求两次的问题。</p></blockquote><h3 id="2-出现这个问题，让小编疑惑到怀疑人生"><a href="#2-出现这个问题，让小编疑惑到怀疑人生" class="headerlink" title="2.出现这个问题，让小编疑惑到怀疑人生"></a>2.出现这个问题，让小编疑惑到怀疑人生</h3><blockquote><p>刚开始，还以为是自己代码逻辑写错了！就一直读之前写的代码，看vant的文档。最终发现，代码没有任何问题。在网上查找，由于问题不好描述，也没有查到相应的答案。  痛苦至极</p><p>稳住心，开始在浏览器上测试，过一个小时左右时间的折腾，终于，找到了答案。</p><p><img src="http://www.blog.image.qcwy.org.cn/old/vant-list/1.png" alt="罪魁祸首"></p><p>主要原因在于，下面下啦的内容是一个全局的懒加载组件，只有在使用到的时候，才会请求加载这个组件的js</p><p>可以看到，在第一次请求接口的完成后，才请求了这个js文件。之后由于页面还没有渲染，导致高度不够，所以就又请求了一次。</p></blockquote><h3 id="3-解决问题"><a href="#3-解决问题" class="headerlink" title="3. 解决问题"></a>3. 解决问题</h3><blockquote><p>终于，找到了原因，接下来解决就很简单了。</p><p>方式一：把这个全局组件的懒加载去掉，改成不懒加载就好了。</p><p>方式二：把这个全局组件单独在这个页面引入一次。</p></blockquote><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 组件的List渲染列表多页列表 切换不加载的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn的常用命令</title>
      <link href="2019/06/04/yarn/doc_yarn/"/>
      <url>2019/06/04/yarn/doc_yarn/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于个人比较喜欢使用<strong>yarn</strong>，所以根据自己的经验以及查阅资料，总结一下常用的命令。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn -v</span><br><span class="line">yarn -version</span><br><span class="line">注意：yarn -version（查看yarn的版本）  与  yarn version（当前项目的版本）   不同！</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过交互式会话创建一个 package.json</span></span><br><span class="line">yarn init</span><br><span class="line"><span class="comment">// 默认值生成 package.json</span></span><br><span class="line">yarn init --yes</span><br></pre></td></tr></table></figure><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认会添加到生产环境  dependencies  --save 是默认的</span></span><br><span class="line">yarn add &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --dev 会添加到开发环境 devDependencies</span></span><br><span class="line">yarn add &lt;package_name&gt; --dev</span><br></pre></td></tr></table></figure><h2 id="添加全局依赖"><a href="#添加全局依赖" class="headerlink" title="添加全局依赖"></a>添加全局依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">global</span> add &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h2 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade</span><br></pre></td></tr></table></figure><h2 id="移除依赖"><a href="#移除依赖" class="headerlink" title="移除依赖"></a>移除依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h2 id="安装所有依赖"><a href="#安装所有依赖" class="headerlink" title="安装所有依赖"></a>安装所有依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --force 可以强制重新下载安装</span></span><br><span class="line">yarn</span><br><span class="line">yarn instal</span><br><span class="line">yarn instal --force</span><br></pre></td></tr></table></figure><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn &lt;shell_name&gt; eg:yarn start / yarn dev / yarn build / yarn serve</span><br><span class="line"><span class="comment">// 注意：运行这些命令需要事先在package.json里scripts里配置好</span></span><br></pre></td></tr></table></figure><h2 id="显示包信息"><a href="#显示包信息" class="headerlink" title="显示包信息"></a>显示包信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --json 可以以json的方式输出</span></span><br><span class="line">yarn info &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h2 id="显示所有依赖"><a href="#显示所有依赖" class="headerlink" title="显示所有依赖"></a>显示所有依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn list</span><br><span class="line">yarn list --depth=<span class="number">0</span> <span class="comment">// 限制依赖的深度</span></span><br><span class="line">sudo yarn <span class="built_in">global</span> list <span class="comment">// 列出全局安装的模块</span></span><br></pre></td></tr></table></figure><h2 id="yarn-配置文件"><a href="#yarn-配置文件" class="headerlink" title="yarn 配置文件"></a>yarn 配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yarn coinfig</span><br><span class="line">yarn config set key value <span class="comment">// 设置</span></span><br><span class="line">yarn config get key <span class="comment">// 读取值</span></span><br><span class="line">yarn config <span class="keyword">delete</span> key <span class="comment">// 删除</span></span><br><span class="line">yarn config list <span class="comment">// 显示当前配置</span></span><br><span class="line">yarn config set registry https:<span class="comment">//registry.npm.taobao.org // 设置淘宝镜像</span></span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn cache</span><br><span class="line">sudo yarn cache list <span class="comment">// 列出已缓存的每个包</span></span><br><span class="line">sudo yarn cache dir <span class="comment">// 返回 全局缓存位置</span></span><br><span class="line">sudo yarn cache clean <span class="comment">// 清除缓存</span></span><br></pre></td></tr></table></figure><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router</title>
      <link href="2019/05/24/vue/vue-router-parms/"/>
      <url>2019/05/24/vue/vue-router-parms/</url>
      
        <content type="html"><![CDATA[<p>vue-router 路由传参方式</p><p>1 路由组件传参</p><p>1.1 布尔模式</p><p>1.1.1 配置路由</p><p>添加 props: true 选项</p><pre><code> &#123;    // 我的地址列表    name: &quot;addressedit&quot;,    path: &quot;/account/addressedit&quot;,    props: true,    component: () =&gt; import(&quot;@/views/addressEdit&quot;),  &#125;,</code></pre><p>1.1.2 传递参数</p><p>在传参的过程中 写上 props: true, 说明开启了路由组件传参</p><pre><code>onEditAddress(item, index) &#123;  this.$router.push(&#123;    name: &quot;addressedit&quot;,    params: &#123; id: index &#125;,    props: true,  &#125;);  this.$toast(&quot;编辑地址:&quot; + index);&#125;,</code></pre><p>1.1.3 获取传递的参数</p><p>通过 route 对象上的 params 属性获取传递过来的属性 即：this.$route.params</p><pre><code>this.$route.params.id</code></pre><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-i18n</title>
      <link href="2019/05/18/vue/vue-i18n/"/>
      <url>2019/05/18/vue/vue-i18n/</url>
      
        <content type="html"><![CDATA[<h2 id="在vue项目中使用vue-i18n-实现国际化"><a href="#在vue项目中使用vue-i18n-实现国际化" class="headerlink" title="在vue项目中使用vue-i18n 实现国际化"></a>在vue项目中使用vue-i18n 实现国际化</h2><blockquote><p>在很多项目的开发中都需要设置国际化</p><p>我也是在最近的一个项目中使用到了国际化，所以总结一下</p></blockquote><h3 id="1-安装vue-i18n"><a href="#1-安装vue-i18n" class="headerlink" title="1. 安装vue-i18n"></a>1. 安装vue-i18n</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-i18n</span><br></pre></td></tr></table></figure><h3 id="2-在根目录中创建lang文件夹"><a href="#2-在根目录中创建lang文件夹" class="headerlink" title="2. 在根目录中创建lang文件夹"></a>2. 在根目录中创建lang文件夹</h3><p><img src="http://www.blog.image.qcwy.org.cn/old/vue-i18n/lang.png"></p><p>en_us.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  footer: [<span class="string">&quot;home&quot;</span>, <span class="string">&quot;catgory&quot;</span>, <span class="string">&quot;cart&quot;</span>, <span class="string">&quot;account&quot;</span>, <span class="string">&quot;not login&quot;</span>],</span><br><span class="line">  header: &#123;&#125;,</span><br><span class="line">  index: &#123;</span><br><span class="line">    rowTime: &#123;</span><br><span class="line">      title: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    recommend: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  userPageText: &#123;</span><br><span class="line">    WishList: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">    listText: &#123;</span><br><span class="line">      MyOrders: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">    LogOut: <span class="string">&quot;Log Out&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  login: &#123;</span><br><span class="line">    btns: &#123;</span><br><span class="line">      fackbook: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      phone: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>zh_cn.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  footer: [<span class="string">&quot;首页&quot;</span>, <span class="string">&quot;分类&quot;</span>, <span class="string">&quot;购物车&quot;</span>, <span class="string">&quot;个人中心&quot;</span>, <span class="string">&quot;未登录&quot;</span>],</span><br><span class="line">  header: &#123;&#125;,</span><br><span class="line">  index: &#123;</span><br><span class="line">    rowTime: &#123;</span><br><span class="line">      title: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    recommend: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  userPageText: &#123;</span><br><span class="line">    Coupons: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">    listText: &#123;</span><br><span class="line">      MyOrders: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">    LogOut: <span class="string">&quot;退出&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  login: &#123;</span><br><span class="line">    btns: &#123;</span><br><span class="line">      fackbook: <span class="string">&quot;xxx &quot;</span>,</span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      phone: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&quot;vue-i18n&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Locale &#125; <span class="keyword">from</span> <span class="string">&quot;vant&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> enUS <span class="keyword">from</span> <span class="string">&quot;vant/lib/locale/lang/en-US&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> zhCN <span class="keyword">from</span> <span class="string">&quot;vant/lib/locale/lang/zh-CN&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&quot;./en_us&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">&quot;./zh_cn&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    ...enUS,</span><br><span class="line">    ...enLocale</span><br><span class="line">  &#125;,</span><br><span class="line">  zh: &#123;</span><br><span class="line">    ...zhCN,</span><br><span class="line">    ...zhLocale</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: <span class="string">&quot;zh&quot;</span>, <span class="comment">// 设置默认语言</span></span><br><span class="line">  messages: messages, <span class="comment">// 设置资源文件对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新vant组件库本身的语言变化，支持国际化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vantLocales</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lang === <span class="string">&quot;en&quot;</span>) &#123;</span><br><span class="line">    Locale.use(lang, enUS);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lang === <span class="string">&quot;zh&quot;</span>) &#123;</span><br><span class="line">    Locale.use(lang, zhCN);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; i18n, vantLocales &#125;;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; i18n, vantLocales &#125; <span class="keyword">from</span> <span class="string">&quot;./lang&quot;</span>;</span><br><span class="line">vantLocales(i18n.locale);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  i18n,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><blockquote><p>在需要使用到国际化的组件内直接使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag"><span class="attr">:title</span>=<span class="string">&quot;$i18n.messages[this.$i18n.locale].userPageText.listText.MyOrders&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;iconfont icon-record&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">size</span>=<span class="string">&quot;large&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">&quot;$router.push(&#123; name: &#x27;orderlist&#x27; &#125;)&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>为了方便 先引入  在使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.i18nMsg = <span class="built_in">this</span>.$i18n.messages[<span class="built_in">this</span>.$i18n.locale].userPageText;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-cell</span></span></span><br><span class="line"><span class="tag"><span class="attr">:title</span>=<span class="string">&quot;i18nMsg.listText.MyOrders&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;iconfont icon-record&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">size</span>=<span class="string">&quot;large&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">&quot;$router.push(&#123; name: &#x27;orderlist&#x27; &#125;)&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-按钮控制切换语言"><a href="#4-按钮控制切换语言" class="headerlink" title="4.  按钮控制切换语言"></a>4.  按钮控制切换语言</h3><p>this.$i18n.locale,当你赋值为‘zh’时，导航栏就变成中文；当赋值为 ‘en’时，就变成英文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top_btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeLangEvent&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">changeLangEvent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;changeLangEvent&#x27;</span>);</span><br><span class="line"><span class="built_in">this</span>.$confirm(<span class="string">&#x27;确定切换语言吗?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">  confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">  cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">  type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">this</span>.$i18n.locale === <span class="string">&#x27;zh&#x27;</span> ) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$i18n.locale = <span class="string">&#x27;en&#x27;</span>;<span class="comment">//关键语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;en&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$i18n.locale = <span class="string">&#x27;zh&#x27;</span>;<span class="comment">//关键语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;zh&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;catch&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">    type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是一个案例，可以用一个变量存储要改变 的语言，点击按钮的时候，访问设置属性，从而设置不同的语言</p><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 国际化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue字体图标不显示的设置</title>
      <link href="2019/03/21/iconfont/iconfont/"/>
      <url>2019/03/21/iconfont/iconfont/</url>
      
        <content type="html"><![CDATA[<h2 id="elementUI字体图标不显示-完美解决方案"><a href="#elementUI字体图标不显示-完美解决方案" class="headerlink" title="elementUI字体图标不显示 完美解决方案"></a>elementUI字体图标不显示 完美解决方案</h2><p>使用vue init webpack-simple   xxx 创建的项目</p><p>在使用ElementUI的时候使用 <strong>字体图标</strong>时提示 </p><p><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/assets/%E6%B2%A1%E6%9C%89loader%E5%A4%84%E7%90%86%E5%9B%BE%E6%A0%87.png"></p><p>根据报错提示可以看出时无法处理element-icons.ttf文件</p><p>原因时什么呢？</p><p>相信大家都能够知道，这是因为webpack不知道怎么去处理.ttf的文件</p><p>这个时候我们就需要url-loader来帮助我们处理.ttf字体文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个时候需要我们去执行npm命令去下载url-loader</span></span><br><span class="line">npm/cnpm install url-loader --save</span><br></pre></td></tr></table></figure><p>下载完成后  去过你尝试去npm run dev 你会发现还是报和上面相同的错误，这是为什么呢？</p><p>答案当然是因为你没有使用这个加载器（url-loader）</p><p>现在就需要你在**<code>webpack.config.js</code>**中去配置</p><p>这个配置说句实在的让小编好为难，因为一开始的时候咱也不知道该怎么配置啊，怎么办呢？</p><p>这个时候度娘就显现出来了强大的威力，我开始了百度，看到别人的博客，知道了在**<code>rules</code>**下配置如下信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 别急着运行你的项目———这里有坑</p><p>看图</p><p>此图  是配置信息</p><p><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/assets/url-loader-%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E4%BB%A5.png"></p><p>此图是运行结果</p><p><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/assets/url-loader-%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%88%B0.png"></p><p>此时你会发现  不报错了  但是我的图标去哪了？</p><p>当时的小编也不知道啊    可能是被外星人给叼走了</p><p>哈哈   开个玩笑</p><p>经过小编的不懈努力  至于找到了问题的所在</p><p>这个因为没有设置**<code>limit</code>**选项</p><p>你可能会问这是什么东东</p><p>别急   先来和小编一起看看文档</p><p><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/assets/%E6%96%87%E6%A1%A3.png"></p><p>看图可以看出  是要设置文件的大小的  这个属性的默认值是undefined</p><p>当然    小编怕你有疑问  再给你贴出一副图<br><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/asset_img/unde.png"></p><p>这上面详细写了各个选项的具体功能</p><p>此时的你  应该已经很明确了问题原因的所在 和解决的办法</p><p>此时  就来看看我们伟大的成就吧</p><p>看图   配置</p><p><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/assets/url-loader-%E8%A7%A3%E5%86%B3.png"></p><p>再来看运行的结果   如图：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/iconfont/assets/url-loader-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.png"></p><p>此时，问题就完美解决了</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> iconfont </category>
          
          <category> Vue字体图标不显示的设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iconfont </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css 负外边距的巧妙运用</title>
      <link href="2019/03/06/css/css-margin-negative/"/>
      <url>2019/03/06/css/css-margin-negative/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote><p>本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</p></blockquote><h2 id="2、说明"><a href="#2、说明" class="headerlink" title="2、说明"></a>2、说明</h2><blockquote><p>本文所有的元素均为block（块级元素），inline-block和inline的margin某些方向上都是无效的，所以这里不予讨论。</p></blockquote><h2 id="3、margin-left或者margin-right为负数"><a href="#3、margin-left或者margin-right为负数" class="headerlink" title="3、margin-left或者margin-right为负数"></a>3、margin-left或者margin-right为负数</h2><blockquote><p>当块元素width:auto时，margin-left和margin-right会增加元素的宽度<br>当有具体width时，margin-left向左移动,<br>margin-right 减少css的读取宽度 如下图 （也就是后面的元素会挤进来）</p><p><a href="https://www.cnblogs.com/chenlei987/p/10410428.html">https://www.cnblogs.com/chenlei987/p/10410428.html</a></p></blockquote><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然 有 不好的地方 请大家帮忙指出 学习永无止境</p><p>小编一直认为 人外有人 天外有天 一起学习 共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 负外边距的巧妙运用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些不常见，但却非常实用的 css 属性</title>
      <link href="2018/09/16/css/css-attr-practical/"/>
      <url>2018/09/16/css/css-attr-practical/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文是本人在网络上看到的好的文章，好的 博客等等一切好的东西的地址。</p><p>如有侵犯作者权益的任何行为，请及时与本人沟通，本人将及时处理。</p><p>本人做这篇收集博客的主要初衷是为了自己和小伙伴能够更好的学习复习了解掌握更多的知识。</p><p>如有带来不便，请见谅！</p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/6jt6zSiXEv-y0UoR_aIXFw">原文链接</a>  如若想看原文。请点击</p></blockquote><h3 id="常见实用的css属性"><a href="#常见实用的css属性" class="headerlink" title="常见实用的css属性"></a>常见实用的css属性</h3><h4 id="1、-webkit-line-clamp"><a href="#1、-webkit-line-clamp" class="headerlink" title="1、-webkit-line-clamp"></a>1、-webkit-line-clamp</h4><blockquote><p>作用： 可以把 块容器 中的内容限制为指定的行数。并且在超过行数后，在最后一行显示”…” </p><p>使用场景： 在文本内容多少不确定，但显示区域确定的时候，一般使用这个属性做限定</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>; <span class="comment">/*值必须为-webkit-box或者-webkit-inline-box*/</span></span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>; <span class="comment">/*值必须为vertical*/</span></span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2; <span class="comment">/*值为数字，表示一共显示几行*/</span></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; <span class="comment">/*超出隐藏。必须设置*/</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-line-clamp">查看MDN</a> 请点击</p></blockquote><h4 id="2、all"><a href="#2、all" class="headerlink" title="2、all"></a>2、all</h4><blockquote><p>作用：将除却 unicode-bidi 与 direction 之外的所有属性重设至其初始值，或继承值。</p><p>使用场景： 偶尔看到， 未使用过， 具体不太清楚， 可查看mdn，有例子</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">all</span>: <span class="selector-tag">unset</span>; <span class="comment">/*initial | inherit | unset*/</span></span><br></pre></td></tr></table></figure><ul><li>initial 改变该元素或其父元素的所有属性至初始值。</li><li>inherit 改变该元素或其父元素的所有属性的值至他们的父元素属性的值</li><li>unset 如果该元素的属性的值是可继承的，则改变该元素或该元素的父元素的所有属性的值为他们父元素的属性值，反之则改变为初始值</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/all">查看MDN</a> 请单击</p></blockquote><h4 id="3、box-decoration-break"><a href="#3、box-decoration-break" class="headerlink" title="3、box-decoration-break"></a>3、box-decoration-break</h4><blockquote><p>作用：用来定义当元素跨多行、多列或多页时，元素的片段应如何呈现。</p><ul><li>指定的值将影响以下元素的表现：<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background"><code>background</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border"><code>border</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image"><code>border-image</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow"><code>box-shadow</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path"><code>clip-path</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a></li></ul></li></ul><p>使用场景：</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">box-decoration-break</span>: <span class="selector-tag">slice</span>;</span><br><span class="line"><span class="selector-tag">box-decoration-break</span>: <span class="selector-tag">clone</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">box-decoration-break</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">box-decoration-break</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">box-decoration-break</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-decoration-break">查看MDN</a> 请点击</p></blockquote><h4 id="4、caret-color"><a href="#4、caret-color" class="headerlink" title="4、caret-color"></a>4、caret-color</h4><blockquote><p>作用：用来定义插入光标（caret）的颜色，这里说的插入光标，就是那个在网页的可编辑器区域内，用来指示用户的输入具体会插入到哪里的那个一闪一闪的形似竖杠 | 的东西。</p><p>使用场景：改变可编辑区域的插入光标的颜色</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">caret-color</span>: <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/caret-color">查看MDN</a> 请点击</p></blockquote><h4 id="5、clip-path-shape-outside"><a href="#5、clip-path-shape-outside" class="headerlink" title="5、clip-path / shape-outside"></a>5、clip-path / shape-outside</h4><ul><li>clip-path</li></ul><blockquote><p>作用：使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。类似的裁剪还有 svg 的 clipPath。</p><p>取值：clip-path 的取值有以下几种图形</p><ul><li>inset(xxx): 裁剪为长方形</li><li>circle(xx): 裁剪为原型</li><li>ellipse(xxx): 裁剪为椭圆</li><li>polygon(xx): 裁剪为多边形</li><li>none: 不裁剪</li></ul><p>使用场景：对元素进行裁剪时</p><p>代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">none</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;clip-source&gt; values */</span> </span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">url</span>(<span class="selector-tag">resources</span><span class="selector-class">.svg</span><span class="selector-id">#c1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;geometry-box&gt; values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">margin-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">padding-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">fill-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">stroke-box</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">view-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;basic-shape&gt; values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">inset</span>(100<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">circle</span>(50<span class="selector-tag">px</span> <span class="selector-tag">at</span> 0 100<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 100% 50%, 50% 100%, 0% 50%);</span><br><span class="line">clip-path: path(&#x27;M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Box and shape values combined */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">padding-box</span> <span class="selector-tag">circle</span>(50<span class="selector-tag">px</span> <span class="selector-tag">at</span> 0 100<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path">查看MDN</a> 请点击</p></blockquote><ul><li>shape-outside</li></ul><blockquote><p>定义：定义了一个可以是非矩形的形状，相邻的内联内容应围绕该形状进行包装。 默认情况下，内联内容包围其边距框; <code>shape-outside</code>提供了一种自定义此包装的方法，可以将文本包装在复杂对象周围而不是简单的框中。</p><p>作用：属性指定使用下面列表的值来定义浮动元素的浮动区域。这个浮动区域决定了行内内容（浮动元素）所包裹的形状。</p><p>取值：详细请查看<strong>MDN</strong></p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 关键字值 */</span></span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">margin-box</span>;</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">padding-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数值 */</span></span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">circle</span>();</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">ellipse</span>();</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">inset</span>(10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">polygon</span>(10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>, 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>, 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;url&gt; 值 */</span></span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span><span class="selector-class">.png</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 渐变值 */</span></span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>, <span class="selector-tag">rgba</span>(255, 255, 255, 0) 150<span class="selector-tag">px</span>, <span class="selector-tag">red</span> 150<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局值 */</span></span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">shape-outside</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="6、object-fit-object-position"><a href="#6、object-fit-object-position" class="headerlink" title="6、object-fit / object-position"></a>6、object-fit / object-position</h4><ul><li><h3 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a>object-fit</h3></li></ul><blockquote><p>作用：</p><ul><li>指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框</li><li>可以通过使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position"><code>object-position</code></a> 属性来切换被替换元素的内容对象在元素框内的对齐方式。</li></ul><p>取值：</p><ul><li>contain：被替换的内容将被缩放，以在填充元素的内容框时保持其宽高比。 整个对象在填充盒子的同时保留其长宽比，因此如果宽高比与框的宽高比不匹配，该对象将被添加“<a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E9%82%8A">黑边</a>”。</li><li>cover：被替换的内容在保持其宽高比的同时填充元素的整个内容框。如果对象的宽高比与内容框不相匹配，该对象将被剪裁以适应内容框</li><li>fill：被替换的内容正好填充元素的内容框。整个对象将完全填充此框。如果对象的宽高比与内容框不相匹配，那么该对象将被拉伸以适应内容框</li><li>none：被替换的内容将保持其原有的尺寸。</li><li>scale-down：内容的尺寸与 <code>none</code> 或 <code>contain</code> 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。</li></ul><p>案例详情 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit">请查看MDN</a></p></blockquote><ul><li>object-position</li></ul><blockquote><p>作用：规定了<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element">可替换元素</a>的内容，在这里我们称其为对象（即 <strong>object-position</strong> 中的 <strong>object）</strong>，在其内容框中的位置。可替换元素的内容框中未被对象所覆盖的部分，则会显示该元素的背景</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &lt;position&gt; values */</span></span><br><span class="line"><span class="selector-tag">object-position</span>: <span class="selector-tag">center</span> <span class="selector-tag">top</span>;</span><br><span class="line"><span class="selector-tag">object-position</span>: 100<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">object-position</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">object-position</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">object-position</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><p>取值：</p><p>position:使用 1 到 4 个值来定义该元素在它所处的二维平面中的定位。可以使用相对或绝对偏移</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position">详情请点击MDN</a></p></blockquote><h4 id="7、font-stretch"><a href="#7、font-stretch" class="headerlink" title="7、font-stretch"></a>7、font-stretch</h4><blockquote><p>作用：为字体定义一个正常或经过伸缩变形的字体外观，它仅仅意味着当有多种字体可供选择时，会为字体选择最适合的大小。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">ultra-condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">extra-condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">semi-condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">semi-expanded</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">expanded</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">extra-expanded</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">ultra-expanded</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-stretch">查看详情请点击MDN</a></p></blockquote><h4 id="8、max-content-min-content-fill-available-fit-content"><a href="#8、max-content-min-content-fill-available-fit-content" class="headerlink" title="8、max-content / min-content / fill-available / fit-content"></a>8、max-content / min-content / fill-available / fit-content</h4><blockquote><p>这几个值都可用在 width, height, min-width, min-height, max-width 和 max-height 属性上。</p><p>display 必须为 inline-block 或者 block，否则上面的值不起作用。</p><ul><li><p><strong>fill-available</strong></p><p>元素撑满可用空间。参考的基准为父元素有多宽多高。</p><p>类似子元素的 div 撑满父元素的宽，fill-available 不仅可以撑满宽还能撑满高</p></li><li><h5 id="max-content"><a href="#max-content" class="headerlink" title="max-content"></a>max-content</h5><p>它的宽度或者高度，会自动调整为，刚刚好容纳下子元素中那个长度最长(按照文字不换行时计算)的元素即可。<br>参考的基准为子元素有多宽多高。</p></li><li><h5 id="min-content"><a href="#min-content" class="headerlink" title="min-content"></a>min-content</h5><p>它的宽度或者高度，会自动调整为，刚刚好容纳下子元素中那个“最小宽度值”最大的元素即可，剩余超长的要么换行，要么溢出<br>参考的基准为子元素“最小宽度值”有多宽多高。</p><p>什么是“最小宽度值”？<br>比如图片，最小宽度值，就是图片原始的宽高；如果是一串中文，则最小宽度值为单个汉字的宽高；如果是一串英文，则最小宽度值为里面单词最长的那个。</p></li><li><h5 id="fit-content"><a href="#fit-content" class="headerlink" title="fit-content"></a>fit-content</h5><p>表示元素自动伸缩到内容的宽度，和 max-content 的区别为，都是刚刚好容纳下子元素中那个长度最长的元素即可。</p><p>不同的是 max-content 在计算时按照文字不换行时计算，如果超过父元素，则不换行，直接产生滚动条；而 fit-content 在超过父元素后，换行，不产生滚动条。</p></li></ul></blockquote><h4 id="9、fit-content-函数"><a href="#9、fit-content-函数" class="headerlink" title="9、fit-content()函数"></a>9、fit-content()函数</h4><blockquote><p>使用场景：用在 grid 布局当中。</p></blockquote><h4 id="10、resize"><a href="#10、resize" class="headerlink" title="10、resize"></a>10、resize</h4><h4 id="11、scroll-behavior"><a href="#11、scroll-behavior" class="headerlink" title="11、scroll-behavior"></a>11、scroll-behavior</h4><blockquote><p>作用：当用户通过 API 触发滚动操作时，CSS 属性 scroll-behavior 为一个滚动框指定滚动行为， 平滑到达还是立即到达</p></blockquote><h4 id="12、max-min"><a href="#12、max-min" class="headerlink" title="12、max() / min()"></a>12、max() / min()</h4><blockquote><p>max 在两者这件取最大；min 函数在两者之间取最小。</p><p>max，min 可以用在任何可以设置 <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> 等值的地方</p></blockquote><h4 id="13、clamp"><a href="#13、clamp" class="headerlink" title="13、clamp()"></a>13、clamp()</h4><blockquote><p>作用：clamp 函数会在定义的 三个值之间，取中间的那个值，是大小在中间，不是位置在中间，</p><p>语法：clamp(MIN, VAL, MAX)</p><p>使用场景：和 max，min 函数一样，可以用在任何可以设置 <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> 等值的地方</p></blockquote><h4 id="14、conic-gradient"><a href="#14、conic-gradient" class="headerlink" title="14、conic-gradient()"></a>14、conic-gradient()</h4><blockquote><p>作用：”锥形渐变”。它是围绕中心点按照扇形方向进行旋转的渐变(而不是从中心点辐射)</p></blockquote><h4 id="15、-out-of-range-in-range"><a href="#15、-out-of-range-in-range" class="headerlink" title="15、:out-of-range / :in-range"></a>15、:out-of-range / :in-range</h4><h4 id="16、writing-mode"><a href="#16、writing-mode" class="headerlink" title="16、writing-mode"></a>16、writing-mode</h4><blockquote><p>作用：定义了文本水平或垂直排布以及在块级元素中文本的书写方向</p></blockquote><h4 id="17、inline-size"><a href="#17、inline-size" class="headerlink" title="17、inline-size"></a>17、inline-size</h4><h4 id="18、block-size"><a href="#18、block-size" class="headerlink" title="18、block-size"></a>18、block-size</h4><h3 id="19、drop-shadow"><a href="#19、drop-shadow" class="headerlink" title="19、drop-shadow"></a>19、drop-shadow</h3><blockquote><p>作用：给盒子设置阴影， box-shadow和这个属性类似，但不相同。用 <code>drop-shadow</code> 可以让我们给一个元素添加阴影，这个阴影并不对应于它的边界框，，而是使用该元素的Alpha蒙版。例如，我们可以在透明的PNG或SVG徽标中添加投影</p><p>写法：</p><p>img {<br>​    filter: drop-shadow(0.35rem 0.35rem 0.4rem rgba(0, 0, 0, 0.5));<br>}</p><p><a href="https://juejin.im/post/6863028044165038088">还不错的讲解</a></p></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p><p>程序的世界，写作的过程中部分文章难免会参考与借鉴网络上的一些资源、见解。如有侵权请与作者联系。如若如实侵权，文章会在24小时内删除。如若由于部分文章存在侵权行为给您带来不便还请见谅。</p><p>本博客仅仅为自己以及前端爱好者提供便利，不做任何商业用途。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 不常见但是实用css属性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css 中间文字 两端横线</title>
      <link href="2018/09/12/css/css-line-text/"/>
      <url>2018/09/12/css/css-line-text/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本人水平有限，文章内容难免会出现问题，如果有问题欢迎指出，谢谢</p></blockquote><h3 id="方式一-为元素加定位的方式"><a href="#方式一-为元素加定位的方式" class="headerlink" title="方式一 为元素加定位的方式"></a>方式一 为元素加定位的方式</h3><blockquote><p>dome链接地址 <a href="http://www.example.geyunjie.com/css/line">http://www.example.geyunjie.com/css/line</a></p></blockquote><blockquote><p>html 代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dome1&quot;</span>&gt;</span>测试一下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>css 代码</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dome1</span>&#123;</span><br><span class="line">       <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.dome1</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.dome1</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 中间文字 两端横线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好的文章 好的博客  好的语录等等</title>
      <link href="2018/09/12/other/classic-article/"/>
      <url>2018/09/12/other/classic-article/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本文是本人在网络上看到的好的文章，好的 博客等等一切好的东西的地址。</p><p>如有侵犯作者权益的任何行为，请及时与本人沟通，本人将及时处理。</p><p>本人做这篇收集博客的主要初衷是为了自己和小伙伴能够更好的学习复习了解掌握更多的知识。</p><p>如有带来不便，请见谅！</p></blockquote><h3 id="html篇"><a href="#html篇" class="headerlink" title="html篇"></a>html篇</h3><h3 id="css篇"><a href="#css篇" class="headerlink" title="css篇"></a>css篇</h3><h3 id="js篇"><a href="#js篇" class="headerlink" title="js篇"></a>js篇</h3><h3 id="nodejs篇"><a href="#nodejs篇" class="headerlink" title="nodejs篇"></a>nodejs篇</h3><h3 id="vue篇"><a href="#vue篇" class="headerlink" title="vue篇"></a>vue篇</h3><h4 id="1-vue-js-组件复用和扩展之道"><a href="#1-vue-js-组件复用和扩展之道" class="headerlink" title="1.vue.js 组件复用和扩展之道"></a>1.<a href="https://www.jianshu.com/p/acee66d4db3a">vue.js 组件复用和扩展之道</a></h4><h4 id="2-你可能不知道的一些Vue实战技巧"><a href="#2-你可能不知道的一些Vue实战技巧" class="headerlink" title="2.你可能不知道的一些Vue实战技巧"></a>2.<a href="https://mp.weixin.qq.com/s?__biz=MzIyMDkwODczNw==&mid=2247487902&idx=1&sn=9ab3d1400b0452717e32300da10de774&chksm=97c58c30a0b205262c6ac60b02a670cd55d951a169cd8a2e7f6301ea83c1f7615ff0d7c528fc&scene=21#wechat_redirect">你可能不知道的一些Vue实战技巧</a></h4><h3 id="代码整洁之道"><a href="#代码整洁之道" class="headerlink" title="代码整洁之道"></a>代码整洁之道</h3><h4 id="1-编写自文档化JavaScript的15种方法"><a href="#1-编写自文档化JavaScript的15种方法" class="headerlink" title="1.编写自文档化JavaScript的15种方法"></a>1.<a href="https://www.jianshu.com/p/1a1a7c56605f">编写自文档化JavaScript的15种方法</a></h4><h3 id="MAC-篇"><a href="#MAC-篇" class="headerlink" title="MAC 篇"></a>MAC 篇</h3><h4 id="1、Mac-键盘快捷键"><a href="#1、Mac-键盘快捷键" class="headerlink" title="1、Mac 键盘快捷键"></a>1、<a href="https://support.apple.com/zh-cn/HT201236">Mac 键盘快捷键</a></h4><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>1.<a href="https://www.jianshu.com/p/c684b8ff14d3">第51期 网易云音乐前端性能监控实践 &amp; 那些不常见却非常实用的css属性 &amp; 携程RN渲染性能优化实践</a></p><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 好的文章 好的博客  好的语录等等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJS, AMD, CMD的区别</title>
      <link href="2018/08/15/js/amdcmdcom/"/>
      <url>2018/08/15/js/amdcmdcom/</url>
      
        <content type="html"><![CDATA[<p>CommonJS, AMD, CMD都是JS模块化的规范。<br>CommonJS是服务器端js模块化的规范，NodeJS是这种规范的实现。<br>AMD(异步模块定义)和CMD(通用模块定义)都是浏览器端js模块化的规范。RequireJS 遵循的是 AMD，SeaJS 遵循的是 CMD</p><h2 id="CommonJS（同步模块定义）"><a href="#CommonJS（同步模块定义）" class="headerlink" title="CommonJS（同步模块定义）"></a><strong>CommonJS（同步模块定义）</strong></h2><p>一个单独的文件就是一个模块<br>加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象<br>所以，定义一个模块就是写一个新的js文件，但是最后要将文件的内容exports出来</p><ul><li>如何定义模块和加载模块？</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个module.js文件</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是定义的模块&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 导出这个模块</span></span><br><span class="line"><span class="comment"> * 1.第一种返回方式 module.exports = A; </span></span><br><span class="line"><span class="comment"> * 2.第二种返回方式 module.exports.test = A</span></span><br><span class="line"><span class="comment"> * 3.第三种返回方式 exports.test = A;</span></span><br><span class="line"><span class="comment"> * 注意：module.exports导出方式   与    exports导出方式是有区别的</span></span><br><span class="line"><span class="comment"> *      具体区别详见其他文章</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.test = A;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再写一个dome.js文件，导入刚才定义好的模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">&quot;./module&quot;</span>);  <span class="comment">//加载这个模块  require中是导入模块的路径   前面的变量名自定义  代表的是导入模块所导出的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用这个模块，不同的返回方式用不同的方式调用</span></span><br><span class="line"><span class="comment"> * 1.第一种调用方式 module();</span></span><br><span class="line"><span class="comment"> * 2.第二种调用方式 module.test();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 接下来我们去执行这个文件，前提是你本地要安装node.js</span></span><br><span class="line"><span class="comment"> * 首先打开cmd, cd到这个文件所在的目录下,执行: node dome.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">node dome.js</span><br><span class="line"><span class="comment">//输出结果：我是定义的模块</span></span><br></pre></td></tr></table></figure><p>以上就是CommonJS规范下的模块定义与加载的形式</p><p>注意： CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作</p><p>​    因此  -&gt;  像Node.js比较适用CommonJS的原因在于：Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式</p><p>​    而  -&gt;  浏览器环境  则  不适合适用CommonJS，原因在于浏览器环境要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD CMD 解决方案</p><h2 id="AMD（异步模块定义）"><a href="#AMD（异步模块定义）" class="headerlink" title="AMD（异步模块定义）**"></a><strong>AMD</strong>（异步模块定义）**</h2><p>AMD规范通过define方法去定义模块，通过require方法去加载模块。RequireJS实现了这种规范</p><p>AMD只有一个接口：define(id?,dependencies?,factory); 它要在声明模块的时候制定所有的依赖(dep)，并且还要当做形参传到factory中。要是没什么依赖，就定义简单的模块（或者叫独立的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个module1.js文件</span></span><br><span class="line"><span class="comment">//定义独立的模块</span></span><br><span class="line">define(&#123;</span><br><span class="line">    methodA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是module1的methodA&#x27;</span>);    </span><br><span class="line">    &#125;,</span><br><span class="line">    methodB: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是module1的methodB&#x27;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个module2.js文件</span></span><br><span class="line"><span class="comment">//另一种定义独立模块的方式</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        methodA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我是module2的methodA&#x27;</span>);    </span><br><span class="line">        &#125;,</span><br><span class="line">        methodB: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;我是module2的methodB&#x27;</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个module3.js文件</span></span><br><span class="line"><span class="comment">//定义非独立的模块（这个模块依赖其他模块）</span></span><br><span class="line">define([<span class="string">&#x27;module1&#x27;</span>, <span class="string">&#x27;module2&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        methodC: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            m1.methodA();</span><br><span class="line">            m2.methodB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再定义一个main.js，去加载这些个模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;module3&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m3</span>)</span>&#123;</span><br><span class="line">    m3.methodC();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们在一个html文件中去通过RequireJS加载这个main.js</span></span><br><span class="line"><span class="comment">//等号右边的main指的main.js</span></span><br><span class="line">&lt;script data-main=<span class="string">&quot;main&quot;</span> src=<span class="string">&quot;require.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浏览器控制台输出结果</span></span><br><span class="line">我是module1的methodA</span><br><span class="line">我是module2的methodB</span><br></pre></td></tr></table></figure><h2 id="CMD（通用模块定义）"><a href="#CMD（通用模块定义）" class="headerlink" title="CMD（通用模块定义）"></a><strong>CMD（通用模块定义）</strong></h2><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出</p><p>AMD和CMD的区别：</p><ol><li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible（尽可能的懒加载，也称为延迟加载，即在需要的时候才加载）。</li><li>CMD 推崇依赖就近，AMD 推崇依赖前置。虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</li><li>AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。</li></ol><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> common.js </tag>
            
            <tag> cmd </tag>
            
            <tag> amd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础 一 之 指令</title>
      <link href="2018/08/15/vue/vue-1/"/>
      <url>2018/08/15/vue/vue-1/</url>
      
        <content type="html"><![CDATA[<h2 id="vue基础指令以及案例"><a href="#vue基础指令以及案例" class="headerlink" title="vue基础指令以及案例"></a>vue基础指令以及案例</h2><h3 id="v-html与v-text"><a href="#v-html与v-text" class="headerlink" title="v-html与v-text"></a>v-html与v-text</h3><ul><li>v-html 可以渲染标签   但存在隐患    在敏感的地方使用可能会造成 跨站脚本攻击</li><li>v-text 会直接把标签当成文本渲染</li></ul><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>v-cloak 的作用是阻止页面在mounted之前渲染标签内的数据   也就是说在插值表达式没有被替换之前，不渲染页面</li></ul><h3 id="v-bind-与-v-on"><a href="#v-bind-与-v-on" class="headerlink" title="v-bind 与 v-on"></a>v-bind 与 v-on</h3><ul><li>v-bind 绑定属性   缩写为  ：</li><li>v-on 绑定事件     缩写为 @</li></ul><p><a href="http://www.example.geyunjie.com/vue/%E8%B7%91%E9%A9%AC%E7%81%AF%E6%95%88%E6%9E%9C.html">跑马灯例子</a></p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>.stop 阻止事件冒泡</li><li>.prevent 阻止默认事件（阻止默认行为）</li><li>.capture 实现捕获触发事件</li><li>.self 只有点击自己的时候才会触发</li><li>.once 只触发一次</li></ul><h4 id="stop-和-self-的区别"><a href="#stop-和-self-的区别" class="headerlink" title=".stop 和 .self 的区别"></a>.stop 和 .self 的区别</h4><ul><li>相同点：都能阻止冒泡</li><li>不同点：stop阻止所有的事件冒泡   self只阻止了自己的事件冒泡（其他组件还是会冒泡）</li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>实现表单元素 和model 中的数据双向绑定  只能使用在  表单元素中</p><p>是v-on 和 v-bind 在表单上同时使用时的 语法糖</p><p><a href="http://www.example.geyunjie.com/vue/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8.html">简易计算器</a></p><h3 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h3><h4 id="使用class绑定样式"><a href="#使用class绑定样式" class="headerlink" title="使用class绑定样式"></a>使用class绑定样式</h4><ul><li>数组：<h1 :class="['red','thin']">这是一个可爱的h1</h1></li><li>数组中使用三元表达式：<h1 :class="['red','thin',isactive?'active':'']">这是一个可爱的h1</h1></li><li>数组中嵌套对象：<h1 :class="['red','thin',{'cative':isactive}]">这是一个可爱的h1</h1></li><li>直接使用对象：<h1 :class="{red:ture,active:ture}">这是一个可爱的h1</h1></li></ul><h4 id="使用style-内联样式"><a href="#使用style-内联样式" class="headerlink" title="使用style 内联样式"></a>使用style 内联样式</h4><ul><li>对象：<h1 :style="{color:'red'}">这是一个可爱的h1</h1></li><li>定义到data中  直接  :style 引用</li><li>以数组的形式   引用多个  data  字段</li></ul><h3 id="v-for-与-：key"><a href="#v-for-与-：key" class="headerlink" title="v-for 与  ：key"></a>v-for 与  ：key</h3><p>用于编辑数组或对象</p><ul><li>数组：<h1 v-for='(item,index) in data' :key='index'>这是一个可爱的h1</h1></li><li>对象：<h1 v-for='(val,key,inde) in data' :key='key'>这是一个可爱的h1</h1></li><li>对象数组：<h1 v-for='item in data' :key='item.id'>这是一个可爱的h1</h1></li><li>遍历数字：。。。</li><li>vue2.0之后，必须给每一项绑定一个key    key绑定的值只能是数字或字符串（string、number）</li></ul><p>key的作用是给每一项一个唯一的标识，能够节省性能</p><h3 id="v-if-和v-show-控制元素的显示或隐藏"><a href="#v-if-和v-show-控制元素的显示或隐藏" class="headerlink" title="v-if 和v-show 控制元素的显示或隐藏"></a>v-if 和v-show 控制元素的显示或隐藏</h3><ul><li>v-if：控制元素时候渲染dom节点   每次都会创建或者删除dom节点    有较高的切换性能消耗</li><li>v-show：控制元素的dispaly：none；  使元素显示或隐藏   有较高的初始渲染消耗</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 基础 一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布局</title>
      <link href="2018/07/13/html/layout/"/>
      <url>2018/07/13/html/layout/</url>
      
        <content type="html"><![CDATA[<p>布局，是每个前端工程师的基本功。结合自己的学习，总结一下自己所了解的一些比较重要的关于布局的一些知识</p><p>比如：两栏布局，三栏布局（统称为多栏布局），等高布局等等</p><h2 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h2><h3 id="定宽做法"><a href="#定宽做法" class="headerlink" title="定宽做法"></a>定宽做法</h3><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>lorem*10<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>Lorem*10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="http://www.blog.image.qcwy.org.cn/old/layout/1.png"></p><p>注意：</p><ul><li>html中的 <strong>lorem<em>10是乱数假文，是代替文字的。偷懒使用一下** ，在你需要使用的时候，在编辑器中输入**lorem</em>10</strong>就会出现图片上的那些英文</li><li>现在实现的两栏布局是定宽的。但是，很多时候的业务需求可能是主体区域是不定宽的</li></ul><h3 id="不定宽做法"><a href="#不定宽做法" class="headerlink" title="不定宽做法"></a>不定宽做法</h3><p>只需要把主体区域的定宽的属性删除，把浮动属性删除，添加上<strong>overflow: hidden</strong>属性即可</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line"> <span class="attribute">-float</span>: right;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line"> <span class="attribute">-width</span>: <span class="number">1000px</span>;</span><br><span class="line"> +overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减号代表删除的代码，加号代表添加的代码</p><p>html代码不变</p><p>效果图不再展示，因为展示的话需要gif动态图，制作太繁琐。如需看效果，只需要把代码粘过去运行即可</p><p><strong>注意：要想知道为什么加了overflow: hidden属性后可以实现这种效果，请详细了解块级格式化上下文（简称：BFC），其他文章有详细介绍。html部分，需要（必须）把浮动元素放在前面</strong></p><p>可能你会遇到这种问题：两个区域距离太近，想让中间有缝隙，这该怎么做呢？</p><p>答：</p><ul><li>设置浮动元素的外边距即可，那边需要缝隙，就写那边的外边距。</li><li>如果你设置的不是浮动元素，还要与浮动之间有距离，那你就<strong>必须设置你想要的距离加上浮动元素的宽度</strong></li></ul><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>三栏布局的原理：三栏布局以及多栏布局的思想和两栏布局相同。</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>Lorem<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>Lorem<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>Lorem<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/layout/2.png"></p><p>注意：上面代码为自适应的布局</p><h2 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h2><h3 id="方式一-：-CSS3的弹性盒模型"><a href="#方式一-：-CSS3的弹性盒模型" class="headerlink" title="方式一 ： CSS3的弹性盒模型"></a>方式一 ： CSS3的弹性盒模型</h3><h3 id="方式二-：-javascript控制"><a href="#方式二-：-javascript控制" class="headerlink" title="方式二 ： javascript控制"></a>方式二 ： javascript控制</h3><h3 id="方式三-：-伪等高"><a href="#方式三-：-伪等高" class="headerlink" title="方式三 ： 伪等高"></a>方式三 ： 伪等高</h3><p>核心思路：</p><ol><li>给非主体盒子设置一个主体盒子永远都不可能超出的高度</li><li>给非主体盒子设置一个下外边距为  高度  减去  需要显示的非主体盒子的其他盒子的最大高度   的负边距。例如下面代码：margin-bottom: -（10000-710）px。此时，清除浮动的伪元素必定会在次处或以下</li><li>给总体大盒子设置为overflow: hidden，让超出的隐藏。</li><li>这样，当主体内容足够多时，其他区域就会以背景图的方式显示</li></ol><p>缺点：必须要精确的得知侧边栏的高度，以防止主体区域内容过少，使其他的盒子显示不全</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">  overflow: hidden;//+</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  height: 10000px;//+</span><br><span class="line">  margin-bottom: -9290px;//+</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码与两栏布局相同</p><p>演示就不再次演示了    大家可以实操练习下</p><p>多栏布局都可以使用这种思想做</p><p>注意：这种方式实现的并不是真正的等高，而是伪等高，就是看着是等高，其实不是</p><h2 id="html元素的书写顺序"><a href="#html元素的书写顺序" class="headerlink" title="html元素的书写顺序"></a>html元素的书写顺序</h2><p>必须先写浮动元素，然后再写自适应元素</p><p>原因：如果先写自适应元素，自适应元素是常规流盒子，默认是撑满屏幕的。然后，下面再使用浮动元素的时候，浮动元素会避开标准流盒子。就会导致，自适应的盒子再顶部，浮动的元素在下面</p><p>27分</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> 页面布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取url的各个参数的值</title>
      <link href="2018/05/12/js/qureyUrlParams/"/>
      <url>2018/05/12/js/qureyUrlParams/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于下面的代码用的是简写的方式  为了所有人都能看得懂   或者说即使看不懂   看到思路  根据思路也能实现、<br>所以写了以下的个人思路  有不好的  请私信我   对于私信的人  感激不尽  因为的你私信会让小编更上一层楼</p><blockquote><ol><li>定义一个url地址（就是确定要 解析的url地址）</li><li>定义一个方法用来解析参数</li><li>方法：先创建一个对象，用于存放参数的键值对</li><li>方法：先判断传入的参数是否为空   为空  直接返回一个空对象，不为空  进行解析</li><li>方法：使用split方法把  ？  符号之前的数据剔除</li><li>方法：使用split方法把数据以  &amp;  作为切割点  切割成数组</li><li>方法：使用forEach对切割好的数组进行遍历</li><li>方法：再次使用split方法 把遍历的每一项 以  =  进行分割   分割成的数组的第一项作为 key 属性  第二项作为  value  属性  存放到之前定义好的 空对象中</li><li>方法：返回这个对象</li></ol></blockquote><h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个需要传递的URL</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&#x27;</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * str =&gt;需要解析的url</span></span><br><span class="line"><span class="comment">   * 返回的是一个解析好的对象</span></span><br><span class="line"><span class="comment">   * &#123;</span></span><br><span class="line"><span class="comment">    f: &quot;8&quot;</span></span><br><span class="line"><span class="comment">    ie: &quot;utf-8&quot;</span></span><br><span class="line"><span class="comment">    rsv_bp: &quot;1&quot;</span></span><br><span class="line"><span class="comment">    tn: &quot;baidu&quot;</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> qureyUrlParams = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> objStr = &#123;&#125;</span><br><span class="line">    str &amp;&amp; str.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&amp;&#x27;</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> objStr[item.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]] = item.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> objStr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(qureyUrlParams(url));</span><br></pre></td></tr></table></figure><p>相信  以上面写的思路，大家都能看的非常明白</p><p>但是：小编觉得这不是最好的解决方案，最好的解决方案是用正则表达式来进行解析。</p><p>正则表达式   的解决方案   详见   小编的  正则表达式   里面的案例</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 获取url的各个参数的值 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端规范</title>
      <link href="2018/04/19/other/norm/"/>
      <url>2018/04/19/other/norm/</url>
      
        <content type="html"><![CDATA[<h1 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a><strong>前端规范</strong></h1><ol><li>命名规则</li></ol><ul><li>头 : header</li><li>内容 : content/container</li><li>尾部 : footer</li><li>导航 : nav</li><li>侧栏 : sidebar</li><li>栏目 : column</li><li>外围盒子控制整体布局 : wrapper</li><li>左 右 中 : left / center / right</li><li>登录条 : loginbar</li><li>标志 : logo</li><li>广告 : banner</li><li>页面主题 : main</li><li>热点 : hot</li><li>新闻 : news</li><li>下载 : download</li><li>子导航 : subnav</li><li>菜单 : menu</li><li>子菜单 : submenu</li><li>搜索 : search</li><li>友情链接 : friendlink</li><li>页脚 : footer</li><li>版权 : copyright</li><li>滚动 : scroll</li><li>内容 : content</li><li>标签页 : tab</li><li>文章列表 : list</li><li>提示信息 : msg</li><li>小技巧 : tips</li><li>栏目标题 : title</li><li>加入 : joinus</li><li>指南 : guild</li><li>服务 : service</li><li>注册 : regsiter</li><li>状态 : status</li><li>投票 : vote</li><li>合作伙伴 : partner</li></ul><ol start="2"><li>注释的写法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Footer Start*/</span></span><br><span class="line">内容区</span><br><span class="line"><span class="comment">/*Footer End*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>id的命名</p><p>3.1 页面结果</p><ul><li>容器 :  container </li><li>页头 : header</li><li>内容 : content / container </li><li>页面主体 : main </li><li>页尾 : footer </li><li>导航 : nav </li><li>侧栏 : sidebar </li><li>栏目 : column </li><li>页面外围控制整体布局宽度 : wrapper </li><li>左右中 : left / right / center</li></ul><p>3.2 导航</p><ul><li>导航 : nav </li><li>主导航 : mainbav </li><li>子导航 : subnav </li><li>顶导航 : topnav </li><li>边导航 : sidebar </li><li>左导航 : leftsidebar </li><li>右导航 : rightsidebar </li><li>菜单 : menu </li><li>子菜单 : submenu </li><li>标题 : title </li><li>摘要 : summary</li></ul><p>3.3 功能</p><ul><li>  标志 : logo </li><li>广告 : banner </li><li>登陆 : login </li><li>登录条 : loginbar </li><li>注册 : regsiter </li><li>搜索 : search </li><li>功能区 : shop </li><li>标题 : title </li><li>加入 : joinus </li><li>状态 : status </li><li>按钮 : btn </li><li>滚动 : scroll </li><li>标签页 : tab </li><li>文章列表 : list </li><li>提示信息 : msg </li><li>当前的 : current </li><li>小技巧 : tips </li><li>图标 : icon </li><li>注释 : note </li><li>指南 : guild </li><li>服务 : service </li><li>热点 : hot </li><li>新闻 : news </li><li>下载 : download </li><li>投票 : vote </li><li>合作伙伴 : partner </li><li>友情链接 : link </li><li>版权 : copyright</li></ul></li><li><p>css样式</p><p>4.1 重置默认样式</p><p>4.2 添加自定义全局样式</p><p>4.3 抽取文件定义单页面全局样式</p><p>4.3 样式定义规则 ： 重定义 &gt; 伪类 &gt; 自定义 （便于阅读）</p></li><li><p>javascript 书写规范 </p><p>5.1 书写过程 ：每行代码结束结构统一（有无分号-&gt;有的话，每行代码都应该有-&gt; eslint 设置规则，遵守即可）。防止代码冗余 | 与不小心造成与远程代码造成冲突</p><p>5.2  库的引入 ：根据项目需求，尽量的少引入。引入的时候，尽量使用按需引入，节省资源</p><p>5.3 变量命名规则  ：驼峰式命名法 </p><p>5.4 类命名  : 首字母大写, 驼峰式命名</p><p>5.5 函数命名: 首字母小写驼峰式命名</p><p>5.6 命名语义化, 尽可能利用英文单词或其缩写</p><p>5.7 尽量避免使用存在兼容性及消耗资源的方法或属性, 比如eval() &amp;; innerText</p><p>5.8 后期优化中, JavaScript非注释类中文字符须转换成unicode编码使用, 以避免编码错误时乱码显示;</p><p>5.9 代码结构明了, 加适量注释. 提高函数重用率</p><p>5.10 注重 样式 结构 行为 相分离</p></li><li><p>图片规范</p><p>6.1 所有页面元素类图片均放入img文件夹</p><p>6.2 图片格式仅限于gif || png || jpg</p><p>6.3 命名全部用小写英文字母 || 数字 || _ 的组合,其中不得包含汉字 || 空格 || 特殊字符;尽量用易懂的词汇, 便于团队其他成员理解; 另, 命名分头尾两部分, 用下划线隔开, 比如ad_left01.gif || btn_submit.gif</p><p>6.4 在保证视觉效果的情况下选择最小的图片格式与图片质量, 以减少加载时间</p><p>6.5 尽量避免使用半透明的png图片(若使用, 请参考css规范相关说明)</p><p>6.6 运用css sprite技术集中小的背景图或图标, 减小页面http请求, 但注意, 请务必在对应的sprite psd源图中划参考线, 并保存至img目录下</p></li><li><p>注释规范 </p><p>7.1 html注释: 注释格式&lt; !–这儿是注释–&gt;, ‘–’只能在注释的始末位置,不可置入注释文字区域</p><p>7.2 css注释: 注释格式 /*这儿是注释*/</p><p>7.3 JavaScript注释, 单行注释使用’//这儿是单行注释’ ,多行注释使用 /* 这儿有多行注释 */</p></li><li><p>结束语</p></li></ol><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序登录验证</title>
      <link href="2018/04/15/wx/login-wx/"/>
      <url>2018/04/15/wx/login-wx/</url>
      
        <content type="html"><![CDATA[<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>在说怎么做之前，先看下这个流程图</p><p><img src="http://www.blog.image.qcwy.org.cn/old/login-wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E6%B5%81%E7%A8%8B.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看完这个流程图 ，相必大家已经很清楚了。</p><p>为了防止大家不太明白，再次给大家聊一下流程图</p><ol><li>在授权之前，应该选判断是否已经授权。因为在别的地方已经授权了<ul><li>已授权：直接跳过授权的过程，进行本该进行的操作</li><li>未授权：进如以下流程进行授权</li></ul></li><li>获取用户信息。<ul><li>由于用户信息是隐私为题，需要征求用户的同意。所以，把这一步放到第二步，而不是第三步。</li><li>用户同意获取用户信息：获取用户系信息</li><li>用户不同意获取用户信息：终止以下操作，返回最开始授权之前的页面</li></ul></li><li>使用微信提供的API接口wx.login()，请求微信的服务器，获取code<ul><li>成功：返回code</li><li>失败：返回错误信息</li></ul></li><li>使用获取到的<strong>用户信息+code</strong>向公司的服务器发起获取<strong>Token</strong>的  接口  请求。服务器根据传递的数据进行判断<ul><li>请求成功：返回<strong>token</strong> 和请求成功的  状态信息等</li><li>请求失败：返回失败的  错误信息  比如：code不一致等（后端程序员编写具体的接口返回内容）</li></ul></li><li>当请求成功后，进行<strong>本地存储</strong>  ，并开始授权之前的操作<ul><li>使用微信小程序提供的API接口，进行本地存储</li><li>以后再有地方需要token的地方，就会直接从本地获取Token，而无需再次进行用户授权</li></ul></li></ol><p>   注意：部分文章可能会在不就的将来更新</p><p>  如果能够帮助到你，是小编最大的荣幸</p><p>  当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>  小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>  让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
          <category> wx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取html到fontSize大小</title>
      <link href="2018/03/21/js/js-set-html-font-size/"/>
      <url>2018/03/21/js/js-set-html-font-size/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>​    由于本人的能力有限，如若有说得做的不对的地方，还望指出。当然，如若你有更好的方法，或者更优解，还望不吝赐教。</p></blockquote><h3 id="获取视窗高度"><a href="#获取视窗高度" class="headerlink" title="获取视窗高度"></a>获取视窗高度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> htmlWidthPX = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth</span><br></pre></td></tr></table></figure><h3 id="获取html的font-size"><a href="#获取html的font-size" class="headerlink" title="获取html的font-size"></a>获取html的font-size</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> htmlFontSizePX=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].style.fontSize</span><br></pre></td></tr></table></figure><h3 id="设置fontSize"><a href="#设置fontSize" class="headerlink" title="设置fontSize"></a>设置fontSize</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].style.fontSize= xxx + <span class="string">&quot;px&quot;</span></span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><blockquote><p>1.window.getComputedStyle(element, [pseudoElt]) 获取指定元素对应CSS属性的最终计算值</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle">官方解释</a></p></li><li><p>参数解析</p><ul><li>element：必需，要获取样式值的元素对象</li><li>pseudoElt：可选，表示指定节点的伪元素（:before、:after、:first-line、:first-letter等）</li></ul></li><li><p>兼容性</p><ul><li>IE9+浏览器支持此方法</li><li>edge浏览器支持此方法</li><li>谷歌浏览器支持此方法</li><li>opera浏览器支持此方法</li><li>火狐浏览器支持此方法</li><li>safria浏览器支持此方法</li></ul></li><li><p>例子</p><ul><li><pre><code class="js">window.getComputedStyle(element,null)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意：上面获取的是所有的样式属性。是数组的形式</span><br><span class="line"></span><br><span class="line">如果想要获取单独的属性可以使用这个属性getPropertyValue（）</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">window.getComputedStyle(element, &quot;伪类&quot;).getPropertyValue(style);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p><p>程序的世界，写作的过程中部分文章难免会参考与借鉴网络上的一些资源、见解。如有侵权请与作者联系。如若如实侵权，文章会在24小时内删除。如若由于部分文章存在侵权行为给您带来不便还请见谅。</p><p>本博客仅仅为自己以及前端爱好者提供便利，不做任何商业用途。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 获取html到fontSize大小 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子的垂直水平居中的几种方式</title>
      <link href="2018/02/15/html/divCenter/"/>
      <url>2018/02/15/html/divCenter/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，在做之前，咱们先来分析一下我们要做的是什么？</p><p>一个盒子，垂直   水平  居中</p><p>首先   有居中  就必定会被一个父容器（盒子）包裹。</p><p>其次  要居中的盒子不会超出父容器大小（否则做居中意义就不大了）</p><p>然后   要居中的盒子的宽高可以分为两类   1. 具有固定的宽高。 2. 没有固定的宽高</p><p>​      根据盒子的类型也可分为两类    1.行内快元素inline-block    2. 块级元素block</p><p>那么   现在开始吧！</p><h2 id="方式一-弹性盒模型的方式"><a href="#方式一-弹性盒模型的方式" class="headerlink" title="方式一  (弹性盒模型的方式)"></a>方式一  (弹性盒模型的方式)</h2><p>html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  background-color: aqua;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="http://www.blog.image.qcwy.org.cn/old/divCenter/%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B.png" alt="弹性盒模型"></p><h2 id="方式二-（绝对定位）"><a href="#方式二-（绝对定位）" class="headerlink" title="方式二 （绝对定位）"></a>方式二 （绝对定位）</h2><p>html  代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css  代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  background-color: red;</span><br><span class="line">  height: 200px;</span><br><span class="line">  margin: auto;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="http://www.blog.image.qcwy.org.cn/old/divCenter/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png" alt="绝对定位"></p><p>注意：由于是使用绝对定位。元素脱离文档流，相对于具有除去<strong>static</strong>定位以外的其他父级定位去定位的，如果没有父级定位，根据body来定位</p><h2 id="方式三（位移transform的translate属性-定位）"><a href="#方式三（位移transform的translate属性-定位）" class="headerlink" title="方式三（位移transform的translate属性 + 定位）"></a>方式三（位移transform的translate属性 + 定位）</h2><p>html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  background-color: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="http://www.blog.image.qcwy.org.cn/old/divCenter/%E4%BD%8D%E7%A7%BBpng.png" alt="位移"></p><h2 id="方式四（位移-外边距-vh）"><a href="#方式四（位移-外边距-vh）" class="headerlink" title="方式四（位移+外边距 + vh）"></a>方式四（位移+外边距 + vh）</h2><p>html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  margin-top: 50vh;</span><br><span class="line">  background-color: blanchedalmond;</span><br><span class="line">  transform: translate(0, -50%)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="http://www.blog.image.qcwy.org.cn/old/divCenter/%E5%9E%82%E7%9B%B4.png" alt="垂直"></p><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 水平居中 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript正则表达式</title>
      <link href="2018/02/15/js/RegExp/"/>
      <url>2018/02/15/js/RegExp/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>正则表达式是一种字符串规则，在很多处理字符串的场合能够发挥出不可估量的强大，比如表单验证，数据替换等等。<br>作为一名程序员，不管是前端还是后端，都应该掌握这门技术。<br>此文章是本人在学习正则表达式时的一些笔记，以及封装的一些比较常用且功能强大的函数。<br>希望这篇文章能够帮助到其他的小伙伴。<br>当然，可能有些封装的不尽完美，所以，不尽完美之处，还请请私信我。我们共同进步。</p><h3 id="正则表达式-基础部分"><a href="#正则表达式-基础部分" class="headerlink" title="正则表达式 (基础部分)"></a>正则表达式 (基础部分)</h3><ul><li>regular  expression : RegExp   正则表达式    <ul><li>作用：<ul><li>用来处理字符串的规则 </li><li>只能处理字符串、</li><li>他是一个规则   可以验证字符串是否符合某个规则(test方法)，也可以把字符串中符合规则的内容捕获到(exec/match方法)</li></ul></li></ul></li></ul><h4 id="编写正则表达式"><a href="#编写正则表达式" class="headerlink" title="编写正则表达式"></a><strong>编写正则表达式</strong></h4><ul><li><p>创建方式有两种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字面量的方式创建  (两个//之间包起来的都是用来描述正则规则的元字符)</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/\d+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例的方式  构造函数创建   两个参数： 一个是元字符字符串    修饰符字符串</span></span><br><span class="line"><span class="keyword">let</span> reg1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\\d+&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>正则表达式由两部分组成</p><blockquote><p>元字符</p><p>修饰符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 常用的元字符*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==&gt;  1.量词元字符  设置出现的次数</span></span><br><span class="line"> <span class="comment">//  1. *  0到多次</span></span><br><span class="line"> <span class="comment">//  2. +  1到多次</span></span><br><span class="line"> <span class="comment">//  3. ？  0次 || 一次</span></span><br><span class="line"> <span class="comment">//  4. &#123;n&#125; 出现n次  n为大于0的正整数</span></span><br><span class="line"> <span class="comment">//  5. &#123;n,m&#125; 出现 n 到 m 次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.特殊元字符 ： 单个或者组合在一起代表特殊的含义*/</span></span><br><span class="line"><span class="comment">// 1. \   转义字符（普通字符-&gt;特殊-&gt;普通）</span></span><br><span class="line"><span class="comment">// 2. .   除\n（换行符）以外的任意字符</span></span><br><span class="line"><span class="comment">// 3. ^   以哪一个元字符作为开始（^看瑞特符号）</span></span><br><span class="line"><span class="comment">// 4. $   以哪一个元字符作为结束</span></span><br><span class="line"><span class="comment">// 5. \n  换行符</span></span><br><span class="line"><span class="comment">// 6. \d  0~9之间的一个数字</span></span><br><span class="line"><span class="comment">// 7. \D  非0~9之间的一个数字</span></span><br><span class="line"><span class="comment">// 8. \w  数字、字母、下划线 中的任意一个字符</span></span><br><span class="line"><span class="comment">// 9. \s  一个空白字符  （包含空格  制表符  换页符等）</span></span><br><span class="line"><span class="comment">// 10.\t  一个制表符  （一个TAB键：4个空格）</span></span><br><span class="line"><span class="comment">// 11.\b  匹配一个单词的边界</span></span><br><span class="line"><span class="comment">// 12.x|y x或者y中的一个字符</span></span><br><span class="line"><span class="comment">// 13.[xyz] x或者y或者z中的一个字符</span></span><br><span class="line"><span class="comment">// 14.[^xy] 除了x、y以外的字符</span></span><br><span class="line"><span class="comment">// 15.[a-z] 指定a到z这个范围中的任意字符   [0-9a-zA-Z_] === \w</span></span><br><span class="line"><span class="comment">// 16.[^a-z] 15/条的取反</span></span><br><span class="line"><span class="comment">// 17.()  正则中的分组</span></span><br><span class="line"><span class="comment">// 18.(?:) 只匹配不捕获</span></span><br><span class="line"><span class="comment">// 19.(?=) 正向预查</span></span><br><span class="line"><span class="comment">// 20.(?!) 负向预查</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.普通元字符 ： 代表本身含义的 */</span></span><br><span class="line"><span class="comment">//  /zhnegze/  此正则匹配的就是 &#x27;zhengze&#x27;</span></span><br></pre></td></tr></table></figure><p>修饰符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 正则表达式常用的修饰符：i m g */</span></span><br><span class="line"><span class="comment">//  1.   i    ignoreCase (一个闹尅死)   忽略单词大小写匹配</span></span><br><span class="line"><span class="comment">//  2.   m    multiline（莫体力）    忽略换行匹配   能够多行匹配</span></span><br><span class="line"><span class="comment">//  3.   g    global (阁楼布偶)    全局匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /A/.test(&#x27;lalala&#x27;);  ===&gt;false</span></span><br><span class="line"><span class="comment">// /A/i.test(&#x27;lalala&#x27;);  ===&gt;true</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="元字符详细解析"><a href="#元字符详细解析" class="headerlink" title="元字符详细解析"></a><strong>元字符详细解析</strong></h4><ul><li><p><code>^ 开头 $ 结尾</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\d/</span> ;  <span class="comment">//任意数字开头</span></span><br><span class="line">reg.test(<span class="string">&#x27;hahaha&#x27;</span>);   <span class="comment">//===&gt;false</span></span><br><span class="line">reg.test(<span class="string">&#x27;lalala123&#x27;</span>);   <span class="comment">//===&gt;false</span></span><br><span class="line">reg.test(<span class="string">&#x27;20191101hah&#x27;</span>); <span class="comment">//===&gt;true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d$/</span> ;    <span class="comment">//任意数字结尾</span></span><br><span class="line">reg.test(<span class="string">&#x27;hahaha&#x27;</span>);   <span class="comment">//===&gt;false</span></span><br><span class="line">reg.test(<span class="string">&#x27;lalala123&#x27;</span>);   <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;20191101hah&#x27;</span>); <span class="comment">//===&gt;false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个都不加 : 字符串中包含符合规则的就可以</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span> ;  <span class="comment">//包含数字就可以</span></span><br><span class="line">reg.test(<span class="string">&#x27;hahaha&#x27;</span>);   <span class="comment">//===&gt;false</span></span><br><span class="line">reg.test(<span class="string">&#x27;lalala123&#x27;</span>);   <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;20191101hah&#x27;</span>); <span class="comment">//===&gt;true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个都加 : 字符串只能和规则一致</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/^\d+$/</span>; <span class="comment">//之能是以数字开头  数字结尾 的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证手机号码</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/^1\d&#123;10&#125;$/</span>;<span class="comment">//只能以1开头 以数字结尾  中间是0~9之间的数   出现10次</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>\</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把特殊符号转换为  普通  符号</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>x|y</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/^18|19$/</span>;</span><br><span class="line">reg.test(<span class="string">&#x27;18&#x27;</span>);  <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;19&#x27;</span>); <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;189&#x27;</span>); <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;119&#x27;</span>); <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;81&#x27;</span>); <span class="comment">//===&gt;false</span></span><br><span class="line">reg.test(<span class="string">&#x27;819&#x27;</span>); <span class="comment">//===&gt;true</span></span><br><span class="line"><span class="comment">//-------------直接使用会存在很乱的优先级问题  一般写的时候一般都伴随着（）  因为小括号会改变处理的优先级  --&gt; 小括号： 分组</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/^18|19$/</span>;</span><br><span class="line">reg.test(<span class="string">&#x27;18&#x27;</span>);  <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;19&#x27;</span>); <span class="comment">//===&gt;true</span></span><br><span class="line">reg.test(<span class="string">&#x27;189&#x27;</span>); <span class="comment">//===&gt;false</span></span><br></pre></td></tr></table></figure></li><li><p><code>[]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.中括号中出现的字符一般都代表本身的含义</span></span><br><span class="line"><span class="comment">//2.中括号中不存在多位数</span></span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/old/RegExp/1572613219396.png" alt="1572613219396"></p></li></ul><h4 id="常用的正则表达式"><a href="#常用的正则表达式" class="headerlink" title="常用的正则表达式"></a><strong>常用的正则表达式</strong></h4><blockquote><ol><li><p>常用的有效数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">有效数字: <span class="number">0</span>   <span class="number">1</span>  <span class="number">12</span>   <span class="number">0.2</span>  -<span class="number">1</span>   -<span class="number">12.3</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 规则分析</span></span><br><span class="line"><span class="comment"> * 1.可能出现 -  + 号</span></span><br><span class="line"><span class="comment"> *2.一位0~9都可以，多位首位不能是0</span></span><br><span class="line"><span class="comment"> *3.小数部分可有可无，有的话必须有小数点和数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[+-]?(\d|([1-9]\d+))(\.\d+)?$/</span>;</span><br></pre></td></tr></table></figure></li><li><p>验证密码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字母、数字、下划线</span></span><br><span class="line"><span class="comment">// 长度 ： 6~16位</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\w&#123;6,16&#125;$/</span>;  </span><br><span class="line">reg.test(val)<span class="comment">//返回true代表符合规则    false不符合规则</span></span><br></pre></td></tr></table></figure></li><li><p>验证真实姓名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  1.汉字 /^[\u4E00-\u9FA5]$/</span></span><br><span class="line"><span class="comment"> *2.名字长度 2~10</span></span><br><span class="line"><span class="comment"> *3.可能有译名 XX·XXX  &#x27;尼古·哈哈&#x27;</span></span><br><span class="line"><span class="comment"> *4.可能有少数民族名字 2~10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[\u4E00-\u9FA5]&#123;2,10&#125;(·[\u4E00-\u9FA5]&#123;2,10&#125;)&#123;0,2&#125;$/</span>;</span><br></pre></td></tr></table></figure></li><li><p>验证邮箱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.@符号前 \w+((-\w+)|(\.\w+))*</span></span><br><span class="line"><span class="comment"> *1.1.以数字  字母  下划线 开头  1到多位</span></span><br><span class="line"><span class="comment"> *1.2.还可以是 - 数字 字母 下划线 或者 .数字 字母 下划线 整体出现 0 到 多次</span></span><br><span class="line"><span class="comment"> *邮箱名：由 数字 字母 下划线 . - 组成  切必须以 数字 开头  -/. 不能连续出现</span></span><br><span class="line"><span class="comment"> * 2.[A-Za-z0-9]+   @xxx.com</span></span><br><span class="line"><span class="comment"> *2.1.@后紧跟着 数字 字母 1到多位</span></span><br><span class="line"><span class="comment"> * 3.((\.|-)[A-Za-z0-9]+)*   xxx@xxx.[com].cn  匹配com 对@后面名字的补充</span></span><br><span class="line"><span class="comment"> *3.1.</span></span><br><span class="line"><span class="comment"> * 4.\.[A-Za-z0-9]+    .cn   .com ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>;</span><br></pre></td></tr></table></figure></li><li><p>身份证号码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.一共18位</span></span><br><span class="line"><span class="comment"> * 2.最后一位可能是X   X代表的是10</span></span><br><span class="line"><span class="comment"> *   身份证前六位意义： 省 市 县</span></span><br><span class="line"><span class="comment"> *   中间八位意义：   年 月 日</span></span><br><span class="line"><span class="comment"> *   最后四位意义： 最后一位 X或者数字  </span></span><br><span class="line"><span class="comment"> *倒数第二位： 偶数是  女  基数是  男</span></span><br><span class="line"><span class="comment"> *其余位数是经过算法算出来的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//let reg = /^\d&#123;17&#125;(\d|X)$/;不用</span></span><br><span class="line"><span class="comment">//小括号作用   ： 1. 分组捕获   不仅可以把大正则匹配的信息捕获到，还可以单独捕获到每个小分组的内容   2.改变优先级</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d)(\d|X)$/</span>;</span><br><span class="line">reg.exec(<span class="string">&#x27;4114121198902034432&#x27;</span>)  <span class="comment">//捕获结果是一个数组</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><pre><code>#### **正则表达式捕获的懒惰性**</code></pre><blockquote><p>实现正则捕获的方法       懒惰性的解决办法</p><ul><li><p>正则RegExp.prototype上的方法</p><ul><li><p>exec</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  基于exec实现正则的捕获</span></span><br><span class="line"><span class="comment"> *1. 捕获到的结果是null / 一个数组    第一项捕获到的是内容   其余项  对应小分组本次单独捕获到的内容    index项 当前捕获到的 在原字符串的起始索引   input项   原始字符串</span></span><br><span class="line"><span class="comment"> *2.每执行一次 exec只能捕获到一个符合正则规则的   默认情况下 即使多次捕获 捕获的结果永远是第一个    即=&gt;正则的懒惰性    默认只捕获一个</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> *lastIndex代表当前正则下一次匹配的起始索引位置 console.log(reg.lastIndex);  ===0   </span></span><br><span class="line"><span class="comment"> *正则懒惰性的原因就是因为lastIndex默认情况下是不会被修改/改变的   每次都是从起始位置开始查找    lastIndex不能手动修改不行   只能使用全局修饰符  g  /\d+/g  匹配后lastIndex值会自动改变</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：编写一个方法execAll()，执行一次可以把所有匹配的结果捕获到（前提：正则一定要设置全局修饰符  g）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">execAll</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// str ： 是要匹配的字符串</span></span><br><span class="line">        <span class="comment">// this ：RegExp的实例（当前操作的正则）</span></span><br><span class="line">        <span class="comment">// 首先验证传进来的正则是否设置了全局修饰符 g 如果没有 则不进行捕获 </span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.global) <span class="keyword">return</span> <span class="built_in">this</span>.exec(str);</span><br><span class="line">        <span class="comment">// arr : 存储最后所有捕获的信息</span></span><br><span class="line">        <span class="comment">// res ：存储每次捕获的内容 </span></span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="keyword">let</span> res = <span class="built_in">this</span>.exec(str);</span><br><span class="line">        <span class="function"><span class="title">while</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//把每次捕获的数组的第一项内容放到数组arr中</span></span><br><span class="line">            arr.push(res[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//只要捕获的内容部位null 则继续捕获</span></span><br><span class="line">            res = <span class="built_in">this</span>.exec(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr === <span class="number">0</span> ？ <span class="literal">null</span> : arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">RegExp</span>.prototype.execAll=execAll;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.execAll(str));</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>test</p></li><li><p>字符串String.prototype上支持正则表达式处理的方法</p><ul><li><p>replace</p></li><li><p>match</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串.match(正则);    返回所有匹配的数   以数组的形式返回   即  返回 所有符合正则的 项 的数组  如果一项都没有匹配  则返回null</span></span><br><span class="line"><span class="comment">// match 可以在执行一次的情况下  捕获到所有匹配的数据  ( 前提 ：正则需要加全局修饰符 g )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面那些代码 就是 match 实现原理</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>splite</p></li><li><p>……</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现正则匹配的前提是：当前正则要和字符串匹配   如果不匹配   （exec）捕获的是null</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="正则的分组捕获"><a href="#正则的分组捕获" class="headerlink" title="正则的分组捕获"></a>正则的分组捕获</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ?: =&gt;只匹配不捕获    如果设置了分组   又不想捕获到  就需要加 `？:` 来处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reg=<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)\d&#123;2&#125;(\d)(？:\d|X)$/</span>;</span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;411411199801224422&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)); </span><br><span class="line"><span class="comment">//返回发结果 ：[&quot;411411199801224422&quot;, &quot;411411&quot;, &quot;1998&quot;, &quot;01&quot;, &quot;22&quot;, &quot;2&quot;,  index: 0, input: &quot;411411199801224422&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * ===&gt; 获取自己想要的数据</span></span><br><span class="line"><span class="comment"> * 多次匹配时   只能捕获到大正则匹配到的数据   小分组的信息拿不到</span></span><br><span class="line"><span class="comment"> * 解决方案</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;1993&#125;年&#123;03&#125;月&#123;23&#125;日&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</span><br><span class="line"><span class="keyword">let</span> aryBig = [];</span><br><span class="line"><span class="keyword">let</span> arySmall = [];</span><br><span class="line"><span class="keyword">let</span> res=reg.exec(str);</span><br><span class="line"><span class="function"><span class="title">while</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [big,small] = res;</span><br><span class="line">    aryBig.push(big);</span><br><span class="line">    arySmall.push(small);</span><br><span class="line">    res=res.exec(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(aryBig,arySmall);</span><br><span class="line"><span class="comment">// 执行结果为 ：aryBig==&gt;[&#x27;&#123;1993&#125;&#x27;,&#x27;&#123;03&#125;&#x27;,&#x27;&#123;23&#125;&#x27;]    arySmall==&gt;[&#x27;1993&#x27;,&#x27;03&#x27;,&#x27;23&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><p>分组的第三个作用  :  分组引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分组的第三个作用  :  分组引用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;book&#x27;</span>;  <span class="comment">//&#x27;good&#x27;  &#x27;look&#x27;   &#x27;moon&#x27;   &#x27;foot&#x27; ......</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[a-zA-Z]([a-zA-Z])\1[a-zA-Z]$/</span>; <span class="comment">//分组引用 ： 就是通过 &#x27;\数字&#x27; 让其代表和对应分组出现一模一样的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;book&#x27;</span>));<span class="comment">//==&gt;true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;deep&#x27;</span>));<span class="comment">//==&gt;true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;some&#x27;</span>));<span class="comment">//==&gt;false</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="正则捕获的贪婪性"><a href="#正则捕获的贪婪性" class="headerlink" title="正则捕获的贪婪性"></a>正则捕获的贪婪性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * =&gt;正则捕获的贪婪性 ：默认情况下  正则捕获的时候 是按照当前正则所匹配的最长结果来获取的</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;啦啦啦2019&amp;&amp;加油2020&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">//===&gt;[&quot;2019&quot;, &quot;2020&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----解决办法 ： ==&gt;在量词元字符后面加上一个 `？` 表示取消正则的贪婪性(按照正则匹配的最短结果来获取)----</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;啦啦啦2019&amp;&amp;加油2020&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+?/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">//[&quot;2&quot;, &quot;0&quot;, &quot;1&quot;, &quot;9&quot;, &quot;2&quot;, &quot;0&quot;, &quot;2&quot;, &quot;0&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><p>？在正则中的   五大作用</p><blockquote><ol><li>?左边是非量词元字符 ：本身代表量词元字符  出现0到1次</li><li>?左边是量词 元字符 ： 取消捕获时候的贪婪性</li><li>(?:) : 值匹配不捕获</li><li>(?=) : 正向预查</li><li>(?!) : 负向预查</li></ol></blockquote></li></ul><h4 id="其他正则捕获的方法"><a href="#其他正则捕获的方法" class="headerlink" title="其他正则捕获的方法"></a>其他正则捕获的方法</h4><ol><li><p>test也能捕获 (本意是匹配)     <strong>一般不用   了解就好</strong>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;2019&#125;年&#123;11&#125;月&#123;2日&#125;&#x27;</span>；</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;(\d+)\&#125;/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">//==&gt;true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);<span class="comment">//==&gt;2019</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">//==&gt;true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);<span class="comment">//==&gt;11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">//==&gt;true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);<span class="comment">//==&gt;2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));<span class="comment">//==&gt;false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);<span class="comment">//==&gt;&#x27;2&#x27; 存储的是上次捕获的结果</span></span><br><span class="line"><span class="comment">//RegExp.$1~$9 : 获取当前本次正则匹配后   第一个到第九个分组的信息</span></span><br></pre></td></tr></table></figure></li><li><p>replace  字符串中实现替换的方法   (一般都是伴随正则一起使用的) <strong>重点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;jiege@2019|jiege@2020&#x27;</span>;</span><br><span class="line"><span class="comment">// ==&gt;把 &#x27;jiege&#x27; 转换为 &#x27;杰哥&#x27;</span></span><br><span class="line"><span class="comment">// 1. 不使用正则   执行一次只能替换一个</span></span><br><span class="line">str=str.replace(<span class="string">&#x27;jiege&#x27;</span>,<span class="string">&#x27;杰哥&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//==&gt;&#x27;杰哥@2019|jiege@2020&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 使用正则   一次就可以完成所有匹配</span></span><br><span class="line">str=str.replace(<span class="regexp">/jiege/g</span>,<span class="string">&#x27;杰哥&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//==&gt;&#x27;杰哥@2019|杰哥@2020&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须使用正则   不然不好弄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用正则   每次替换从头开始   类似于正则的懒惰性</span></span><br><span class="line">str=str.replace(<span class="string">&#x27;jiege&#x27;</span>,<span class="string">&#x27;jiegehaobang&#x27;</span>).replace(<span class="string">&#x27;jiege&#x27;</span>,<span class="string">&#x27;jiegehaobang&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//==&gt;&#x27;jiegehaobanghaobang@2019|jiege@2020&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用正则</span></span><br><span class="line">str=str.replace(<span class="regexp">/jiege/g</span>,<span class="string">&#x27;jiegehaobang&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//==&gt;&#x27;jiegehaobang@2019|jiegehaobang@2020&#x27;</span></span><br></pre></td></tr></table></figure><p>案例1：把时间字符串进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="string">&#x27;2019-11-02&#x27;</span>;</span><br><span class="line"><span class="comment">//变为 ==&gt; 2019年11月02日</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)$/</span>;</span><br><span class="line">time = time.replace(reg,<span class="string">&#x27;$1年$2月$3日&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(time)<span class="comment">//==&gt;&quot;2019年11月02日&quot;</span></span><br></pre></td></tr></table></figure><p> replace 实现原理   [str].replace([reg],[function])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="string">&#x27;2019-11-02&#x27;</span>;</span><br><span class="line"><span class="comment">//变为 ==&gt; 2019年11月02日</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现原理   [str].replace([reg],[function])</span></span><br><span class="line"><span class="comment">// 1.replace 首先拿reg和time进行匹配捕获，能匹配到几次就会把传递的函数执行几次  （而且是 匹配一次就执行一次）</span></span><br><span class="line"><span class="comment">// 2.不仅把方法执行了，而且replace还给方法传递了实参信息(是 exec捕获 的内容一致的信息：大正则匹配的信息  小分组匹配的系信息......)</span></span><br><span class="line"><span class="comment">// 3.在函数中  返回的是什么，就把当前大正则匹配的内容替换成什么</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*time = time.replace(reg,(big,$1,$2,$3)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    //$1,$2,$3是自己设置的变量</span></span><br><span class="line"><span class="comment">    console.log(big,$1,$2,$3);//==&gt;2019-11-02 2019 11 02</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line">time = time.replace(reg,<span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>]=arg;</span><br><span class="line">    $<span class="number">2.</span>length &lt; <span class="number">2</span> ? $<span class="number">2</span> = <span class="string">`0<span class="subst">$&#123;$<span class="number">2</span>&#125;</span>`</span> : <span class="literal">null</span>;</span><br><span class="line">    $<span class="number">3.</span>length &lt; <span class="number">2</span> ? $<span class="number">3</span> = <span class="string">`0<span class="subst">$&#123;$<span class="number">3</span>&#125;</span>`</span> : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;$<span class="number">1</span>&#125;</span>年<span class="subst">$&#123;$<span class="number">2</span>&#125;</span>月<span class="subst">$&#123;$<span class="number">3</span>&#125;</span>日`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(time);<span class="comment">//==&gt;&#x27;2019年11月02日&#x27;</span></span><br></pre></td></tr></table></figure><p>案例2：单词首字母大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;good good study,day day up!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b([a-zA-Z])[a-zA-Z]*\b/g</span>;</span><br><span class="line"><span class="comment">//=&gt;函数执行了6次，每一次都把正则匹配到的信息传递给函数</span></span><br><span class="line"><span class="comment">//=&gt;每一次arg存的都是一个数组：[&#x27;good&#x27;,&#x27;g&#x27;]......</span></span><br><span class="line">str = str.replace(reg,<span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [content,$<span class="number">1</span>]=arg;</span><br><span class="line">    $<span class="number">1</span> = $<span class="number">1.</span>toUpperCase();</span><br><span class="line">    content = content.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">1</span>+content;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><p>案例3：验证一个字符串中那个字母出现的次数最多，多少次？</p><p>​    做法1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*======去重思维=====*/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;2019nianshayemeiganchneg&#x27;</span>;</span><br><span class="line"><span class="comment">//创建一个对象用来存放字符串的每一个不同的项</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//将字符串中的每一项都放在对象中</span></span><br><span class="line">[].forEach.call(str,<span class="function"><span class="params">char</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断对象中有没有这个字符，有就把值加一   没有就赋值为一</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> obj[char]!==<span class="string">&#x27;undefined&#x27;</span></span>)</span>&#123;</span><br><span class="line">        obj[char]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj[char]=<span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//储存次数最多的字符的数组</span></span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="comment">//判断出现次数最多的字符出现的次数</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> key <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> item = obj[key];</span><br><span class="line">    item &gt; max ? max = item : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断出现次数最多的字符</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> key <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> item = obj[key];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">item === max</span>)</span>&#123;</span><br><span class="line">        res.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(res,max) <span class="comment">//[&quot;n&quot;] 4</span></span><br></pre></td></tr></table></figure><p>​    做法2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*======排序=====*/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;2019nianshayemeiganchnega&#x27;</span>;</span><br><span class="line"></span><br><span class="line">str=str.split(<span class="string">&#x27;&#x27;</span>).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.localeCompare(b)).join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str)<span class="comment">//0129aaaceeegghhiimnnnnsy</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/([a-zA-Z0-9])\1+/g</span>;</span><br><span class="line"><span class="keyword">let</span> ary = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">//[&quot;aaaa&quot;, &quot;eee&quot;, &quot;gg&quot;, &quot;hh&quot;, &quot;ii&quot;, &quot;nnnn&quot;]</span></span><br><span class="line">ary.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b.length - a.length);<span class="comment">//sort()数组排序</span></span><br><span class="line"><span class="built_in">console</span>.log(ary.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b.length - a.length));<span class="comment">//[&quot;aaaa&quot;, &quot;nnnn&quot;, &quot;eee&quot;, &quot;gg&quot;, &quot;hh&quot;, &quot;ii&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`出现最多的是<span class="subst">$&#123;ary[<span class="number">0</span>].slice(<span class="number">0</span>,<span class="number">1</span>)&#125;</span>,出现了<span class="subst">$&#123;ary[<span class="number">0</span>].length&#125;</span>`</span>);<span class="comment">//出现最多的是n,出现了4</span></span><br><span class="line"><span class="keyword">let</span> max = ary[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">let</span> res = [ary[<span class="number">0</span>].substr(<span class="number">0</span>,<span class="number">1</span>)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = ary[i];</span><br><span class="line">    <span class="keyword">if</span> (item.length&lt;max) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(item.slice(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max,res);</span><br></pre></td></tr></table></figure><p>​    做法3：**代码最少   推荐 **</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*======从最大到最小去找--正则匹配=====*/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;2019nianshayemeiganchnega&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把字符串变成数</span></span><br><span class="line">str = str.split(<span class="string">&#x27;&#x27;</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)).join(<span class="string">&#x27;&#x27;</span>); <span class="comment">//字母的比较不能用加减  只能用a.localeCompare(b)</span></span><br><span class="line"><span class="comment">//接收最大值</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//0129aaaaceeegghhiimnnnnsy</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = str.length; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;([a-zA-Z])\\1&#123;&#x27;</span> + (i - <span class="number">1</span>) + <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">    str.replace(reg, <span class="function">(<span class="params">content, $<span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">        res.push($<span class="number">1</span>);</span><br><span class="line">        max = i;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`出现次数最多的字符为<span class="subst">$&#123;res&#125;</span>,出现了<span class="subst">$&#123;max&#125;</span>次`</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    做法4：查找字母删减去重法</p><p>案例4：正则表达式  之  时间字符串格式化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * formatTime:时间字符串的格式化处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>templete  期望获取的日期格式模板</span></span><br><span class="line"><span class="comment">     *      模板规则：&#123;0&#125; -&gt;&#123;0~5&#125;-&gt;年月日时分秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;String&#125;</span> </span>格式化后的时间字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">templete = <span class="string">&#x27;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日  &#123;3&#125;时&#123;4&#125;分&#123;5&#125;秒&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//先获取时间字符串中的年月日时分秒等信息</span></span><br><span class="line">        <span class="keyword">let</span> timeAry = <span class="built_in">this</span>.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(timeAry); <span class="comment">//[&quot;2019&quot;, &quot;8&quot;, &quot;13&quot;, &quot;16&quot;, &quot;51&quot;, &quot;3&quot;]</span></span><br><span class="line">        <span class="keyword">return</span> templete = templete.replace(<span class="regexp">/\&#123;(\d+)\&#125;/g</span>, <span class="function">(<span class="params">content, $<span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//content : 代表当前本次大正则匹配的信息   $1代表小粉猪单独匹配的信息</span></span><br><span class="line">            <span class="comment">//以$1的值为索引，到timeary中找到对应的时间(如果没有  用&#x27;00&#x27;代替)</span></span><br><span class="line">            <span class="keyword">let</span> time = timeAry[$<span class="number">1</span>] || <span class="string">&#x27;00&#x27;</span>;</span><br><span class="line">            time.length &lt; <span class="number">2</span> ? time = <span class="string">`0<span class="subst">$&#123;time&#125;</span>`</span> : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> time;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 扩展到内置类String.prototype上 */</span></span><br><span class="line">    [<span class="string">&#x27;formatTime&#x27;</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">String</span>.prototype[item] = <span class="built_in">eval</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = <span class="string">&#x27;2019-8-13 16:51:3&#x27;</span>;</span><br><span class="line"><span class="comment">// 服务器获取的时间数据 ：2019-8-13 16:51:3    2019/8/13 16:51:3</span></span><br><span class="line"><span class="comment">// 想要转变的格式 ：&#x27;08月13日 16时51分&#x27;    &#x27;2019年08月13日&#x27; ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要[time.formatTime()]这样调用，则方法必须在字符串的原型上</span></span><br><span class="line">time.formatTime();</span><br><span class="line">time.formatTime(<span class="string">&#x27;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日&#x27;</span>); <span class="comment">//&quot;2019年08月13日&quot;</span></span><br><span class="line">time.formatTime(<span class="string">&#x27;&#123;0&#125;/&#123;1&#125;/&#123;2&#125;&#x27;</span>);<span class="comment">//&quot;2019/08/13&quot;</span></span><br><span class="line">time.formatTime(<span class="string">&#x27;&#123;0&#125;-&#123;1&#125;-&#123;2&#125;  &#123;3&#125;:&#123;4&#125;:&#123;5&#125;&#x27;</span>);<span class="comment">//&quot;2019-08-13  16:51:03&quot;</span></span><br></pre></td></tr></table></figure><p>​    案例4：正则表达式之qureyURLParams</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * qureyURLParams:获取url地址问号后面的参数系信息（可能包含hash值）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *      [object]把所有问号参数信息以键值对的方式存储起来并返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qureyURLParams</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">        <span class="built_in">this</span>.replace(<span class="regexp">/([^=#&amp;?]+)=([^=#&amp;?]+)/g</span>, <span class="function">(<span class="params">...[, $<span class="number">1</span>, $<span class="number">2</span>]</span>) =&gt;</span> obj[$<span class="number">1</span>] = $<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">this</span>.replace(<span class="regexp">/#([^=#&amp;?]+)/g</span>, <span class="function">(<span class="params">...[, $<span class="number">1</span>]</span>) =&gt;</span> obj[<span class="string">&#x27;HASH&#x27;</span>] = $<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 扩展到内置类String.prototype上 */</span></span><br><span class="line">    [<span class="string">&#x27;qureyURLParams&#x27;</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">String</span>.prototype[item] = <span class="built_in">eval</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;https://www.baidu.com/s?wd=dnf&amp;rsv_spt=1&#x27;</span>;</span><br><span class="line">url.qureyURLParams();</span><br></pre></td></tr></table></figure><p>​    案例4：正则表达式之千分符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * millimeter:实现大数字的千分符处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *      [String] 千分符后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">millimeter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/\d&#123;1,3&#125;(?=(\d&#123;3&#125;)+$)/g</span>, <span class="function"><span class="params">content</span> =&gt;</span>content + <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 扩展到内置类String.prototype上 */</span></span><br><span class="line">    [<span class="string">&#x27;millimeter&#x27;</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">String</span>.prototype[item] = <span class="built_in">eval</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="string">&#x27;123445112&#x27;</span>; <span class="comment">//=&gt;&#x27;112,212,323,123&#x27;</span></span><br><span class="line">num.millimeter();</span><br></pre></td></tr></table></figure></li></ol><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docsify的基本使用</title>
      <link href="2018/02/15/docsify/docsify/"/>
      <url>2018/02/15/docsify/docsify/</url>
      
        <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://docsify.js.org/#/zh-cn/quickstart">https://docsify.js.org/#/zh-cn/quickstart</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//找一个感觉的文件夹</span><br><span class="line"></span><br><span class="line">//安装doscify-cli工具</span><br><span class="line">npm i docsify-cli -g</span><br><span class="line"></span><br><span class="line">//初始化项目</span><br><span class="line">docsify init ./docs</span><br><span class="line"></span><br><span class="line">//启动项目 默认占用3000端口</span><br><span class="line">docsify serve ./docs</span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/old/docsify/1.png" alt="1.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="http://www.blog.image.qcwy.org.cn/old/docsify/3.png" alt="3"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><img src="http://www.blog.image.qcwy.org.cn/old/docsify/4.png" alt="4"></p><p>具体的看文档就好了    文档写的很详细</p><p>此时，问题就完美解决了</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> docsify </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docsify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置cookie</title>
      <link href="2017/11/12/cookie/set-cookie/"/>
      <url>2017/11/12/cookie/set-cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="通过js设置cookie的方法"><a href="#通过js设置cookie的方法" class="headerlink" title="通过js设置cookie的方法"></a>通过js设置cookie的方法</h2><p>我们在前端开发中，通常都需要获取并记录用户的某些操作设置，这样可以使用户下一次访问网站时不用进行重复的调整设置同一个功能。</p><p>此次文章中的方法是在前端开发工作中自己随手写的一组通过js设置与获取cookie的方法，能够应用在多说情况下，没做细挖与深究</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie = &#123;</span><br><span class="line">set:<span class="function"><span class="keyword">function</span>(<span class="params">key,val,time</span>)</span>&#123;<span class="comment">//设置cookie方法</span></span><br><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//获取当前时间</span></span><br><span class="line"><span class="keyword">var</span> expiresDays=time;  <span class="comment">//将date设置为n天以后的时间</span></span><br><span class="line">date.setTime(date.getTime()+expiresDays*<span class="number">24</span>*<span class="number">3600</span>*<span class="number">1000</span>); <span class="comment">//格式化为cookie识别的时间</span></span><br><span class="line"><span class="built_in">document</span>.cookie=key + <span class="string">&quot;=&quot;</span> + val +<span class="string">&quot;;expires=&quot;</span>+date.toGMTString();  <span class="comment">//设置cookie</span></span><br><span class="line">&#125;,</span><br><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;<span class="comment">//获取cookie方法</span></span><br><span class="line"><span class="comment">/*获取cookie参数*/</span></span><br><span class="line"><span class="keyword">var</span> getCookie = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/[ ]/g</span>,<span class="string">&quot;&quot;</span>);  <span class="comment">//获取cookie，并且将获得的cookie格式化，去掉空格字符</span></span><br><span class="line"><span class="keyword">var</span> arrCookie = getCookie.split(<span class="string">&quot;;&quot;</span>)  <span class="comment">//将获得的cookie以&quot;分号&quot;为标识 将cookie保存到arrCookie的数组中</span></span><br><span class="line"><span class="keyword">var</span> tips;  <span class="comment">//声明变量tips</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arrCookie.length;i++</span>)</span>&#123;   <span class="comment">//使用for循环查找cookie中的tips变量</span></span><br><span class="line"><span class="keyword">var</span> arr=arrCookie[i].split(<span class="string">&quot;=&quot;</span>);   <span class="comment">//将单条cookie用&quot;等号&quot;为标识，将单条cookie保存为arr数组</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">key==arr[<span class="number">0</span>]</span>)</span>&#123;  <span class="comment">//匹配变量名称，其中arr[0]是指的cookie名称，如果该条变量为tips则执行判断语句中的赋值操作</span></span><br><span class="line">tips=arr[<span class="number">1</span>];   <span class="comment">//将cookie的值赋给变量tips</span></span><br><span class="line"><span class="keyword">break</span>;   <span class="comment">//终止for循环遍历</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tips;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面简单的说明一下设置与获取的方法，便于前端开发新手用户使用</p><blockquote><p>设置cookie的方法为：cookie.set(key,val,time)</p><ol><li>key可以理解为cookie的变量名</li><li>val可以理解为这个cookie所带有的值</li><li>time是cookie的超时时间，单位为天</li></ol><p>获取cookie的方法为：cookie.get(key)</p><ol><li>key就是刚才我们设置时的cookie变量名</li><li>我们只需要将函数赋值给新的变量即可调用这个值，例如：var n = cookie.get(key);</li><li>方法写的不算复杂，比较适合前端开发新手使用</li></ol></blockquote><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！</p>]]></content>
      
      
      <categories>
          
          <category> cookie </category>
          
          <category> 设置cookie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块级格式化上下文</title>
      <link href="2017/09/12/css/block/"/>
      <url>2017/09/12/css/block/</url>
      
        <content type="html"><![CDATA[<h2 id="块级格式化上下文（Block-Formatting-Context，BFC）"><a href="#块级格式化上下文（Block-Formatting-Context，BFC）" class="headerlink" title="块级格式化上下文（Block Formatting Context，BFC）"></a>块级格式化上下文<strong>（Block Formatting Context，BFC）</strong></h2><p>是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域</p><p>根据<strong>MDN</strong>官网介绍</p><p>下列方式会创建<strong>块格式化上下文</strong>：</p><blockquote><ul><li>根元素(<code>&lt;html&gt;</code>)</li><li>浮动元素（元素的 <code>float</code> 不是 <code>none</code>）</li><li>绝对定位元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position"><code>position</code></a> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>inline-block</code>）</li><li>表格单元格（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li>表格标题（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>为 <code>table、``table-row</code>、 <code>table-row-group、``table-header-group、``table-footer-group</code>（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 <code>inline-table</code>）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow"><code>overflow</code></a> 值不为 <code>visible</code> 的块元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a> 值为 <code>flow-root</code> 的元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain"><code>contain</code></a> 值为 <code>layout</code>、<code>content</code>或 paint 的元素</li><li>弹性元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>为 <code>flex</code> 或 <code>inline-flex</code>元素的直接子元素）</li><li>网格元素（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li><li>多列容器（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count"><code>column-count</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-width"><code>column-width</code></a> 不为 <code>auto，包括 ``column-count</code> 为 <code>1</code>）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（<a href="https://github.com/w3c/csswg-drafts/commit/a8634b96900279916bd6c505fda88dda71d8ec51">标准变更</a>，<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=709362">Chrome bug</a>）。</li></ul></blockquote><p>浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠也只会发生在属于同一BFC的块级元素之间</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p> BFC是一个<strong>独立的渲染区域</strong>，他规定了在该区域中，常规流块盒的布局</p><ul><li><p>独立=&gt;不同的BFC区域，它们进行渲染的时候   互不干扰</p><ul><li><p>创建了BFC的元素，隔绝了它内部与外部的联系，内部的渲染不会影响到外部</p></li><li><p><strong>具体规则</strong>：</p><p>​        创建BFC的元素：它的自动高度需要计算浮动元素</p><p>​        创建BFC的元素：它的边框盒不会与浮动元素重叠</p><p>​        创建BFC的元素：不会和它的子元素进行外边距合并</p><p>对于这些规则，下面会使用具体例子加以说明。    </p></li></ul></li></ul><p>这个区域由某个HTML元素创建，常用的   常见的  会在内部创建BFC区域的元素：</p><ul><li>根元素（html）</li><li>浮动，绝对定位，固定定位元素</li><li>overflow不等于visible的块盒</li></ul></blockquote><h2 id="规则特性的示例"><a href="#规则特性的示例" class="headerlink" title="规则特性的示例"></a>规则特性的示例</h2><h3 id="示例-一-自动高度需要计算浮动元素"><a href="#示例-一-自动高度需要计算浮动元素" class="headerlink" title="示例 一 自动高度需要计算浮动元素"></a>示例 一 自动高度需要计算<strong>浮动元素</strong></h3><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">   <span class="attribute">background-color</span>: beige;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.item</span>&#123;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://www.blog.image.qcwy.org.cn/old/block/1.png" alt="1.png"></p><p>可以看出，此时类为container的容器的高度为0，这也就是因为浮动脱离的文档流，形成了BFC，而常规流块盒不会计算浮动元素的高度。   造成了高度坍塌的问题</p><p>解决的办法有两个<strong>思路</strong>（注意：是两个思路，而不是两种解决办法）</p><ol><li><p>使用clear+伪类的方法清除浮动，也就是在最后面添加一个元素清除浮动，撑开元素的高度</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: beige;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">+ <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">+ <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container  clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/2.png"></p></li><li><p>使用创建BFC区域，因为BFC会计算浮动元素。即   只要能创建BFC都可以解决   根据不同的场景使用不同的方法</p><p>这里只是随便列举一个方法</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: beige;</span><br><span class="line">+ position: absolute;</span><br><span class="line">+ <span class="comment">/* overflow: hidden;这种方式副作用最小 */</span></span><br><span class="line">+ <span class="comment">/* float: left; */</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/2.png" alt="2.png"></p></li></ol><h3 id="例子-二-BFC边框盒不会与浮动元素重叠"><a href="#例子-二-BFC边框盒不会与浮动元素重叠" class="headerlink" title="例子 二  BFC边框盒不会与浮动元素重叠"></a>例子 二  BFC边框盒不会与浮动元素重叠</h3><p>BFC不会与浮动元素的边框盒重叠，这样会方便我们做很多布局。例如：</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: red;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.container</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">   <span class="comment">/* overflow: hidden; */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/3.png"></p><p>当把overflow: hidden;的注释打开时，就会在内部创建BFC，渲染的效果如下：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/4.png"></p><p>此时如果设置BFC的左外边距的话，只要外边距不超过左边浮动盒子的大小，就是无效的。</p><p>因为此时设置做外边距会被左边的浮动元素覆盖。</p><p>如果要设置两个盒子的间距的话，需要设置左边浮动盒子的右外边距   margin-right: 100px; </p><p>设置后效果如下</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/5.png" alt="5.png"></p><p>根据这个效果，可以做很多一边固定一边自适应的布局，也可以做多边固定，一边自适应。比如：圣杯布局，双飞翼布局，都可以使用这个特性进行布局。</p><p>注意：对定位不会有这种特性。原因是：浮动元素不完全脱离常规流。而定位是完全脱离常规流</p><h3 id="示例三-BFC不会和它的子元素进行外边距合并"><a href="#示例三-BFC不会和它的子元素进行外边距合并" class="headerlink" title="示例三  BFC不会和它的子元素进行外边距合并"></a>示例三  BFC不会和它的子元素进行外边距合并</h3><p>BFC不会和它的子元素进行外边距合并，而标准流会进行外边距合并。这就是为什么在布局的时候，会出现外边距合并的原因，以及出现这种问题的时候我们为什么一般都会使用overflow: hidden(不是唯一的)解决外边距合并的根本原因。例如：</p><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/6.jpg" alt="6.jpg"></p><p>根据代码和效果图可以看出：父盒子与子盒子的外边距进行了合并</p><p>给父元素加上overflow：hidden属性后，解决外边距合并后的效果图：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/block/7.png" alt="7.png"></p><p>根本原因:    </p><p>​        根元素html元素会创建BFC</p><p>​        父元素处于的上下文是根元素创建的BFC上下文</p><p>​            子元素处于的上下文是父元素创建的BFC上下文</p><p>​        他们处于不同的BFC上下文，而BFC是独立的渲</p><p>​        染区域。所以他们两个的渲染是互不干扰的，因此</p><p>​        他们的外边距是不能合并的</p><p>具体代码：</p><p>css代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#008c8c</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">  + overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码不变</p><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 块级格式化上下文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css三大特性</title>
      <link href="2017/09/12/css/css-properties/"/>
      <url>2017/09/12/css/css-properties/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 三大特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js的闭包详解</title>
      <link href="2017/09/12/js/closure-js/"/>
      <url>2017/09/12/js/closure-js/</url>
      
        <content type="html"><![CDATA[<h1 id="javascript中闭包的工作原理"><a href="#javascript中闭包的工作原理" class="headerlink" title="javascript中闭包的工作原理"></a>javascript中闭包的工作原理</h1><h2 id="1-什么是闭包"><a href="#1-什么是闭包" class="headerlink" title="1. 什么是闭包"></a>1. 什么是闭包</h2><p>官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p><p>相信很少有人能直接看懂这句话，因为他描述的太学术。其实这句话通俗的来说就是：JavaScript中所有的function都是一个闭包。不过一般来说，嵌套的function所产生的闭包更为强大，也是大部分时候我们所谓的“闭包”。</p><p>看下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="keyword">var</span> i = <span class="number">0</span>; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>) </span>&#123; alert(++i); &#125; </span><br><span class="line"> <span class="keyword">return</span> closure;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> clo = fn();</span><br><span class="line">clo();</span><br></pre></td></tr></table></figure><p>这段代码有两个特点：</p><ol><li><p>函数closure嵌套在函数fn内部；</p></li><li><p>函数fn返回函数closure。</p></li></ol><blockquote><p>上面这些代码  实际上即创建了 一个闭包。为什么？因为函数fn外的变量clo引用了函数fn内的函数closure.</p><p>让我们说的更透彻一些：</p><p>所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层函数体中的临时变量。这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。</p></blockquote><h2 id="2-闭包有什么作用？"><a href="#2-闭包有什么作用？" class="headerlink" title="2.闭包有什么作用？"></a>2.闭包有什么作用？</h2><blockquote><p>简而言之，闭包的作用就是在<strong>fn</strong>执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回<strong>fn</strong>所占用的资源，因为<strong>fn</strong>的内部函数<strong>closure</strong>的执行需要依赖<strong>fn</strong>中的变量。这是对闭包作用的非常直白的描述，不专业也不严谨，但大概意思就是这样，理解闭包需要循序渐进的过程</p><p>在上面的例子中，由于闭包的存在使得函数<strong>fn</strong>返回后，<strong>fn</strong>中的i始终存在，这样每次执行**clo()**，i都是自加1后alert出i的值。</p><p>那 么我们来想象另一种情况，如果<strong>fn</strong>返回的不是函数<strong>closure</strong>，情况就完全不同了。因为<strong>fn</strong>执行完后，<strong>closure</strong>没有被返回给<strong>fn</strong>的外界，只是被<strong>fn</strong>所引用，而此时<strong>fn</strong>也只会被<strong>closure</strong>引 用，因此函数<strong>fn</strong>和<strong>closure</strong>互相引用但又不被外界打扰(被外界引用)，函数<strong>fn</strong>和<strong>closure</strong>就会被GC回收。(关于Javascript的垃圾回收机制将在后面详细介绍</p></blockquote><h2 id="3-闭包内的微观世界"><a href="#3-闭包内的微观世界" class="headerlink" title="3. 闭包内的微观世界"></a>3. 闭包内的微观世界</h2><blockquote><p>如果要更加深入的了解闭包以及函数<strong>fn</strong>和嵌套函数<strong>closure</strong>的关系，我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。以函数<strong>fn</strong>从定义到执行的过程为例阐述这几个概念。</p><ol><li><p>当定义函数<strong>fn</strong>的时候，js解释器会将函数<strong>fn</strong>的作用域链(scope chain)设置为定义<strong>fn</strong>时<strong>fn</strong>所在的“环境”，如果<strong>fn</strong>是一个全局函数，则scope chain中只有window对象。</p></li><li><p>当执行函数<strong>fn</strong>的时候，<strong>fn</strong>会进入相应的执行环境(excution context)。</p></li><li><p>在创建执行环境的过程中，首先会为<strong>fn</strong>添加一个scope属性，即<strong>fn</strong>的作用域，其值就为第1步中的scope chain。即<strong>fn</strong>.scope=<strong>fn</strong>的作用域链。</p></li><li><p>然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到<strong>fn</strong>的作用域链的最顶端。此时<strong>fn</strong>的作用域链包含了两个对象：<strong>fn</strong>的活动对象和window对象。</p></li><li><p>下一步是在活动对象上添加一个arguments属性，它保存着调用函数<strong>fn</strong>时所传递的参数</p></li><li><p>最后把所有函数<strong>fn</strong>的形参和内部的函数<strong>closure</strong>的引用也添加到<strong>fn</strong>的活动对象上。在这一步中，完成了函数<strong>closure</strong>的的定义，因此如同第3步，函数<strong>closure</strong>的作用域链被设置为<strong>closure</strong>所被定义的环境，即<strong>fn</strong>的作用域</p></li></ol><p>到此，整个函数<strong>fn</strong>从定义到执行的步骤就完成了。此时<strong>fn</strong>返回函数<strong>closure</strong>的引用给<strong>clo</strong>，又函数<strong>closure</strong>的作用域链包含了对函数<strong>fn</strong>的活动对象的引用，也就是说<strong>closure</strong>可以访问到<strong>fn</strong>中定义的所有变量和函数。函数<strong>closure</strong>被<strong>clo</strong>引用，函数<strong>closure</strong>又依赖函数<strong>fn</strong>，因此函数<strong>fn</strong>在返回后不会被GC回收。</p><p>当函数<strong>closure</strong>执行的时候亦会像以上步骤一样。因此，执行时b的作用域链包含了3个对象：<strong>closure</strong>的活动对象、<strong>fn</strong>的活动对象和window对象，如下图所示：</p><p><img src="http://www.blog.image.qcwy.org.cn/old/closure/clo.jpg" alt="clo"></p><p>注意：图片来源于网络</p><p>如图所示，当在函数<strong>closure</strong>中访问一个变量的时候，搜索顺序是：</p><ol><li>先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数fn的活动对象，依次查找，直到找到为止。</li><li>如果函数<strong>closure</strong>存在prototype原型对象，则在查找完自身的活动对象后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。</li><li>如果整个作用域链上都无法找到，则返回undefined</li></ol><p><strong>总结：</strong></p><p>两个重要的词语：函数的<strong>定义</strong>与<strong>执行</strong>。文中提到函数的作用域是在定义函数时候就已经确定，而不是在执行的时候确定（参看步骤1和3）。用一段代码来说明这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">  <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> h = f(<span class="number">1</span>);</span><br><span class="line">alert(h());</span><br></pre></td></tr></table></figure><p>这段代码中变量h指向了f中的那个匿名函数(由g返回)。</p><ul><li>假设函数h的作用域是在执行alert(h())确定的，那么此时h的作用域链是：h的活动对象-&gt;alert的活动对象-&gt;window对象。</li><li>假设函数h的作用域是在定义时确定的，就是说h指向的那个匿名函数在定义的时候就已经确定了作用域。那么在执行的时候，h的作用域链为：h的活动对象-&gt;f的活动对象-&gt;window对象。</li></ul><p>如果第一种假设成立，那输出值就是undefined；如果第二种假设成立，输出值则为1。</p><p>运行结果证明了第2个假设是正确的，说明函数的作用域确实是在定义这个函数的时候就已经确定了</p></blockquote><h2 id="4-闭包的应用场景"><a href="#4-闭包的应用场景" class="headerlink" title="4. 闭包的应用场景"></a>4. 闭包的应用场景</h2><blockquote><ol><li>保护函数内的变量安全。以最开始的例子为例，函数<strong>fn</strong>中i只有函数<strong>closure</strong>才能访问，而无法通过其他途径访问到，因此保护了i的安全性。</li><li>在内存中维持一个变量。依然如前例，由于闭包，函数a中i的一直存在于内存中，因此每次执行c()，都会给i自加1。</li><li>通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）<br>私有属性和方法在Constructor外是无法被访问的function Constructor(…) {<br>var that = this;<br>var membername = value;<br>function membername(…) {…}<br>}</li></ol><p>以上3点是闭包最基本的应用场景，很多经典案例都源于此。</p></blockquote><h2 id="5-Javascript的垃圾回收机制"><a href="#5-Javascript的垃圾回收机制" class="headerlink" title="5. Javascript的垃圾回收机制"></a>5. Javascript的垃圾回收机制</h2><blockquote><p>在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数<strong>fn</strong>被<strong>closure</strong>引用，<strong>closure</strong>又被<strong>fn</strong>外的<strong>clo</strong>引用，这就是为什么函数<strong>fn</strong>执行后不会被回收的原因。</p></blockquote><p><strong>理解JavaScript的闭包是迈向高级JS程序员的必经之路，理解了其解释和运行机制才能写出更为安全和优雅的代码。</strong></p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 闭包详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型</title>
      <link href="2017/09/12/js/prototype/"/>
      <url>2017/09/12/js/prototype/</url>
      
        <content type="html"><![CDATA[<h2 id="总结-原型对象-对象原型-构造函数-之间的关系-以及js的原型链问题"><a href="#总结-原型对象-对象原型-构造函数-之间的关系-以及js的原型链问题" class="headerlink" title="总结 原型对象  对象原型  构造函数 之间的关系  以及js的原型链问题"></a>总结 原型对象  对象原型  构造函数 之间的关系  以及js的原型链问题</h2><p>这个只是点，想必每个前端程序员都会。具体的不再这多说，请往下看</p><h2 id="原型对象-prototype"><a href="#原型对象-prototype" class="headerlink" title="原型对象 prototype"></a>原型对象 prototype</h2><blockquote><p>是构造函数的属性，这个属性是一个对象，称为原型对象</p><p>每个函数都有一个prototype原型对象</p><p>作用：共享方法，达到节省内存的目的。  如果不共享方法，每次实例化对象就得创建原型链上的所有的方法，浪费内存</p></blockquote><h2 id="对象原型-简称原型-ptoto"><a href="#对象原型-简称原型-ptoto" class="headerlink" title="对象原型 简称原型 ptoto"></a>对象原型 简称原型 <strong><strong>ptoto</strong></strong></h2><blockquote><p><strong>作用</strong>：指向原型对象  只读属性  只是提供对象的查找机制</p><p>每一个对象都有一个原型，作用是指向原型对象prototype</p></blockquote><h2 id="构造函数-constructor"><a href="#构造函数-constructor" class="headerlink" title="构造函数 constructor"></a>构造函数 constructor</h2><blockquote><p>作用：记录是哪个构造函数创建出来的   指向构造函数本身   用来让原型对象重新指向原来的构造函数</p><p><img src="http://www.blog.image.qcwy.org.cn/old/prototype/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png" alt="原型对象原型与构造函数"></p></blockquote><p>​    </p><h2 id="js原型链"><a href="#js原型链" class="headerlink" title="js原型链"></a>js原型链</h2><blockquote><p>js的原型链就是js的一个查找规则<br>查找的规则就如上图所属那样通过原型对象  一直往上查找<br>js可以通过原型链  一级一级的向上查找， 直到查找到为止，原型链的最终指向为  null</p></blockquote><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 原型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基础知识学习总结</title>
      <link href="2017/08/15/html/starthtml/"/>
      <url>2017/08/15/html/starthtml/</url>
      
        <content type="html"><![CDATA[<h1 id="Html基础知识学习总结"><a href="#Html基础知识学习总结" class="headerlink" title="Html基础知识学习总结"></a><strong>Html基础知识学习总结</strong></h1><h2 id="Html基础标签"><a href="#Html基础标签" class="headerlink" title="Html基础标签"></a>Html基础标签</h2><blockquote><p><code>&lt;h1&gt;&lt;/h1&gt;</code>:标题<br><code>&lt;p&gt;&lt;/p&gt;</code> 段落<br><code>&lt;hr&gt;</code>水平线<br><code>&lt;br&gt;</code>换行<br><code>&lt;span&gt;&lt;/span&gt;</code>分区，可多标签一行<br><code>&lt;div&gt;&lt;/div&gt;</code>分区，每个标签一行</p></blockquote><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><blockquote><p><b></b> <strong></strong>加粗<br><i></i> <em></em>斜体<br><s></s> <del></del>删除<br><u></u> <ins>&lt;/ins 下划线</p></blockquote><h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><blockquote><p>&lt;img src=”图片url”&gt;<br>&lt;img/&gt;属性</p><ul><li><code>alt</code> 图片不能显示时的替代文本</li><li><code>title</code> 鼠标悬停时显示</li><li><code>height</code> 图像高度</li><li><code>width</code> 图像宽度</li><li><code>border</code> 图像边框宽度</li></ul></blockquote><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><blockquote><p><a href="URL" target ="打开方式"></a><br>href =url   链接的地址<br>target _blank 新窗口打开</p><ul><li><strong><code>&lt;base&gt;</code> <code>&lt;base target=&quot;_blank&quot;&gt;</code></strong> 设置超链接的共有属性</li></ul></blockquote><h2 id="预格式化文本"><a href="#预格式化文本" class="headerlink" title="预格式化文本"></a>预格式化文本</h2><blockquote><p>&lt;pre&gt; &lt;/pre&gt; 预格式化文本</p><p>保留空格与换行</p></blockquote><h2 id="常用特殊字符"><a href="#常用特殊字符" class="headerlink" title="常用特殊字符"></a>常用特殊字符</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">空字符      <span class="symbol">&amp;nbsp;</span></span><br><span class="line">注册商标    <span class="symbol">&amp;reg;</span></span><br><span class="line"><span class="tag">&lt;    &amp;<span class="attr">lt</span>;</span></span><br><span class="line"><span class="tag">&gt;</span><span class="symbol">&amp;gt;</span></span><br><span class="line">&amp;    <span class="symbol">&amp;amp;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格数据格式"><a href="#表格数据格式" class="headerlink" title="表格数据格式"></a>表格数据格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表格标题标签 即表头--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表头单元格,文字居中且加粗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元格标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><blockquote><p><code>border</code> 边框<br><code>width</code> 宽度<br><code>height</code> 高度<br><code>align</code> 设置表格在网页中水平对齐方式</p><ul><li><code>left</code></li><li><code>center</code></li><li><code>right</code></li><li><code>cellspacing</code> 单元格与单元格之间距离</li><li><code>cellpadding</code> 单元格内容与边框的距离</li></ul></blockquote><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><h4 id="行"><a href="#行" class="headerlink" title="行"></a>行</h4><blockquote><p> rowspan=”合并单元格的个数 “</p></blockquote><h4 id="列"><a href="#列" class="headerlink" title="列"></a>列</h4><blockquote><p>colspan=”合并单元格个数”</p></blockquote><h4 id="合并的方式"><a href="#合并的方式" class="headerlink" title="合并的方式"></a>合并的方式</h4><blockquote><ol><li>先确认跨行还是跨列</li><li>根据 先上 后下 先左 后右的原则找到目标单元格 ，然后写上合并方式 和合并数量</li><li>删除多余的单元格</li></ol></blockquote><h3 id="语义化结构划分"><a href="#语义化结构划分" class="headerlink" title="语义化结构划分"></a>语义化结构划分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span> 表的头部   内部必须拥有<span class="tag">&lt;<span class="name">tr</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> 表的主体</span><br><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span> 表的末尾</span><br><span class="line"> 注意：结构不是必须的   即使不写，绝大多数浏览器在解析的时候，都会智能的给你加上</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><blockquote><ol><li>有序列表   <ol></ol></li><li>无序列表   <ul></ul></li><li>自定义列表 <dl></dl></li></ol></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">注意：实际中很少使用有序列表，在做一些列表的时候，大家都比较喜欢使用无序列表。因为ul标签里面只能嵌套li标签</span><br><span class="line">一般在使用列表的时候都会去除别表的默认样式，再根据自己的需求去使用css  js  去定制自己需要的样式和交互</span><br></pre></td></tr></table></figure><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ul内只能嵌套li--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">注意：一般的列表，都喜欢使用 无序列表</span><br></pre></td></tr></table></figure><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词的解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词的解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2的解释2<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">注意：自定义标签一般都用在页面结尾的友情链接部分  就是  页面的 footer部分</span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><blockquote><p><from>这里写具体的表单标签</from> // from表单用于提交数据   有action   method  name属性</p></blockquote><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="标签"><a href="#标签" class="headerlink" title=" 标签"></a><input/> 标签</h4><blockquote><ul><li>语法<pre><code>&lt;input type=&quot;属性值&quot;/&gt;</code></pre></li><li>属性值<ul><li>type</li><li>text 单行文本输入框</li><li>password 密码输入框</li><li>radio 单选按钮</li><li>checkbox 复选框</li><li>button 普通按钮</li><li>submit 提交按钮</li><li>reset 重置按钮</li><li>image 图像形式的提交按钮</li><li>file 文件域</li><li>name 控件的名称</li><li>value input控件中的默认文本值</li><li>size input控件在页面中的显示宽度</li><li>checked 表示默认选中状态</li></ul></li></ul></blockquote><h4 id="lt-label-gt-lt-label-gt-标签"><a href="#lt-label-gt-lt-label-gt-标签" class="headerlink" title="&lt;label&gt;&lt;/label&gt;标签"></a><code>&lt;label&gt;&lt;/label&gt;</code>标签</h4><blockquote><p><label>用户名：<input type="text"/></label></p><p><label for="username">用户名：</label>    </p> <input type="text" id="username"/> </blockquote><h4 id="lt-textarea-gt-lt-textarea-gt-文本域"><a href="#lt-textarea-gt-lt-textarea-gt-文本域" class="headerlink" title="&lt;textarea&gt;&lt;/textarea&gt; 文本域"></a><code>&lt;textarea&gt;&lt;/textarea&gt;</code> 文本域</h4><h4 id="select下拉列表"><a href="#select下拉列表" class="headerlink" title="select下拉列表"></a><code>select</code>下拉列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加默认选中项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>　 <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>选项１<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项２<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：部分文章可能会在不就的将来更新</p><p>如果能够帮助到你，是小编最大的荣幸</p><p>当然   有 不好的地方  请大家帮忙指出   学习永无止境    </p><p>小编一直认为  人外有人  天外有天    一起学习   共同进步</p><p>让我们共同加油吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
